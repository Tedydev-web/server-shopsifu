import { PrismaClient } from '@prisma/client'
import { NestFactory } from '@nestjs/core'
import { AppModule } from '../../../src/app.module'
import { SearchSyncService } from '../../../src/shared/services/search-sync.service'
import { Logger } from '@nestjs/common'

const prisma = new PrismaClient()
const logger = new Logger('SyncToElasticsearch')

/**
 * Sync t·∫•t c·∫£ products ƒë√£ import l√™n Elasticsearch
 * S·ª≠ d·ª•ng c∆° ch·∫ø batch processing v√† NestJS application context
 */
async function syncAllProductsToElasticsearch(): Promise<void> {
  let app: any = null

  try {
    logger.log('üöÄ B·∫Øt ƒë·∫ßu sync t·∫•t c·∫£ products l√™n Elasticsearch...')

    // L·∫•y t·∫•t c·∫£ products ƒë√£ import (c√≥ createdById)
    const products = await prisma.product.findMany({
      where: {
        deletedAt: null,
        createdById: { not: undefined } // Ch·ªâ l·∫•y products ƒë∆∞·ª£c import
      },
      select: {
        id: true,
        name: true
      }
    })

    logger.log(`üì¶ T√¨m th·∫•y ${products.length} products c·∫ßn sync`)

    if (products.length === 0) {
      logger.warn('‚ö†Ô∏è Kh√¥ng c√≥ products n√†o ƒë·ªÉ sync')
      return
    }

    // T·∫°o NestJS application context ƒë·ªÉ s·ª≠ d·ª•ng SearchSyncService
    logger.log('üîß Kh·ªüi t·∫°o NestJS application context...')
    app = await NestFactory.createApplicationContext(AppModule)
    const searchSyncService = app.get(SearchSyncService)

    // Sync theo batch ƒë·ªÉ tr√°nh qu√° t·∫£i
    const batchSize = 100
    const batches = Array.from({ length: Math.ceil(products.length / batchSize) }, (_, i) =>
      products.slice(i * batchSize, (i + 1) * batchSize)
    )

    logger.log(`üì¶ S·∫Ω sync ${products.length} products trong ${batches.length} batches`)

    let successCount = 0
    let failCount = 0

    // Sync t·ª´ng batch
    for (let i = 0; i < batches.length; i++) {
      const batch = batches[i]
      const productIds = batch.map((p) => p.id)

      logger.log(`üîÑ ƒêang sync batch ${i + 1}/${batches.length} v·ªõi ${batch.length} products...`)

      try {
        await searchSyncService.syncProductsBatchToES({
          productIds: productIds,
          action: 'create'
        })

        successCount += batch.length
        logger.log(`‚úÖ ƒê√£ sync th√†nh c√¥ng batch ${i + 1}/${batches.length}`)

        // Log t√™n c√°c products ƒë√£ sync
        batch.forEach((product) => {
          logger.log(`  ‚úÖ Queued sync for product: ${product.name}`)
        })
      } catch (error) {
        failCount += batch.length
        logger.error(`‚ùå L·ªói khi sync batch ${i + 1}/${batches.length}:`, error)
        // Ti·∫øp t·ª•c v·ªõi batch ti·∫øp theo thay v√¨ d·ª´ng to√†n b·ªô
      }
    }

    logger.log(`üéâ Sync completed! Success: ${successCount}, Failed: ${failCount}`)
  } catch (error) {
    logger.error('‚ùå Sync failed:', error)
    throw error
  } finally {
    // ƒê√≥ng NestJS application context
    if (app) {
      await app.close()
      logger.log('üîå ƒê√£ ƒë√≥ng NestJS application context')
    }

    await prisma.$disconnect()
    logger.log('üîå ƒê√£ ng·∫Øt k·∫øt n·ªëi database')
  }
}

// Ch·∫°y script
if (require.main === module) {
  syncAllProductsToElasticsearch()
    .then(() => {
      logger.log('‚úÖ Sync to Elasticsearch completed!')
      process.exit(0)
    })
    .catch((error) => {
      logger.error('‚ùå Sync to Elasticsearch failed:', error)
      process.exit(1)
    })
}

export { syncAllProductsToElasticsearch }
