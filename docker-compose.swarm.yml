version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '12.0'
          memory: 25G
        reservations:
          cpus: '8.0'
          memory: 20G
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      rollback_config:
        parallelism: 1
        delay: 5s
        order: stop-first
    command: ['postgres', '-c', 'config_file=/etc/postgresql/postgresql.conf']
    env_file: [.env.docker]
    ports:
      - target: 5432
        published: 5432
        protocol: tcp
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks: [app-network]
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER:-shopsifu}']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  redis:
    image: redis:7-alpine
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '6.0'
          memory: 25G
        reservations:
          cpus: '4.0'
          memory: 20G
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
    command: ['redis-server', '/usr/local/etc/redis/redis.conf']
    env_file: [.env.docker]
    ports:
      - target: 6379
        published: 6379
        protocol: tcp
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks: [app-network]
    healthcheck:
      test: ['CMD-SHELL', 'redis-cli -a "$${REDIS_PASSWORD}" ping | grep -q PONG']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '4.5'
          memory: 20G
        reservations:
          cpus: '3.0'
          memory: 16G
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 300s
      update_config:
        parallelism: 1
        delay: 30s
        order: start-first
    env_file: [.env.docker]
    ulimits:
      nofile: { soft: 131072, hard: 131072 }
    ports:
      - target: 9200
        published: 9200
        protocol: tcp
    volumes:
      - esdata:/usr/share/elasticsearch/data
      - ./config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
    networks: [app-network]
    healthcheck:
      test: ['CMD-SHELL', 'curl -fsS -m 5 http://localhost:9200 >/dev/null || exit 1']
      interval: 30s
      timeout: 15s
      retries: 10
      start_period: 120s

  server:
    image: ${SERVER_IMAGE:-server-shopsifu:latest}
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '6.0'
          memory: 12G
        reservations:
          cpus: '4.0'
          memory: 8G
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 300s
      update_config:
        parallelism: 1
        delay: 30s
        order: start-first
        failure_action: rollback
      rollback_config:
        parallelism: 1
        delay: 5s
        order: stop-first
    env_file: .env.docker
    ports:
      - target: 3000
        published: 3000
        protocol: tcp
    networks: [app-network]
    volumes:
      - ./logs:/app/logs
      - ./certs:/app/certs
      - ./upload:/app/upload
    tmpfs:
      - /tmp:size=2g
      - /app/temp:size=1g
    healthcheck:
      test: ['CMD-SHELL', 'curl -f http://localhost:3000/health || exit 1']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s

  pgbouncer:
    image: edoburu/pgbouncer:1.18.0
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1.5'
          memory: 2.5G
        reservations:
          cpus: '1.0'
          memory: 2G
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
    ports:
      - target: 6432
        published: 6432
        protocol: tcp
    volumes:
      - ./config/pgbouncer.ini:/etc/pgbouncer/pgbouncer.ini:ro
      - ./config/userlist.txt:/etc/pgbouncer/userlist.txt:ro
    networks: [app-network]
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -h localhost -p 6432 -U shopsifu']
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  prometheus:
    image: prom/prometheus:v2.54.1
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 300s
    env_file: [.env.docker]
    ports:
      - target: 9090
        published: 9090
        protocol: tcp
    volumes:
      - ./monitoring/prometheus:/etc/prometheus:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/server.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=${PROMETHEUS_RETENTION_DAYS:-30}d'
      - '--web.enable-lifecycle=${PROMETHEUS_WEB_ENABLE_LIFECYCLE}'
      - '--web.enable-admin-api=${PROMETHEUS_WEB_ENABLE_ADMIN_API}'
      - '--web.enable-telemetry=${PROMETHEUS_WEB_ENABLE_TELEMETRY}'
    networks: [app-network]
    healthcheck:
      test: ['CMD-SHELL', 'wget --no-verbose --tries=1 --spider http://localhost:9090/-/healthy || exit 1']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  grafana:
    image: grafana/grafana:11.4.0
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 300s
    env_file: [.env.docker]
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=${GRAFANA_ALLOW_SIGNUP}
      - GF_AUTH_ANONYMOUS_ENABLED=${GRAFANA_ANONYMOUS_ENABLED}
      - GF_SERVER_HTTP_PORT=${GRAFANA_SERVER_HTTP_PORT}
      - GF_SECURITY_DISABLE_GRAVATAR=${GRAFANA_SECURITY_DISABLE_GRAVATAR}
      - GF_SECURITY_COOKIE_SECURE=${GRAFANA_SECURITY_COOKIE_SECURE}
      - GF_SECURITY_COOKIE_HTTPONLY=${GRAFANA_SECURITY_COOKIE_HTTPONLY}
    ports:
      - target: 3000
        published: 3001
        protocol: tcp
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./config/grafana.ini:/etc/grafana/grafana.ini:ro
    networks: [app-network]
    healthcheck:
      test: ['CMD-SHELL', 'wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  kibana:
    image: docker.elastic.co/kibana/kibana:8.13.4
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 300s
    env_file: [.env.docker]
    environment:
      - SERVER_NAME=${KIBANA_SERVER_NAME}
      - ELASTICSEARCH_HOSTS=${KIBANA_ELASTICSEARCH_HOSTS}
      - SERVER_SSL_ENABLED=${KIBANA_SERVER_SSL_ENABLED}
      - XPACK_SECURITY_ENABLED=${KIBANA_XPACK_SECURITY_ENABLED}
    ports:
      - target: 5601
        published: 5601
        protocol: tcp
    volumes:
      - ./certs:/usr/share/kibana/config/certs:ro
      - ./config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
    networks: [app-network]
    healthcheck:
      test: ['CMD-SHELL', 'curl -fsS http://localhost:5601/api/status | grep -q kibana']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

networks:
  app-network:
    driver: overlay
    attachable: true
    name: app-network

volumes:
  postgres_data:
    driver: local
    name: postgres-data
  redis_data:
    driver: local
    name: redis-data
  esdata:
    driver: local
    name: elasticsearch-data
  prometheus_data:
    driver: local
    name: prometheus-data
  grafana_data:
    driver: local
    name: grafana-data
