services:
  postgres:
    image: postgres:16-alpine
    container_name: postgres
    restart: unless-stopped
    logging:
      driver: json-file
      options:
        max-size: '10m'
        max-file: '5'
    # Expose PostgreSQL chỉ cho localhost (an toàn hơn)
    ports:
      - '127.0.0.1:${POSTGRES_PORT:-5432}:5432'
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-shopsifu}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-Shopsifu2025@@}
      POSTGRES_DB: ${POSTGRES_DB:-shopsifu}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - app-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER:-shopsifu}']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    logging:
      driver: json-file
      options:
        max-size: '10m'
        max-file: '5'
    ulimits:
      nofile: 65535
    ports:
      - '${REDIS_PORT:-6379}:6379'
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    command:
      - redis-server
      - --appendonly
      - 'yes'
      - --appendfsync
      - everysec
      - --maxmemory
      - ${REDIS_MAXMEMORY:-1gb}
      - --maxmemory-policy
      - allkeys-lru

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
    container_name: elasticsearch
    environment:
      - node.name=es01
      - cluster.name=shopsifu-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - 'ES_JAVA_OPTS=-Xms${ELASTICSEARCH_HEAP_SIZE:-8g} -Xmx${ELASTICSEARCH_HEAP_SIZE:-8g}'
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esdata:/usr/share/elasticsearch/data
    ports:
      - '127.0.0.1:${ELASTICSEARCH_PORT:-9200}:9200'
    networks:
      - app-network
    healthcheck:
      test: ['CMD-SHELL', "curl -s http://localhost:9200 | grep -q 'You Know, for Search'"]
      interval: 30s
      timeout: 10s
      retries: 5

  kibana:
    image: docker.elastic.co/kibana/kibana:8.13.4
    container_name: kibana
    environment:
      - SERVER_NAME=kibana
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - SERVER_SSL_ENABLED=false
    ports:
      - 127.0.0.1:${KIBANA_PORT:-5601}:5601
    volumes:
      - ./certs:/usr/share/kibana/config/certs
    networks:
      - app-network
    depends_on:
      elasticsearch:
        condition: service_healthy

  server:
    image: ${SERVER_IMAGE:-ghcr.io/tedydev-web/server-shopsifu:latest}
    container_name: server
    restart: unless-stopped
    # read_only: true  # Tạm thời tắt để PM2 hoạt động
    logging:
      driver: json-file
      options:
        max-size: '10m'
        max-file: '5'
    ulimits:
      nofile: 65535
    stop_grace_period: 30s
    security_opt:
      - no-new-privileges:true
    sysctls:
      net.core.somaxconn: 65535
      net.ipv4.tcp_tw_reuse: '1'
    # Port mapping đã được xử lý qua Nginx reverse proxy
    # ports:
    #   - '3000:3000'
    env_file:
      - .env.docker
    networks:
      - app-network
    volumes:
      - ./logs:/app/logs
      - ./certs:/app/certs
      - ./upload:/app/upload
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ['CMD-SHELL', 'curl -f http://localhost:3000/health || exit 1']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s

  prometheus:
    image: prom/prometheus:v2.54.1
    container_name: prometheus
    restart: unless-stopped
    logging:
      driver: json-file
      options:
        max-size: '10m'
        max-file: '5'
    ulimits:
      nofile: 65535
    security_opt:
      - no-new-privileges:true
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=${PROMETHEUS_RETENTION_DAYS:-7}d'
      - '--web.enable-lifecycle'
    networks:
      - app-network
    depends_on:
      - server
    healthcheck:
      test: ['CMD-SHELL', 'wget --no-verbose --tries=1 --spider http://localhost:9090/-/healthy || exit 1']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  grafana:
    image: grafana/grafana:11.4.0
    container_name: grafana
    restart: unless-stopped
    logging:
      driver: json-file
      options:
        max-size: '10m'
        max-file: '5'
    ulimits:
      nofile: 65535
    security_opt:
      - no-new-privileges:true
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-Shopsifu2025@@}
      - GF_USERS_ALLOW_SIGN_UP=${GRAFANA_ALLOW_SIGNUP:-false}
      - GF_AUTH_ANONYMOUS_ENABLED=${GRAFANA_ANONYMOUS_ENABLED:-false}
      - GF_SERVER_HTTP_PORT=${GRAFANA_PORT:-3000}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - app-network
    depends_on:
      prometheus:
        condition: service_healthy
    healthcheck:
      test: ['CMD-SHELL', 'wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # PgBouncer cho connection pooling
  pgbouncer:
    image: edoburu/pgbouncer:1.18.0
    container_name: pgbouncer
    restart: unless-stopped
    environment:
      - DATABASES_HOST=postgres
      - DATABASES_PORT=5432
      - DATABASES_USER=${POSTGRES_USER:-shopsifu}
      - DATABASES_PASSWORD=${POSTGRES_PASSWORD:-Shopsifu2025@@}
      - DATABASES_DBNAME=${POSTGRES_DB:-shopsifu}
      - POOL_MODE=${PGBOUNCER_POOL_MODE:-transaction}
      - MAX_CLIENT_CONN=${PGBOUNCER_MAX_CLIENT_CONN:-1000}
      - DEFAULT_POOL_SIZE=${PGBOUNCER_DEFAULT_POOL_SIZE:-20}
      - MAX_DB_CONNECTIONS=${PGBOUNCER_MAX_DB_CONNECTIONS:-100}
      - MAX_USER_CONNECTIONS=${PGBOUNCER_MAX_USER_CONNECTIONS:-100}
    ports:
      - '127.0.0.1:${PGBOUNCER_PORT:-6432}:5432'
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_healthy
    logging:
      driver: json-file
      options:
        max-size: '10m'
        max-file: '5'
    security_opt:
      - no-new-privileges:true

  nginx:
    image: nginx:1.27-alpine
    container_name: nginx
    restart: unless-stopped
    depends_on:
      - grafana
      - prometheus
    networks:
      - app-network
    ports:
      - '${NGINX_HTTP_PORT:-80}:80'
      - '${NGINX_HTTPS_PORT:-443}:443'
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/secrets:/etc/nginx/secrets:ro
    logging:
      driver: json-file
      options:
        max-size: '10m'
        max-file: '5'
    security_opt:
      - no-new-privileges:true

networks:
  app-network:
    driver: bridge
    name: app-network

volumes:
  postgres_data:
    driver: local
    name: postgres-data
  redis_data:
    driver: local
    name: redis-data
  esdata:
    driver: local
    name: elasticsearch-data
  prometheus_data:
    driver: local
    name: prometheus-data
  grafana_data:
    driver: local
    name: grafana-data
