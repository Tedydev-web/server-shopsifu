services:
  postgres:
    image: postgres:16-alpine
    container_name: postgres
    init: true
    restart: unless-stopped
    cpus: '8.0'
    mem_limit: '16g'
    command:
      - 'postgres'
      - '-c'
      - 'max_connections=600'
      - '-c'
      - 'shared_buffers=6GB'
      - '-c'
      - 'effective_cache_size=12GB'
      - '-c'
      - 'work_mem=64MB'
      - '-c'
      - 'maintenance_work_mem=1GB'
      - '-c'
      - 'wal_compression=on'
      - '-c'
      - 'max_wal_size=4GB'
      - '-c'
      - 'checkpoint_timeout=15min'
      - '-c'
      - 'random_page_cost=1.1'
      - '-c'
      - 'effective_io_concurrency=200'
      - '-c'
      - 'max_worker_processes=16'
      - '-c'
      - 'max_parallel_workers=12'
      - '-c'
      - 'max_parallel_maintenance_workers=4'
      - '-c'
      - 'max_parallel_workers_per_gather=4'
      - '-c'
      - 'tcp_keepalives_idle=60'
      - '-c'
      - 'tcp_keepalives_interval=30'
      - '-c'
      - 'tcp_keepalives_count=10'
    env_file:
      - .env.docker
    logging:
      driver: json-file
      options:
        max-size: '10m'
        max-file: '5'
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    shm_size: '1g'
    security_opt:
      - no-new-privileges:true
    ports:
      - '127.0.0.1:${POSTGRES_PORT:-5432}:5432'
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST_AUTH_METHOD=md5
      - POSTGRES_INITDB_ARGS=--auth-host=md5
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - app-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER:-shopsifu}']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  redis:
    image: redis:7-alpine
    container_name: redis
    init: true
    restart: unless-stopped
    cpus: '2.0'
    mem_limit: '4g'
    env_file:
      - .env.docker
    logging:
      driver: json-file
      options:
        max-size: '10m'
        max-file: '5'
    ulimits:
      nofile: 262144
    security_opt:
      - no-new-privileges:true
    ports:
      - '127.0.0.1:${REDIS_PORT:-6379}:6379'
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: ['CMD-SHELL', 'redis-cli -a "$${REDIS_PASSWORD}" ping | grep -q PONG']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    command:
      - sh
      - -c
      - >
        exec redis-server --appendonly yes --appendfsync everysec
        --maxmemory "$${REDIS_MAXMEMORY:-4gb}"
        --maxmemory-policy allkeys-lru
        --timeout 0
        --tcp-keepalive 300
        --requirepass "$${REDIS_PASSWORD}"

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
    container_name: elasticsearch
    init: true
    restart: unless-stopped
    cpus: '8.0'
    mem_limit: '16g'
    logging:
      driver: json-file
      options:
        max-size: '10m'
        max-file: '5'
    env_file:
      - .env.docker
    environment:
      - node.name=es01
      - cluster.name=shopsifu-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - 'ELASTICSEARCH_HEAP_SIZE=${ELASTICSEARCH_HEAP_SIZE:-8g}'
      - 'ES_JAVA_OPTS=-Xms${ELASTICSEARCH_HEAP_SIZE:-8g} -Xmx${ELASTICSEARCH_HEAP_SIZE:-8g}'
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
      - node.store.allow_mmap=false
      - indices.memory.index_buffer_size=20%
      - xpack.ml.enabled=false
      - ingest.geoip.downloader.enabled=false
      - action.destructive_requires_name=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 262144
        hard: 262144
    security_opt:
      - no-new-privileges:true
    volumes:
      - esdata:/usr/share/elasticsearch/data
    ports:
      - '127.0.0.1:${ELASTICSEARCH_PORT:-9200}:9200'
    networks:
      - app-network
    healthcheck:
      test: ['CMD-SHELL', 'curl -fsS -m 5 http://localhost:9200 >/dev/null || exit 1']
      interval: 10s
      timeout: 10s
      retries: 60
      start_period: 300s

  kibana:
    image: docker.elastic.co/kibana/kibana:8.13.4
    container_name: kibana
    init: true
    restart: unless-stopped
    cpus: '1.0'
    mem_limit: '2g'
    logging:
      driver: json-file
      options:
        max-size: '10m'
        max-file: '5'
    env_file:
      - .env.docker
    environment:
      - SERVER_NAME=kibana
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - SERVER_SSL_ENABLED=false
    ports:
      - '127.0.0.1:${KIBANA_PORT:-5601}:5601'
    volumes:
      - ./certs:/usr/share/kibana/config/certs
    networks:
      - app-network
    security_opt:
      - no-new-privileges:true
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ['CMD-SHELL', 'curl -fsS http://localhost:5601/api/status | grep -q kibana']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  server:
    image: ${SERVER_IMAGE:-ghcr.io/tedydev-web/server-shopsifu:latest}
    pull_policy: always
    container_name: server
    init: true
    restart: unless-stopped
    cpus: '24.0'
    mem_limit: '24g'
    logging:
      driver: json-file
      options:
        max-size: '10m'
        max-file: '5'
    ulimits:
      nofile: 1048576
    stop_grace_period: 30s
    security_opt:
      - no-new-privileges:true
    sysctls:
      net.core.somaxconn: 65535
      net.ipv4.tcp_tw_reuse: '1'
    ports:
      - '${SERVER_PORT:-3000}:3000'
    env_file:
      - .env.docker
    environment:
      - UV_THREADPOOL_SIZE=64
    networks:
      - app-network
    volumes:
      - ./logs:/app/logs
      - ./certs:/app/certs
      - ./upload:/app/upload
    tmpfs:
      - /tmp:size=512m
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      pgbouncer:
        condition: service_started
    healthcheck:
      test: ['CMD-SHELL', 'curl -f http://localhost:3000/health || exit 1']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s

  prometheus:
    image: prom/prometheus:v2.54.1
    container_name: prometheus
    init: true
    restart: unless-stopped
    cpus: '0.5'
    mem_limit: '1g'
    env_file:
      - .env.docker
    logging:
      driver: json-file
      options:
        max-size: '10m'
        max-file: '5'
    ulimits:
      nofile: 65535
    security_opt:
      - no-new-privileges:true
    ports:
      - '127.0.0.1:${PROMETHEUS_PORT:-9090}:9090'
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=${PROMETHEUS_RETENTION_DAYS:-7}d'
      - '--web.enable-lifecycle'
    networks:
      - app-network
    depends_on:
      - server
    healthcheck:
      test: ['CMD-SHELL', 'wget --no-verbose --tries=1 --spider http://localhost:9090/-/healthy || exit 1']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  grafana:
    image: grafana/grafana:11.4.0
    container_name: grafana
    init: true
    restart: unless-stopped
    cpus: '0.5'
    mem_limit: '1g'
    env_file:
      - .env.docker
    logging:
      driver: json-file
      options:
        max-size: '10m'
        max-file: '5'
    ulimits:
      nofile: 65535
    security_opt:
      - no-new-privileges:true
    ports:
      - '127.0.0.1:${GRAFANA_PORT:-3001}:3000'
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=${GRAFANA_ALLOW_SIGNUP}
      - GF_AUTH_ANONYMOUS_ENABLED=${GRAFANA_ANONYMOUS_ENABLED}
      - GF_SERVER_HTTP_PORT=3000
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - app-network
    depends_on:
      prometheus:
        condition: service_healthy
    healthcheck:
      test: ['CMD-SHELL', 'wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  pgbouncer:
    image: edoburu/pgbouncer:1.18.0
    container_name: pgbouncer
    init: true
    restart: unless-stopped
    cpus: '1.0'
    mem_limit: '512m'
    env_file:
      - .env.docker
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_NAME=${POSTGRES_DB}
      - POOL_MODE=${PGBOUNCER_POOL_MODE:-transaction}
      - MAX_CLIENT_CONN=${PGBOUNCER_MAX_CLIENT_CONN:-1000}
      - DEFAULT_POOL_SIZE=${PGBOUNCER_DEFAULT_POOL_SIZE:-50}
      - MAX_DB_CONNECTIONS=${PGBOUNCER_MAX_DB_CONNECTIONS:-200}
      - MAX_USER_CONNECTIONS=${PGBOUNCER_MAX_USER_CONNECTIONS:-100}
      - DATABASES=shopsifu
      - AUTH_TYPE=md5
      - AUTH_QUERY=SELECT usename, passwd FROM pg_catalog.pg_shadow
      - ADMIN_USERS=postgres,shopsifu
      - STATS_USERS=postgres,shopsifu
    ulimits:
      nofile: 262144
    ports:
      - '127.0.0.1:${PGBOUNCER_PORT:-6432}:5432'
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_healthy
    logging:
      driver: json-file
      options:
        max-size: '10m'
        max-file: '5'
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -h localhost -p 5432 -U ${POSTGRES_USER:-shopsifu}']
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

networks:
  app-network:
    driver: bridge
    name: app-network

volumes:
  postgres_data:
    driver: local
    name: postgres-data
  redis_data:
    driver: local
    name: redis-data
  esdata:
    driver: local
    name: elasticsearch-data
  prometheus_data:
    driver: local
    name: prometheus-data
  grafana_data:
    driver: local
    name: grafana-data
