{
	"info": {
		"_postman_id": "56255e22-f6d6-490b-8a22-f69bbf0c0cf9",
		"name": "Shopsifu",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30243513",
		"_collection_link": "https://www.postman.com/shopsifu/workspace/shopsifu-workspace/collection/30243513-56255e22-f6d6-490b-8a22-f69bbf0c0cf9?action=share&source=collection_link&creator=30243513"
	},
	"item": [
		{
			"name": "Auth Modules Local",
			"item": [
				{
					"name": "Get Authorize",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
									"});",
									"",
									"// Attempt to get CSRF token from body if provided in specific /authorize endpoint (currently not the case for google-link)",
									"// For now, primarily rely on cookies set by the CsrfMiddleware",
									"try {",
									"    const responseBody = pm.response.json();",
									"    if (responseBody.csrfToken) {",
									"        pm.environment.set(\"csrfToken\", responseBody.csrfToken);",
									"        console.log(\"CSRF token from response body (if /authorize was designed for it): \" + responseBody.csrfToken);",
									"    }",
									"} catch (e) {",
									"    // console.log(\"No JSON body or csrfToken in body for this endpoint (google-link)\" );",
									"}",
									"",
									"// Attempt to get CSRF token from cookies set by CsrfMiddleware",
									"const csrfCookie = pm.cookies.jar().get(pm.environment.get(\"localUrl\"), 'xsrf-token');",
									"if (csrfCookie) {",
									"    pm.environment.set(\"csrfToken\", csrfCookie);",
									"    console.log(\"CSRF token from 'xsrf-token' cookie: \" + csrfCookie);",
									"} else {",
									"    console.warn(\"'xsrf-token' cookie not found. Ensure CsrfMiddleware is running and an initial request has been made.\");",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "User-Agent",
								"value": "PostmanRuntime/7.37.0",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{localUrl}}/auth/google-link",
							"host": [
								"{{localUrl}}"
							],
							"path": [
								"auth",
								"google-link"
							]
						},
						"description": "#### üìÑ M·ª•c ƒë√≠ch\\n\\nL·∫•y ƒë∆∞·ªùng d·∫´n OAuth2 ƒë·ªÉ redirect ng∆∞·ªùi d√πng sang Google, ph·ª•c v·ª• login/auth v·ªõi Google account.\\n**L∆∞u √Ω quan tr·ªçng v·ªÅ CSRF:** Request n√†y (v√† b·∫•t k·ª≥ request GET ban ƒë·∫ßu n√†o kh√°c ƒë·∫øn server) c≈©ng s·∫Ω gi√∫p thi·∫øt l·∫≠p cookie `xsrf-token` n·∫øu `CsrfMiddleware` ƒë∆∞·ª£c c·∫•u h√¨nh ƒë√∫ng. Cookie n√†y sau ƒë√≥ s·∫Ω ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ ƒë·∫∑t gi√° tr·ªã cho bi·∫øn `csrfToken` trong Postman tests, v√† bi·∫øn n√†y s·∫Ω ƒë∆∞·ª£c d√πng trong header `X-CSRF-Token` c·ªßa c√°c request POST/PUT/DELETE ti·∫øp theo.\\n\\n#### üîë Headers\\n\\n* `User-Agent`: V√≠ d·ª•: `PostmanRuntime/7.x.x`\\n\\n#### ‚ùì Query / Path / Body\\n\\n* (Kh√¥ng c√≥)\\n\\n#### üì§ V√≠ d·ª• Request\\n\\n```\\nGET {{localUrl}}/auth/google-link\\n```\\n\\n#### ‚úÖ Response Codes\\n\\n* `200 OK` ‚Äì Tr·∫£ v·ªÅ URL redirect.\\n* `500 Internal Server Error` ‚Äì L·ªói server.\\n\\n#### üç™ Cookies ƒê∆∞·ª£c Thi·∫øt L·∫≠p (B·ªüi CsrfMiddleware)\\n- `xsrf-token`: Path=/, SameSite=Lax (CSRF token cho c√°c request ti·∫øp theo)\\n- `_csrfSecret`: HttpOnly, Path=/, SameSite=Lax (Secret cho CSRF token)\\n\\n#### üì¶ V√≠ d·ª• Response\\n\\n```json\\n{\\n  \\"url\\": \\\"https://accounts.google.com/o/oauth2/v2/auth?client_id=‚Ä¶\\\"\\n}\\n```\\n\\n#### üß™ Postman Tests\\n- Ki·ªÉm tra m√£ tr·∫°ng th√°i 200 ho·∫∑c 204.\\n- Tr√≠ch xu·∫•t cookie `xsrf-token` v√† g√°n v√†o bi·∫øn m√¥i tr∆∞·ªùng `csrfToken`."
					},
					"response": []
				},
				{
					"name": "Register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"try {",
									"    const responseBody = pm.response.json();",
									"    console.log(\"Register Response:\", responseBody);",
									"    if (responseBody.email) {",
									"        pm.environment.set(\"emailRegistered\", responseBody.email);",
									"        console.log(\"Registration successful for email: \" + responseBody.email);",
									"        pm.test(\"Registration successful, user data received\", function () {",
									"            pm.expect(responseBody.id).to.be.a('number');",
									"            pm.expect(responseBody.email).to.be.a('string');",
									"        });",
									"    } else {",
									"       console.warn(\"Registration response did not contain expected user data.\");",
									"    }",
									"",
									"    const csrfCookie = pm.cookies.jar().get(pm.environment.get(\"localUrl\"), 'xsrf-token');",
									"    if (csrfCookie) {",
									"        pm.environment.set(\"csrfToken\", csrfCookie);",
									"        console.log(\"CSRF token from 'xsrf-token' cookie after register: \" + csrfCookie);",
									"    }",
									"} catch (e) {",
									"    console.error(\"Error parsing register response or running tests: \", e);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-CSRF-Token",
								"value": "{{csrfToken}}",
								"type": "text"
							},
							{
								"key": "User-Agent",
								"value": "PostmanRuntime/7.37.0",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "  {\n    \"email\": \"{{email}}\",\n    \"name\": \"{{defaultName}}\",\n    \"phoneNumber\": \"0123456789\",\n    \"password\": \"{{defaultPwd}}\",\n    \"confirmPassword\": \"{{defaultPwd}}\",\n    \"otpToken\": \"{{otpToken}}\"\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{localUrl}}/auth/register",
							"host": [
								"{{localUrl}}"
							],
							"path": [
								"auth",
								"register"
							]
						},
						"description": "#### üìÑ M·ª•c ƒë√≠ch\\n\\nT·∫°o m·ªõi t√†i kho·∫£n ng∆∞·ªùi d√πng sau khi ƒë√£ verify OTP (th√¥ng qua endpoint `verify-code` v·ªõi type `REGISTER` ƒë·ªÉ l·∫•y `otpToken`).\\n\\n#### üîë Headers\\n\\n* `Content-Type: application/json`\\n* `User-Agent`: V√≠ d·ª•: `PostmanRuntime/7.x.x` (B·∫Øt bu·ªôc ƒë·ªÉ backend x·ª≠ l√Ω device)\\n* `X-CSRF-Token: {{csrfToken}}` (L·∫•y t·ª´ cookie `xsrf-token`)\\n\\n#### üì• Body Parameters\\n\\n| Field           | Lo·∫°i   | M√¥ t·∫£                             | V√≠ d·ª• |\\n| --------------- | ------ | --------------------------------- | ----- |\\n| email           | string | Email ƒë√£ verify b·∫±ng OTP          | `{{email}}` |\\n| name            | string | H·ªç t√™n ng∆∞·ªùi d√πng                 | `{{defaultName}}` |\\n| phoneNumber     | string | S·ªë ƒëi·ªán tho·∫°i                     | `0123456789` |\\n| password        | string | M·∫≠t kh·∫©u                          | `{{defaultPwd}}` |\\n| confirmPassword | string | Nh·∫≠p l·∫°i m·∫≠t kh·∫©u                 | `{{defaultPwd}}` |\\n| otpToken        | string | Token nh·∫≠n ƒë∆∞·ª£c t·ª´ `/auth/verify-code` (type REGISTER) | `{{otpToken}}` |\\n\\n#### üì§ V√≠ d·ª• Request Body\\n\\n```json\\n{\\n  \\"email\\": \\\"{{email}}\\\",\\n  \\"name\\": \\\"{{defaultName}}\\\",\\n  \\"phoneNumber\\\": \\\"0123456789\\\",\\n  \\"password\\\": \\\"{{defaultPwd}}\\\",\\n  \\"confirmPassword\\\": \\\"{{defaultPwd}}\\\",\\n  \\"otpToken\\\": \\\"{{otpToken}}\\\"\\n}\\n```\\n\\n#### ‚úÖ Response Codes\\n\\n* `201 Created` ‚Äì T·∫°o t√†i kho·∫£n th√†nh c√¥ng. Tr·∫£ v·ªÅ th√¥ng tin user.\\n  ```json\\n  {\\n    \\"id\\": 1,\\n    \\"email\\": \\\"user@example.com\\\",\\n    \\"name\\": \\\"User Name\\\",\\n    \\"phoneNumber\\\": \\\"0123456789\\\",\\n    \\"avatar\\\": null,\\n    \\"status\\\": \\\"ACTIVE\\\",\\n    \\"roleId\\\": 2,\\n    \\"createdById\\\": null,\\n    \\"updatedById\\\": null,\\n    \\"deletedAt\\\": null,\\n    \\"createdAt\\\": \\\"2023-10-27T...Z\\\",\\n    \\"updatedAt\\\": \\\"2023-10-27T...Z\\\"\\n  }\\n  ```\\n* `400 Bad Request` ‚Äì Thi·∫øu tr∆∞·ªùng, m·∫≠t kh·∫©u kh√¥ng kh·ªõp, `otpToken` kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n.\\n* `409 Conflict` ‚Äì Email ƒë√£ t·ªìn t·∫°i.\\n\\n#### üç™ Cookies ƒê∆∞·ª£c Thi·∫øt L·∫≠p\\n- `xsrf-token` (n·∫øu ch∆∞a c√≥ ho·∫∑c ƒë∆∞·ª£c l√†m m·ªõi)\\n\\n#### üß™ Postman Tests\\n- Ki·ªÉm tra status code 201.\\n- X√°c minh response ch·ª©a th√¥ng tin user.\\n- C·∫≠p nh·∫≠t `csrfToken` t·ª´ cookie `xsrf-token`."
					},
					"response": []
				},
				{
					"name": "Send OTP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"try {",
									"    const responseBody = pm.response.json();",
									"    console.log(\"Send OTP Response:\", responseBody);",
									"    pm.test(\"OTP sent message received\", function () {",
									"        pm.expect(responseBody.message).to.include(\"G·ª≠i m√£ OTP th√†nh c√¥ng\");",
									"    });",
									"",
									"    const csrfCookie = pm.cookies.jar().get(pm.environment.get(\"localUrl\"), 'xsrf-token');",
									"    if (csrfCookie) {",
									"        pm.environment.set(\"csrfToken\", csrfCookie);",
									"        console.log(\"CSRF token from 'xsrf-token' cookie after send-otp: \" + csrfCookie);",
									"    }",
									"} catch (e) {",
									"    console.error(\"Error parsing Send OTP response or running tests: \", e);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-CSRF-Token",
								"value": "{{csrfToken}}",
								"type": "text"
							},
							{
								"key": "User-Agent",
								"value": "PostmanRuntime/7.37.0",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "  {\n    \"email\": \"{{email}}\",\n    \"type\": \"REGISTER\" \n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{localUrl}}/auth/send-otp",
							"host": [
								"{{localUrl}}"
							],
							"path": [
								"auth",
								"send-otp"
							]
						},
						"description": "#### üìÑ M·ª•c ƒë√≠ch\\n\\nG·ª≠i m√£ OTP ƒë·∫øn email cho c√°c m·ª•c ƒë√≠ch kh√°c nhau.\\nEndpoint c≈© `/auth/otp` ƒë√£ ƒë∆∞·ª£c ƒë·ªïi th√†nh `/auth/send-otp`.\\n\\n#### üîë Headers\\n\\n* `Content-Type: application/json`\\n* `User-Agent`: V√≠ d·ª•: `PostmanRuntime/7.x.x`\\n* `X-CSRF-Token: {{csrfToken}}` (L·∫•y t·ª´ cookie `xsrf-token`)\\n\\n#### üì• Body Parameters\\n\\n| Field | Lo·∫°i   | M√¥ t·∫£                                              | V√≠ d·ª• |\\n| ----- | ------ | -------------------------------------------------- | ----- |\\n| email | string | ƒê·ªãa ch·ªâ email nh·∫≠n OTP                             | `{{email}}` |\\n| type  | string | Lo·∫°i OTP: `REGISTER`, `FORGOT_PASSWORD`, `LOGIN_2FA`, `DISABLE_2FA`, `SETUP_2FA` | `REGISTER` |\\n\\n#### üì§ V√≠ d·ª• Request Body\\n\\n```json\\n{\\n  \\"email\\": \\\"{{email}}\\\",\\n  \\"type\\": \\\"REGISTER\\"\\n}\\n```\\n\\n#### ‚úÖ Response Codes\\n\\n* `200 OK` ‚Äì OTP ƒë√£ g·ª≠i th√†nh c√¥ng.\\n  ```json\\n  {\\n    \\"message\\": \\\"G·ª≠i m√£ OTP th√†nh c√¥ng\\\"\\n  }\\n  ```\\n* `400 Bad Request` ‚Äì Email kh√¥ng h·ª£p l·ªá, type kh√¥ng h·ª£p l·ªá.\\n* `409 Conflict` ‚Äì Email ƒë√£ t·ªìn t·∫°i (n·∫øu type l√† `REGISTER`).\\n* `404 Not Found` ‚Äì Email kh√¥ng t·ªìn t·∫°i (n·∫øu type l√† `FORGOT_PASSWORD`).\\n* `429 Too Many Requests` ‚Äì G·ª≠i qu√° s·ªë l·∫ßn cho ph√©p.\\n\\n#### üç™ Cookies ƒê∆∞·ª£c Thi·∫øt L·∫≠p\\n- `xsrf-token` (n·∫øu ch∆∞a c√≥ ho·∫∑c ƒë∆∞·ª£c l√†m m·ªõi)\\n\\n#### üß™ Postman Tests\\n- Ki·ªÉm tra status code 200.\\n- X√°c minh message.\\n- C·∫≠p nh·∫≠t `csrfToken` t·ª´ cookie `xsrf-token`."
					},
					"response": []
				},
				{
					"name": "Verify code",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"try {",
									"    const responseBody = pm.response.json();",
									"    console.log(\"Verify Code Response:\", responseBody);",
									"    if (responseBody.otpToken) {",
									"        pm.environment.set(\"otpToken\", responseBody.otpToken);",
									"        console.log(\"OTP Token set: \" + responseBody.otpToken);",
									"        pm.test(\"Verification successful, otpToken received\", function () {",
									"            pm.expect(responseBody.otpToken).to.be.a('string');",
									"        });",
									"    } else {",
									"       console.warn(\"Verify code response did not contain otpToken.\");",
									"    }",
									"",
									"    const csrfCookie = pm.cookies.jar().get(pm.environment.get(\"localUrl\"), 'xsrf-token');",
									"    if (csrfCookie) {",
									"        pm.environment.set(\"csrfToken\", csrfCookie);",
									"        console.log(\"CSRF token from 'xsrf-token' cookie after verify-code: \" + csrfCookie);",
									"    }",
									"} catch (e) {",
									"    console.error(\"Error parsing verify-code response or running tests: \", e);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-CSRF-Token",
								"value": "{{csrfToken}}",
								"type": "text"
							},
							{
								"key": "User-Agent",
								"value": "PostmanRuntime/7.37.0",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{email}}\",\n    \"code\": \"{{otpCodeFromEmail}}\", \n    \"type\": \"REGISTER\" \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{localUrl}}/auth/verify-code",
							"host": [
								"{{localUrl}}"
							],
							"path": [
								"auth",
								"verify-code"
							]
						},
						"description": "#### üìÑ M·ª•c ƒë√≠ch\\n\\nX√°c th·ª±c m√£ OTP ƒë√£ g·ª≠i v·ªÅ email. N·∫øu th√†nh c√¥ng, tr·∫£ v·ªÅ m·ªôt `otpToken` ƒë·ªÉ s·ª≠ d·ª•ng cho b∆∞·ªõc ti·∫øp theo (v√≠ d·ª•: ho√†n t·∫•t ƒëƒÉng k√Ω, reset m·∫≠t kh·∫©u).\\n\\n#### üîë Headers\\n\\n* `Content-Type: application/json`\\n* `User-Agent`: V√≠ d·ª•: `PostmanRuntime/7.x.x` (B·∫Øt bu·ªôc ƒë·ªÉ backend x·ª≠ l√Ω device)\\n* `X-CSRF-Token: {{csrfToken}}` (L·∫•y t·ª´ cookie `xsrf-token`)\\n\\n#### üì• Body Parameters\\n\\n| Field | Lo·∫°i   | M√¥ t·∫£                                              | V√≠ d·ª• |\\n| ----- | ------ | -------------------------------------------------- | ----- |\\n| email | string | Email ƒë√£ d√πng l·∫•y OTP                              | `{{email}}` |\\n| code  | string | M√£ OTP 6 s·ªë nh·∫≠n ƒë∆∞·ª£c                               | `{{otpCodeFromEmail}}` (bi·∫øn ƒë·ªÉ t·ª± nh·∫≠p OTP t·ª´ email) |\\n| type  | string | Lo·∫°i OTP: `REGISTER`, `FORGOT_PASSWORD`, `LOGIN_2FA`, `DISABLE_2FA`, `SETUP_2FA` | `REGISTER` |\\n\\n#### üì§ V√≠ d·ª• Request Body\\n\\n```json\\n{\\n  \\"email\\": \\\"{{email}}\\\",\\n  \\"code\\\": \\\"123456\\\",\\n  \\"type\\\": \\\"REGISTER\\"\\n}\\n```\\n\\n#### ‚úÖ Response Codes\\n\\n* `200 OK` ‚Äì Code h·ª£p l·ªá.\\n  ```json\\n  {\\n    \\"otpToken\\": \\\"a_long_uuid_string_representing_the_verified_session\\\"\\n  }\\n  ```\\n* `400 Bad Request` ‚Äì Code sai/h·∫øt h·∫°n, ho·∫∑c c√°c v·∫•n ƒë·ªÅ v·ªÅ input kh√°c.\\n\\n#### üç™ Cookies ƒê∆∞·ª£c Thi·∫øt L·∫≠p\\n- `xsrf-token` (n·∫øu ch∆∞a c√≥ ho·∫∑c ƒë∆∞·ª£c l√†m m·ªõi)\\n\\n#### üß™ Postman Tests\\n- Ki·ªÉm tra status code 200.\\n- Tr√≠ch xu·∫•t `otpToken` t·ª´ response v√† l∆∞u v√†o bi·∫øn m√¥i tr∆∞·ªùng `otpToken`.\\n- C·∫≠p nh·∫≠t `csrfToken` t·ª´ cookie `xsrf-token`."
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									"",
									"try {",
									"    const responseBody = pm.response.json();",
									"    console.log(\"Login Response:\", responseBody);",
									"",
									"    if (responseBody.loginSessionToken) {",
									"        pm.environment.set(\"loginSessionToken\", responseBody.loginSessionToken);",
									"        console.log(\"2FA Required. loginSessionToken set: \" + responseBody.loginSessionToken);",
									"        if (responseBody.twoFactorMethod) {",
									"           pm.environment.set(\"twoFactorMethod\", responseBody.twoFactorMethod);",
									"           console.log(\"TwoFactorMethod set: \" + responseBody.twoFactorMethod);",
									"        }",
									"        pm.test(\"2FA required, loginSessionToken received\", function () {",
									"            pm.expect(responseBody.loginSessionToken).to.be.a('string');",
									"        });",
									"        pm.environment.unset(\"userId\");",
									"        pm.environment.unset(\"userRole\");",
									"    } else if (responseBody.userId) {",
									"        pm.environment.set(\"userId\", responseBody.userId);",
									"        if (responseBody.role) {",
									"            pm.environment.set(\"userRole\", responseBody.role);",
									"        }",
									"        console.log(\"Login successful. UserID: \" + responseBody.userId);",
									"        pm.test(\"Login successful, user profile received\", function () {",
									"            pm.expect(responseBody.userId).to.be.a('number');",
									"            pm.expect(responseBody.email).to.be.a('string');",
									"        });",
									"        pm.environment.unset(\"loginSessionToken\");",
									"        pm.environment.unset(\"twoFactorMethod\");",
									"    } else {",
									"        console.warn(\"Login response did not contain expected fields (loginSessionToken or userId).\");",
									"    }",
									"",
									"    const csrfCookie = pm.cookies.jar().get(pm.environment.get(\"localUrl\"), 'xsrf-token');",
									"    if (csrfCookie) {",
									"        pm.environment.set(\"csrfToken\", csrfCookie);",
									"        console.log(\"CSRF token from 'xsrf-token' cookie after login: \" + csrfCookie);",
									"    } else {",
									"        console.warn(\"'xsrf-token' cookie not found after login. Ensure an initial request (like Get Authorize) was made or CsrfMiddleware is setting it.\");",
									"    }",
									"",
									"} catch (e) {",
									"    console.error(\"Error parsing login response or running tests: \", e);",
									"}",
									"",
									"pm.environment.unset(\"accessToken\");",
									"pm.environment.unset(\"refreshToken\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-CSRF-Token",
								"value": "{{csrfToken}}",
								"type": "text"
							},
							{
								"key": "User-Agent",
								"value": "PostmanRuntime/7.37.0",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{email}}\",\n    \"password\": \"{{defaultPwd}}\",\n    \"deviceName\": \"Postman Login Test\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{localUrl}}/auth/login",
							"host": [
								"{{localUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						},
						"description": "#### üìÑ M·ª•c ƒë√≠ch\\n\\nX√°c th·ª±c email + password.\\n- N·∫øu th√†nh c√¥ng v√† kh√¥ng y√™u c·∫ßu 2FA: Tr·∫£ v·ªÅ th√¥ng tin ng∆∞·ªùi d√πng (profile) trong body, ƒë·ªìng th·ªùi thi·∫øt l·∫≠p `access_token` v√† `refresh_token` v√†o HttpOnly Cookies.\\n- N·∫øu 2FA ƒë∆∞·ª£c y√™u c·∫ßu: Tr·∫£ v·ªÅ `loginSessionToken` v√† `twoFactorMethod` trong body (ƒë·ªÉ s·ª≠ d·ª•ng cho b∆∞·ªõc x√°c th·ª±c 2FA).\\n\\n#### üç™ Cookies ƒê∆∞·ª£c Thi·∫øt L·∫≠p (Khi ƒëƒÉng nh·∫≠p th√†nh c√¥ng kh√¥ng c·∫ßn 2FA, ho·∫∑c sau khi x√°c th·ª±c 2FA th√†nh c√¥ng)\\n- `access_token`: HttpOnly, Path=/, SameSite=Lax\\n- `refresh_token`: HttpOnly, Path=/api/v1/auth, SameSite=Lax\\n- `xsrf-token`: Path=/, SameSite=Lax (CSRF token cho c√°c request ti·∫øp theo, ƒë∆∞·ª£c thi·∫øt l·∫≠p b·ªüi `CsrfMiddleware`)\\n\\n#### üîë Headers\\n- `Content-Type: application/json`\\n- `User-Agent`: (B·∫Øt bu·ªôc, v√≠ d·ª•: `PostmanRuntime/7.x.x`)\\n- `X-CSRF-Token: {{csrfToken}}` (L·∫•y t·ª´ cookie `xsrf-token` sau request `GET /authorize` ho·∫∑c c√°c request th√†nh c√¥ng kh√°c ƒë√£ thi·∫øt l·∫≠p cookie n√†y)\\n\\n#### üì• Body Parameters\\n\\n| Field       | Lo·∫°i   | M√¥ t·∫£                      | V√≠ d·ª•                  |\\n| ----------- | ------ | -------------------------- | ---------------------- |\\n| email       | string | Email ng∆∞·ªùi d√πng           | `{{email}}`            |\\n| password    | string | M·∫≠t kh·∫©u                   | `{{defaultPwd}}`       |\\n| deviceName  | string | T√™n thi·∫øt b·ªã (ƒë·ªÉ qu·∫£n l√Ω) | `Postman Login Test`   |\\n\\n#### üì§ V√≠ d·ª• Request Body\\n```json\\n{\\n  \\"email\\": \\\"{{email}}\\\",\\n  \\"password\\": \\\"{{defaultPwd}}\\\",\\n  \\"deviceName\\\": \\\"Postman Login Test\\"\\n}\\n```\\n\\n#### ‚úÖ Response Codes & Bodies\\n\\n* **200 OK / 201 Created (ƒêƒÉng nh·∫≠p th√†nh c√¥ng, kh√¥ng y√™u c·∫ßu 2FA):**\\n  ```json\\n  {\\n    \\"userId\\": 123,\\n    \\"email\\": \\\"user@example.com\\\",\\n    \\"name\\": \\\"T√™n Ng∆∞·ªùi D√πng\\\",\\n    \\"role\\": \\\"USER\\"\\n  }\\n  ```\\n* **200 OK / 201 Created (Y√™u c·∫ßu 2FA):**\\n  ```json\\n  {\\n    \\"message\\": \\\"Two-factor authentication required.\\\",\\n    \\"otpToken\\": \\\"a_very_long_session_token_string\\\", \\n    \\"twoFactorMethod\\": \\\"TOTP\\"\\n  }\\n  ```\\n  *(L∆∞u √Ω: `otpToken` trong response s·∫Ω ƒë∆∞·ª£c d√πng l√†m `loginSessionToken` cho b∆∞·ªõc ti·∫øp theo).*\\n* **400 Bad Request:** D·ªØ li·ªáu ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá.\\n* **401 Unauthorized:** Sai th√¥ng tin ƒëƒÉng nh·∫≠p ho·∫∑c t√†i kho·∫£n c√≥ v·∫•n ƒë·ªÅ.\\n\\n#### üß™ Postman Tests\\n- Ki·ªÉm tra status code (200 ho·∫∑c 201).\\n- N·∫øu `otpToken` (ƒë∆∞·ª£c hi·ªÉu l√† `loginSessionToken`) c√≥ trong response, l∆∞u v√†o bi·∫øn `loginSessionToken` v√† `twoFactorMethod`.\\n- N·∫øu `userId` c√≥ trong response, l∆∞u `userId`, `role` v√†o bi·∫øn m√¥i tr∆∞·ªùng. X√≥a `loginSessionToken` c≈©.\\n- C·ªë g·∫Øng l·∫•y `xsrf-token` t·ª´ cookie v√† l∆∞u v√†o bi·∫øn `csrfToken`.\\n- X√≥a c√°c bi·∫øn `accessToken` v√† `refreshToken` c≈© t·ª´ environment (v√¨ ch√∫ng gi·ªù ƒë∆∞·ª£c x·ª≠ l√Ω qua cookie)."
					},
					"response": []
				},
				{
					"name": "Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									"",
									"try {",
									"    const responseBody = pm.response.json();",
									"    console.log(\"Refresh Token Response:\", responseBody);",
									"",
									"    if (responseBody.accessToken && responseBody.refreshToken) {",
									"        console.log(\"New tokens received in body (though primary mechanism is cookie).\");",
									"    } else if (responseBody.userId && responseBody.role) {",
									"        console.log(\"User context (userId, role) received from refresh token response as per DTO.\");",
									"    }",
									"",
									"    const csrfCookie = pm.cookies.jar().get(pm.environment.get(\"localUrl\"), 'xsrf-token');",
									"    if (csrfCookie) {",
									"        pm.environment.set(\"csrfToken\", csrfCookie);",
									"        console.log(\"CSRF token from 'xsrf-token' cookie after refresh: \" + csrfCookie);",
									"    } else {",
									"        console.warn(\"'xsrf-token' cookie not found after refresh token.\");",
									"    }",
									"} catch (e) {",
									"    console.error(\"Error parsing Refresh Token response or running tests: \", e);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-CSRF-Token",
								"value": "{{csrfToken}}",
								"type": "text"
							},
							{
								"key": "User-Agent",
								"value": "PostmanRuntime/7.37.0",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"refreshToken\": \"{{refreshTokenFromCookie}}\",\n    \"deviceName\": \"Postman Refresh Test\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{localUrl}}/auth/refresh-token",
							"host": [
								"{{localUrl}}"
							],
							"path": [
								"auth",
								"refresh-token"
							]
						},
						"description": "#### üìÑ M·ª•c ƒë√≠ch\\n\\nL·∫•y l·∫°i `access_token` m·ªõi khi token c≈© h·∫øt h·∫°n. `refresh_token` ƒë∆∞·ª£c g·ª≠i qua HttpOnly cookie, nh∆∞ng API c≈©ng c√≥ th·ªÉ ch·∫•p nh·∫≠n n√≥ trong body ƒë·ªÉ t∆∞∆°ng th√≠ch ho·∫∑c cho c√°c client kh√¥ng c√≥ cookie.\\n\\n**L∆∞u √Ω:** `refreshToken` trong body l√† t√πy ch·ªçn n·∫øu cookie `refresh_token` ƒë√£ ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông b·ªüi Postman (c·∫ßn ƒë·∫£m b·∫£o Postman ƒëang qu·∫£n l√Ω v√† g·ª≠i cookie ƒë√∫ng c√°ch). N·∫øu server ch·ªâ ƒë·ªçc t·ª´ cookie, body c√≥ th·ªÉ ch·ªâ c·∫ßn `deviceName`. Logic backend hi·ªán t·∫°i ∆∞u ti√™n ƒë·ªçc `refreshToken` t·ª´ cookie.\\n\\n#### üç™ Cookies ƒê∆∞·ª£c G·ª≠i (B·ªüi Postman n·∫øu c√≥)\\n- `refresh_token` (HttpOnly, Path=/api/v1/auth, SameSite=Lax) - **Quan tr·ªçng**\\n- `access_token` (HttpOnly, Path=/, SameSite=Lax) - (Th∆∞·ªùng kh√¥ng c·∫ßn thi·∫øt cho endpoint n√†y, nh∆∞ng Postman c√≥ th·ªÉ g·ª≠i)\\n\\n#### üç™ Cookies ƒê∆∞·ª£c Thi·∫øt L·∫≠p (M·ªõi)\\n- `access_token` (M·ªõi)\\n- `refresh_token` (M·ªõi, n·∫øu server xoay v√≤ng refresh token)\\n- `xsrf-token` (n·∫øu ƒë∆∞·ª£c l√†m m·ªõi)\\n\\n#### üîë Headers\\n\\n* `Content-Type: application/json`\\n* `User-Agent`: (B·∫Øt bu·ªôc)\\n* `X-CSRF-Token: {{csrfToken}}` (L·∫•y t·ª´ cookie `xsrf-token`)\\n\\n#### üì• Body Parameters\\n\\n| Field        | Lo·∫°i   | M√¥ t·∫£                                  | V√≠ d·ª•                     |\\n| ------------ | ------ | -------------------------------------- | ------------------------- |\\n| refreshToken | string | (T√πy ch·ªçn n·∫øu g·ª≠i qua cookie) Refresh token | `{{refreshTokenFromCookie}}` (Bi·∫øn n√†y c·∫ßn ƒë∆∞·ª£c set th·ªß c√¥ng ho·∫∑c t·ª´ ngu·ªìn kh√°c n·∫øu kh√¥ng d√πng cookie t·ª± ƒë·ªông) |\\n| deviceName   | string | T√™n thi·∫øt b·ªã                           | `Postman Refresh Test`    |\\n\\n#### üì§ V√≠ d·ª• Request Body (N·∫øu server ƒë·ªçc refreshToken t·ª´ cookie, ch·ªâ c·∫ßn deviceName)\\n```json\\n{\\n  \\"deviceName\\": \\\"Postman Refresh Test\\"\\n}\\n```\\nHo·∫∑c (N·∫øu mu·ªën g·ª≠i refreshToken trong body):\\n```json\\n{\\n  \\"refreshToken\\": \\\"your_actual_refresh_token_value_if_not_from_cookie\\\",\\n  \\"deviceName\\": \\\"Postman Refresh Test\\"\\n}\\n```\\n\\n#### ‚úÖ Response Codes & Body\\n* `200 OK / 201 Created` ‚Äì Token l√†m m·ªõi th√†nh c√¥ng. Server s·∫Ω set cookie m·ªõi. Body response ch·ª©a `accessToken` v√† `refreshToken` (theo logic service) ho·∫∑c `userId` v√† `role` (theo `RefreshTokenResDTO`).\\n  *(V√≠ d·ª• theo service `auth.service.ts`)*\\n  ```json\\n  {\\n    \\"accessToken\\": \\\"new_jwt_access_token_string...\\\",\\n    \\"refreshToken\\": \\\"new_jwt_refresh_token_string...\\\"\\n  }\\n  ```\\n* `401 Unauthorized` ‚Äì `refresh_token` kh√¥ng h·ª£p l·ªá, h·∫øt h·∫°n, ho·∫∑c CSRF token sai.\\n\\n#### üß™ Postman Tests\\n- Ki·ªÉm tra status code 200 ho·∫∑c 201.\\n- Log response body.\\n- Ki·ªÉm tra v√† c·∫≠p nh·∫≠t `csrfToken` t·ª´ cookie `xsrf-token`."
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
									"});",
									"",
									"console.log(\"Logout successful. Server should have cleared HttpOnly cookies (access_token, refresh_token) and xsrf-token cookie.\");",
									"",
									"pm.environment.unset(\"userId\");",
									"pm.environment.unset(\"userRole\");",
									"pm.environment.unset(\"loginSessionToken\");",
									"pm.environment.unset(\"accessToken\");",
									"pm.environment.unset(\"refreshToken\");",
									"pm.environment.set(\"csrfToken\", \"\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "X-CSRF-Token",
								"value": "{{csrfToken}}",
								"type": "text"
							},
							{
								"key": "User-Agent",
								"value": "PostmanRuntime/7.37.0",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"refreshToken\": \"{{refreshTokenFromCookie}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{localUrl}}/auth/logout",
							"host": [
								"{{localUrl}}"
							],
							"path": [
								"auth",
								"logout"
							]
						},
						"description": "#### üìÑ M·ª•c ƒë√≠ch\\n\\nH·ªßy phi√™n ƒëƒÉng nh·∫≠p, server s·∫Ω x√≥a `refresh_token` v√† c√°c cookie li√™n quan (`access_token`, `refresh_token`, `xsrf-token`).\\n**L∆∞u √Ω:** `refreshToken` trong body l√† t√πy ch·ªçn n·∫øu cookie `refresh_token` ƒë√£ ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông. Logic backend hi·ªán t·∫°i ∆∞u ti√™n ƒë·ªçc `refreshToken` t·ª´ cookie.\\n\\n#### üç™ Cookies ƒê∆∞·ª£c G·ª≠i (B·ªüi Postman n·∫øu c√≥)\\n- `refresh_token`\\n- `access_token`\\n\\n#### üîë Headers\\n\\n* `Content-Type: application/json`\\n* `User-Agent`: (B·∫Øt bu·ªôc)\\n* `X-CSRF-Token: {{csrfToken}}` (L·∫•y t·ª´ cookie `xsrf-token`)\\n\\n#### üì• Body Parameters\\n\\n| Field        | Lo·∫°i   | M√¥ t·∫£                                     | V√≠ d·ª•                     |\\n| ------------ | ------ | ----------------------------------------- | ------------------------- |\\n| refreshToken | string | (T√πy ch·ªçn n·∫øu g·ª≠i qua cookie) Refresh token | `{{refreshTokenFromCookie}}`|\\n\\n#### üì§ V√≠ d·ª• Request Body (N·∫øu server ƒë·ªçc refreshToken t·ª´ cookie, body c√≥ th·ªÉ r·ªóng ho·∫∑c kh√¥ng c·∫ßn g·ª≠i)\\n```json\\n{}\\n```\\nHo·∫∑c (N·∫øu mu·ªën g·ª≠i refreshToken trong body):\\n```json\\n{\\n  \\"refreshToken\\": \\\"your_actual_refresh_token_value_if_not_from_cookie\\"\\n}\\n```\\n\\n#### ‚úÖ Response Codes\\n\\n* `200 OK / 204 No Content` ‚Äì ƒêƒÉng xu·∫•t th√†nh c√¥ng.\\n  ```json\\n  {\\n    \\"message\\": \\\"Logged out successfully\\"\\n  }\\n  ```\\n* `401 Unauthorized` ‚Äì CSRF token kh√¥ng h·ª£p l·ªá.\\n\\n#### üß™ Postman Tests\\n- Ki·ªÉm tra status code 200 ho·∫∑c 204.\\n- X√≥a c√°c bi·∫øn m√¥i tr∆∞·ªùng li√™n quan ƒë·∫øn session ng∆∞·ªùi d√πng."
					},
					"response": []
				},
				{
					"name": "Reset Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"try {",
									"    const responseBody = pm.response.json();",
									"    console.log(\"Reset Password Response:\", responseBody);",
									"    pm.test(\"Password reset successful message received\", function () {",
									"        pm.expect(responseBody.message).to.include(\"Password reset successfully\");",
									"    });",
									"",
									"    const csrfCookie = pm.cookies.jar().get(pm.environment.get(\"localUrl\"), 'xsrf-token');",
									"    if (csrfCookie) {",
									"        pm.environment.set(\"csrfToken\", csrfCookie);",
									"        console.log(\"CSRF token from 'xsrf-token' cookie after reset-password: \" + csrfCookie);",
									"    }",
									"} catch (e) {",
									"    console.error(\"Error parsing Reset Password response: \", e);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-CSRF-Token",
								"value": "{{csrfToken}}",
								"type": "text"
							},
							{
								"key": "User-Agent",
								"value": "PostmanRuntime/7.37.0",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{email}}\",\n    \"otpToken\": \"{{otpToken}}\", \n    \"newPassword\": \"{{newPassword}}\",\n    \"confirmNewPassword\": \"{{newPassword}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{localUrl}}/auth/reset-password",
							"host": [
								"{{localUrl}}"
							],
							"path": [
								"auth",
								"reset-password"
							]
						},
						"description": "#### üìÑ M·ª•c ƒë√≠ch\\n\\nƒê·∫∑t l·∫°i m·∫≠t kh·∫©u m·ªõi cho t√†i kho·∫£n sau khi ƒë√£ verify OTP (th√¥ng qua `verify-code` v·ªõi type `FORGOT_PASSWORD` ƒë·ªÉ l·∫•y `otpToken`).\\n\\n#### üîë Headers\\n\\n* `Content-Type: application/json`\\n* `User-Agent`: V√≠ d·ª•: `PostmanRuntime/7.x.x`\\n* `X-CSRF-Token: {{csrfToken}}` (L·∫•y t·ª´ cookie `xsrf-token`)\\n\\n#### üì• Body Parameters\\n\\n| Field              | Lo·∫°i   | M√¥ t·∫£                                                | V√≠ d·ª• |\\n| ------------------ | ------ | ---------------------------------------------------- | ----- |\\n| email              | string | Email ng∆∞·ªùi d√πng                                     | `{{email}}` |\\n| otpToken           | string | Token OTP t·ª´ `/auth/verify-code` (type FORGOT_PASSWORD) | `{{otpToken}}` |\\n| newPassword        | string | M·∫≠t kh·∫©u m·ªõi                                         | `{{newPassword}}` (bi·∫øn t·ª± ƒë·ªãnh nghƒ©a) |\\n| confirmNewPassword | string | Nh·∫≠p l·∫°i m·∫≠t kh·∫©u m·ªõi                                | `{{newPassword}}` |\\n\\n#### üì§ V√≠ d·ª• Request Body\\n\\n```json\\n{\\n  \\"email\\": \\\"{{email}}\\\",\\n  \\"otpToken\\\": \\\"{{otpToken}}\\\",\\n  \\"newPassword\\\": \\\"NewP@ss123\\\",\\n  \\"confirmNewPassword\\\": \\\"NewP@ss123\\"\\n}\\n```\\n\\n#### ‚úÖ Response Codes\\n\\n* `200 OK` ‚Äì ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng.\\n  ```json\\n  {\\n    \\"message\\": \\\"Password reset successfully\\"\\n  }\\n  ```\\n* `400 Bad Request` ‚Äì M·∫≠t kh·∫©u kh√¥ng h·ª£p l·ªá, kh√¥ng kh·ªõp, ho·∫∑c `otpToken` sai/h·∫øt h·∫°n.\\n\\n#### üç™ Cookies ƒê∆∞·ª£c Thi·∫øt L·∫≠p\\n- `xsrf-token` (n·∫øu ch∆∞a c√≥ ho·∫∑c ƒë∆∞·ª£c l√†m m·ªõi)\\n\\n#### üß™ Postman Tests\\n- Ki·ªÉm tra status code 200.\\n- X√°c minh message th√†nh c√¥ng.\\n- C·∫≠p nh·∫≠t `csrfToken` t·ª´ cookie `xsrf-token`."
					},
					"response": []
				},
				{
					"name": "Setup 2FA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"try {",
									"    const responseBody = pm.response.json();",
									"    console.log(\"Setup 2FA Response:\", responseBody);",
									"    if (responseBody.setupToken && responseBody.otpauthUrl) {",
									"        pm.environment.set(\"setupToken\", responseBody.setupToken);",
									"        pm.environment.set(\"otpAuthUrl\", responseBody.otpauthUrl);",
									"        console.log(\"Set setupToken: \" + responseBody.setupToken);",
									"        console.log(\"OTP Auth URL (for QR code): \" + responseBody.otpauthUrl);",
									"        pm.test(\"Setup 2FA initiated, token and URL received\", function () {",
									"            pm.expect(responseBody.setupToken).to.be.a('string');",
									"            pm.expect(responseBody.otpauthUrl).to.be.a('string');",
									"        });",
									"    } else {",
									"       console.warn(\"Setup 2FA response missing setupToken or otpauthUrl.\");",
									"    }",
									"",
									"    const csrfCookie = pm.cookies.jar().get(pm.environment.get(\"localUrl\"), 'xsrf-token');",
									"    if (csrfCookie) {",
									"        pm.environment.set(\"csrfToken\", csrfCookie);",
									"        console.log(\"CSRF token from 'xsrf-token' cookie after 2fa/setup: \" + csrfCookie);",
									"    }",
									"} catch (e) {",
									"    console.error(\"Error parsing Setup 2FA response: \", e);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "X-CSRF-Token",
								"value": "{{csrfToken}}",
								"type": "text"
							},
							{
								"key": "User-Agent",
								"value": "PostmanRuntime/7.37.0",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{localUrl}}/auth/2fa/setup",
							"host": [
								"{{localUrl}}"
							],
							"path": [
								"auth",
								"2fa",
								"setup"
							]
						},
						"description": "#### üìÑ M·ª•c ƒë√≠ch\\n\\nKh·ªüi t·∫°o qu√° tr√¨nh c√†i ƒë·∫∑t 2FA (Two-Factor Authentication) cho ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p. Tr·∫£ v·ªÅ m·ªôt `setupToken` v√† `otpauthUrl` (d√πng ƒë·ªÉ hi·ªÉn th·ªã m√£ QR cho c√°c ·ª©ng d·ª•ng x√°c th·ª±c nh∆∞ Google Authenticator).\\n\\n**Y√™u c·∫ßu x√°c th·ª±c:** C√≥ (c·∫ßn `access_token` trong cookie).\\n\\n#### üç™ Cookies ƒê∆∞·ª£c G·ª≠i (B·ªüi Postman n·∫øu c√≥)\\n- `access_token` (HttpOnly) - **Quan tr·ªçng**\\n\\n#### üîë Headers\\n\\n* `User-Agent`: V√≠ d·ª•: `PostmanRuntime/7.x.x`\\n* `X-CSRF-Token: {{csrfToken}}` (L·∫•y t·ª´ cookie `xsrf-token`)\\n\\n#### ‚ùì Body\\n\\n* (Kh√¥ng c·∫ßn body)\\n\\n#### üì§ V√≠ d·ª• Request\\n\\n```\\nPOST {{localUrl}}/auth/2fa/setup\\nUser-Agent: PostmanRuntime/7.37.0\\nX-CSRF-Token: {{csrfToken}}\\n```\\n(Postman s·∫Ω t·ª± ƒë·ªông g·ª≠i cookie `access_token` n·∫øu ƒë√£ ƒëƒÉng nh·∫≠p tr∆∞·ªõc ƒë√≥)\\n\\n#### ‚úÖ Response Codes\\n\\n* `200 OK` ‚Äì Tr·∫£ v·ªÅ `otpauthUrl`, `setupToken`.\\n  ```json\\n  {\\n    \\"otpauthUrl\\": \\\"otpauth://totp/Shopsifu:user@example.com?secret=YOURSECRETKEY&issuer=Shopsifu\\\",\\n    \\"setupToken\\\": \\\"a_long_uuid_string_for_confirming_setup\\"\\n  }\\n  ```\\n* `401 Unauthorized` ‚Äì Ch∆∞a ƒëƒÉng nh·∫≠p (thi·∫øu cookie `access_token`) ho·∫∑c `csrfToken` kh√¥ng h·ª£p l·ªá.\\n* `409 Conflict` ‚Äì 2FA ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t cho ng∆∞·ªùi d√πng n√†y.\\n\\n#### üç™ Cookies ƒê∆∞·ª£c Thi·∫øt L·∫≠p\\n- `xsrf-token` (n·∫øu ch∆∞a c√≥ ho·∫∑c ƒë∆∞·ª£c l√†m m·ªõi)\\n\\n#### üß™ Postman Tests\\n- Ki·ªÉm tra status code 200.\\n- Tr√≠ch xu·∫•t `setupToken` v√† `otpAuthUrl` v√†o bi·∫øn m√¥i tr∆∞·ªùng.\\n- C·∫≠p nh·∫≠t `csrfToken` t·ª´ cookie `xsrf-token`."
					},
					"response": []
				},
				{
					"name": "Confirm 2FA Setup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"try {",
									"    const responseBody = pm.response.json();",
									"    console.log(\"Confirm 2FA Setup Response:\", responseBody);",
									"    pm.test(\"2FA setup confirmed successfully\", function () {",
									"        pm.expect(responseBody.message).to.include(\"Two-factor authentication enabled successfully.\");",
									"    });",
									"    if(responseBody.recoveryCodes && Array.isArray(responseBody.recoveryCodes)) {",
									"        console.log(\"Recovery Codes: \", responseBody.recoveryCodes);",
									"    }",
									"    pm.environment.unset(\"setupToken\");",
									"    pm.environment.unset(\"otpAuthUrl\");",
									"",
									"    const csrfCookie = pm.cookies.jar().get(pm.environment.get(\"localUrl\"), 'xsrf-token');",
									"    if (csrfCookie) {",
									"        pm.environment.set(\"csrfToken\", csrfCookie);",
									"        console.log(\"CSRF token from 'xsrf-token' cookie after 2fa/confirm-setup: \" + csrfCookie);",
									"    }",
									"} catch (e) {",
									"    console.error(\"Error parsing Confirm 2FA Setup response: \", e);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-CSRF-Token",
								"value": "{{csrfToken}}",
								"type": "text"
							},
							{
								"key": "User-Agent",
								"value": "PostmanRuntime/7.37.0",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"setupToken\": \"{{setupToken}}\", \n  \"totpCode\": \"{{2faOtpFromAuthenticator}}\" \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{localUrl}}/auth/2fa/confirm-setup",
							"host": [
								"{{localUrl}}"
							],
							"path": [
								"auth",
								"2fa",
								"confirm-setup"
							]
						},
						"description": "#### üìÑ M·ª•c ƒë√≠ch\\n\\nX√°c nh·∫≠n c√†i ƒë·∫∑t 2FA b·∫±ng c√°ch g·ª≠i `setupToken` (nh·∫≠n t·ª´ `/auth/2fa/setup`) v√† `totpCode` (m√£ 6 s·ªë t·ª´ ·ª©ng d·ª•ng x√°c th·ª±c).\\nN·∫øu th√†nh c√¥ng, 2FA s·∫Ω ƒë∆∞·ª£c k√≠ch ho·∫°t v√† tr·∫£ v·ªÅ m·ªôt danh s√°ch c√°c m√£ kh√¥i ph·ª•c (recovery codes).\\n\\n**Y√™u c·∫ßu x√°c th·ª±c:** C√≥ (c·∫ßn `access_token` trong cookie).\\n\\n#### üç™ Cookies ƒê∆∞·ª£c G·ª≠i (B·ªüi Postman n·∫øu c√≥)\\n- `access_token` (HttpOnly) - **Quan tr·ªçng**\\n\\n#### üîë Headers\\n\\n* `Content-Type: application/json`\\n* `User-Agent`: V√≠ d·ª•: `PostmanRuntime/7.x.x`\\n* `X-CSRF-Token: {{csrfToken}}` (L·∫•y t·ª´ cookie `xsrf-token`)\\n\\n#### üì• Body Parameters\\n\\n| Field       | Lo·∫°i   | M√¥ t·∫£                                       | V√≠ d·ª• |\\n| ----------- | ------ | ------------------------------------------- | ----- |\\n| setupToken  | string | Token nh·∫≠n t·ª´ `/auth/2fa/setup`             | `{{setupToken}}` |\\n| totpCode    | string | M√£ 6 s·ªë t·ª´ ·ª©ng d·ª•ng Authenticator          | `{{2faOtpFromAuthenticator}}` (bi·∫øn ƒë·ªÉ t·ª± nh·∫≠p) |\\n\\n#### üì§ V√≠ d·ª• Request Body\\n\\n```json\\n{\\n  \\"setupToken\\": \\\"{{setupToken}}\\\",\\n  \\"totpCode\\": \\\"123456\\"\\n}\\n```\\n\\n#### ‚úÖ Response Codes\\n\\n* `200 OK` ‚Äì 2FA ƒë∆∞·ª£c k√≠ch ho·∫°t th√†nh c√¥ng. Tr·∫£ v·ªÅ message v√† `recoveryCodes`.\\n  ```json\\n  {\\n    \\"message\\": \\\"Two-factor authentication enabled successfully.\\\",\\n    \\"recoveryCodes\\": [\\\"ABCDE-FGHIJ\\\", \\\"KLMNO-PQRST\\\", ...]\\n  }\\n  ```\\n* `400 Bad Request` ‚Äì `setupToken` kh√¥ng h·ª£p l·ªá, `totpCode` sai ho·∫∑c ƒë√£ h·∫øt h·∫°n.\\n* `401 Unauthorized` ‚Äì Ch∆∞a ƒëƒÉng nh·∫≠p ho·∫∑c `csrfToken` kh√¥ng h·ª£p l·ªá.\\n\\n#### üç™ Cookies ƒê∆∞·ª£c Thi·∫øt L·∫≠p\\n- `xsrf-token` (n·∫øu ch∆∞a c√≥ ho·∫∑c ƒë∆∞·ª£c l√†m m·ªõi)\\n\\n#### üß™ Postman Tests\\n- Ki·ªÉm tra status code 200.\\n- X√°c minh message th√†nh c√¥ng v√† s·ª± t·ªìn t·∫°i c·ªßa `recoveryCodes`.\\n- X√≥a `setupToken` v√† `otpAuthUrl` kh·ªèi bi·∫øn m√¥i tr∆∞·ªùng.\\n- C·∫≠p nh·∫≠t `csrfToken` t·ª´ cookie `xsrf-token`."
					},
					"response": []
				},
				{
					"name": "Disable 2FA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"try {",
									"    const responseBody = pm.response.json();",
									"    console.log(\"Disable 2FA Response:\", responseBody);",
									"    pm.test(\"2FA disabled successfully\", function () {",
									"        pm.expect(responseBody.message).to.include(\"Two-factor authentication disabled successfully.\");",
									"    });",
									"",
									"    const csrfCookie = pm.cookies.jar().get(pm.environment.get(\"localUrl\"), 'xsrf-token');",
									"    if (csrfCookie) {",
									"        pm.environment.set(\"csrfToken\", csrfCookie);",
									"        console.log(\"CSRF token from 'xsrf-token' cookie after 2fa/disable: \" + csrfCookie);",
									"    }",
									"} catch (e) {",
									"    console.error(\"Error parsing Disable 2FA response: \", e);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-CSRF-Token",
								"value": "{{csrfToken}}",
								"type": "text"
							},
							{
								"key": "User-Agent",
								"value": "PostmanRuntime/7.37.0",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"password\": \"{{defaultPwd}}\" \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{localUrl}}/auth/2fa/disable",
							"host": [
								"{{localUrl}}"
							],
							"path": [
								"auth",
								"2fa",
								"disable"
							]
						},
						"description": "#### üìÑ M·ª•c ƒë√≠ch\\n\\nV√¥ hi·ªáu h√≥a 2FA cho t√†i kho·∫£n ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p. Y√™u c·∫ßu m·∫≠t kh·∫©u hi·ªán t·∫°i ƒë·ªÉ x√°c nh·∫≠n.\\nL∆∞u √Ω: `DisableTwoFactorBodySchema` c√≥ `type` v√† `code` nh∆∞ng service `disableTwoFactorAuth` hi·ªán t·∫°i ch·ªâ y√™u c·∫ßu `password`. Ph·∫ßn n√†y c·∫ßn ƒë∆∞·ª£c ƒë·ªìng b·ªô gi·ªØa DTO/Schema v√† Service.\\nHi·ªán t·∫°i, request n√†y s·∫Ω ch·ªâ g·ª≠i `password` theo logic c·ªßa service.\\n\\n**Y√™u c·∫ßu x√°c th·ª±c:** C√≥ (c·∫ßn `access_token` trong cookie).\\n\\n#### üç™ Cookies ƒê∆∞·ª£c G·ª≠i (B·ªüi Postman n·∫øu c√≥)\\n- `access_token` (HttpOnly) - **Quan tr·ªçng**\\n\\n#### üîë Headers\\n\\n* `Content-Type: application/json`\\n* `User-Agent`: V√≠ d·ª•: `PostmanRuntime/7.x.x`\\n* `X-CSRF-Token: {{csrfToken}}` (L·∫•y t·ª´ cookie `xsrf-token`)\\n\\n#### üì• Body Parameters\\n\\n| Field    | Lo·∫°i   | M√¥ t·∫£                   | V√≠ d·ª• |\\n| -------- | ------ | ----------------------- | ----- |\\n| password | string | M·∫≠t kh·∫©u hi·ªán t·∫°i c·ªßa ng∆∞·ªùi d√πng | `{{defaultPwd}}` |\\n\\n#### üì§ V√≠ d·ª• Request Body\\n\\n```json\\n{\\n  \\"password\\": \\\"{{defaultPwd}}\\\"\\n}\\n```\\n\\n#### ‚úÖ Response Codes\\n\\n* `200 OK` ‚Äì T·∫Øt 2FA th√†nh c√¥ng.\\n  ```json\\n  {\\n    \\"message\\": \\\"Two-factor authentication disabled successfully.\\\"\\n  }\\n  ```\\n* `400 Bad Request` ‚Äì M·∫≠t kh·∫©u sai.\\n* `401 Unauthorized` ‚Äì Ch∆∞a ƒëƒÉng nh·∫≠p ho·∫∑c `csrfToken` kh√¥ng h·ª£p l·ªá.\\n\\n#### üç™ Cookies ƒê∆∞·ª£c Thi·∫øt L·∫≠p\\n- `xsrf-token` (n·∫øu ch∆∞a c√≥ ho·∫∑c ƒë∆∞·ª£c l√†m m·ªõi)\\n\\n#### üß™ Postman Tests\\n- Ki·ªÉm tra status code 200.\\n- X√°c minh message th√†nh c√¥ng.\\n- C·∫≠p nh·∫≠t `csrfToken` t·ª´ cookie `xsrf-token`."
					},
					"response": []
				},
				{
					"name": "Verify 2FA (Login)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									"",
									"try {",
									"    const responseBody = pm.response.json();",
									"    console.log(\"Verify 2FA (Login) Response:\", responseBody);",
									"    if (responseBody.userId) {",
									"        pm.environment.set(\"userId\", responseBody.userId);",
									"        if (responseBody.role) {",
									"            pm.environment.set(\"userRole\", responseBody.role);",
									"        }",
									"        console.log(\"2FA Verified, Login successful. UserID: \" + responseBody.userId);",
									"        pm.test(\"2FA verified, user profile received\", function () {",
									"            pm.expect(responseBody.userId).to.be.a('number');",
									"            pm.expect(responseBody.email).to.be.a('string');",
									"        });",
									"    } else {",
									"        console.warn(\"Verify 2FA (Login) response did not contain user profile.\");",
									"    }",
									"",
									"    const csrfCookie = pm.cookies.jar().get(pm.environment.get(\"localUrl\"), 'xsrf-token');",
									"    if (csrfCookie) {",
									"        pm.environment.set(\"csrfToken\", csrfCookie);",
									"        console.log(\"CSRF token from 'xsrf-token' cookie after 2fa/verify: \" + csrfCookie);",
									"    }",
									"} catch (e) {",
									"    console.error(\"Error parsing Verify 2FA (Login) response or running tests: \", e);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-CSRF-Token",
								"value": "{{csrfToken}}",
								"type": "text"
							},
							{
								"key": "User-Agent",
								"value": "PostmanRuntime/7.37.0",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"loginSessionToken\": \"{{loginSessionToken}}\", \n  \"type\": \"{{twoFactorMethod}}\", \n  \"code\": \"{{2faOtpFromAuthenticator}}\",\n  \"deviceName\": \"Postman Verify 2FA Test\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{localUrl}}/auth/2fa/verify",
							"host": [
								"{{localUrl}}"
							],
							"path": [
								"auth",
								"2fa",
								"verify"
							]
						},
						"description": "#### üìÑ M·ª•c ƒë√≠ch\\n\\nX√°c th·ª±c m√£ 2FA (TOTP, OTP ho·∫∑c Recovery Code) sau khi API Login tr·∫£ v·ªÅ `loginSessionToken` (do 2FA ƒë∆∞·ª£c y√™u c·∫ßu). \\nN·∫øu th√†nh c√¥ng, tr·∫£ v·ªÅ profile ng∆∞·ªùi d√πng v√† thi·∫øt l·∫≠p cookie `access_token`, `refresh_token`. \\nEndpoint c≈© `/auth/2fa/verify` gi·ªØ nguy√™n.\\n\\n#### üç™ Cookies ƒê∆∞·ª£c Thi·∫øt L·∫≠p (Khi th√†nh c√¥ng)\\n- `access_token`: HttpOnly, Path=/, SameSite=Lax\\n- `refresh_token`: HttpOnly, Path=/api/v1/auth, SameSite=Lax\\n- `xsrf-token` (n·∫øu ch∆∞a c√≥ ho·∫∑c ƒë∆∞·ª£c l√†m m·ªõi)\\n\\n#### üîë Headers\\n\\n* `Content-Type: application/json`\\n* `User-Agent`: (B·∫Øt bu·ªôc)\\n* `X-CSRF-Token: {{csrfToken}}` (L·∫•y t·ª´ cookie `xsrf-token`)\\n\\n#### üì• Body Parameters\\n\\n| Field             | Lo·∫°i   | M√¥ t·∫£                                                                        | V√≠ d·ª• |\\n| ----------------- | ------ | ---------------------------------------------------------------------------- | ----- |\\n| loginSessionToken | string | Token phi√™n ƒëƒÉng nh·∫≠p t·∫°m th·ªùi (t·ª´ response c·ªßa API Login khi y√™u c·∫ßu 2FA)     | `{{loginSessionToken}}` |\\n| type              | string | Ph∆∞∆°ng th·ª©c x√°c th·ª±c: `TOTP`, `OTP`, `RECOVERY`. N√™n d√πng bi·∫øn `{{twoFactorMethod}}` t·ª´ Login response. | `{{twoFactorMethod}}` ho·∫∑c `TOTP` |\\n| code              | string | M√£ t·ª´ Authenticator app (TOTP), m√£ OTP t·ª´ email (OTP), ho·∫∑c m√£ kh√¥i ph·ª•c (RECOVERY) | `{{2faOtpFromAuthenticator}}` (bi·∫øn t·ª± nh·∫≠p) |\\n| deviceName        | string | T√™n thi·∫øt b·ªã                                                                  | `Postman Verify 2FA Test` |\\n\\n#### üì§ V√≠ d·ª• Request Body\\n\\n```json\\n{\\n  \\"loginSessionToken\\": \\\"{{loginSessionToken}}\\\",\\n  \\"type\\": \\\"TOTP\\\", \\n  \\"code\\": \\\"123456\\\",\\n  \\"deviceName\\": \\\"Postman Verify 2FA Test\\"\\n}\\n```\\n\\n#### ‚úÖ Response Codes & Body\\n\\n* `200 OK / 201 Created` ‚Äì X√°c th·ª±c 2FA th√†nh c√¥ng, ƒëƒÉng nh·∫≠p ho√†n t·∫•t.\\n  ```json\\n  {\\n    \\"userId\\": 123,\\n    \\"email\\": \\\"user@example.com\\\",\\n    \\"name\\": \\\"T√™n Ng∆∞·ªùi D√πng\\\",\\n    \\"role\\": \\\"USER\\"\\n  }\\n  ```\\n* `400 Bad Request` ‚Äì Code sai/h·∫øt h·∫°n, `loginSessionToken` kh√¥ng h·ª£p l·ªá, ho·∫∑c `type` kh√¥ng ƒë√∫ng.\\n* `401 Unauthorized` ‚Äì `csrfToken` kh√¥ng h·ª£p l·ªá.\\n\\n#### üß™ Postman Tests\\n- Ki·ªÉm tra status code 200 ho·∫∑c 201.\\n- Tr√≠ch xu·∫•t th√¥ng tin user (`userId`, `role`) v√†o bi·∫øn m√¥i tr∆∞·ªùng.\\n- C·∫≠p nh·∫≠t `csrfToken` t·ª´ cookie `xsrf-token`."
					},
					"response": []
				}
			]
		},
		{
			"name": "Language Modules",
			"item": [
				{
					"name": "Create Language",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"ru\",\n\t\"name\": \"Rusia\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverUrl}}/languages",
							"host": [
								"{{serverUrl}}"
							],
							"path": [
								"languages"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Languages",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverUrl}}/languages",
							"host": [
								"{{serverUrl}}"
							],
							"path": [
								"languages"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Language",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"English\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverUrl}}/languages/en",
							"host": [
								"{{serverUrl}}"
							],
							"path": [
								"languages",
								"en"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Language",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverUrl}}/languages/vi",
							"host": [
								"{{serverUrl}}"
							],
							"path": [
								"languages",
								"vi"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Language Detail",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverUrl}}/languages/vi",
							"host": [
								"{{serverUrl}}"
							],
							"path": [
								"languages",
								"vi"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Permissions Modules",
			"item": []
		}
	],
	"auth": {
		"type": "noauth"
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"// Collection-level pre-request script (if any)"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"// Collection-level test script (if any)"
				]
			}
		}
	],
	"variable": [
		{
			"key": "localUrl",
			"value": "http://localhost:3000/api/v1"
		},
		{
			"key": "serverUrl",
			"value": "https://api.shopsifu.live/api/v1",
			"type": "string"
		},
		{
			"key": "email",
			"value": "testuser@example.com",
			"type": "string"
		},
		{
			"key": "defaultPwd",
			"value": "Password123!",
			"type": "string"
		},
		{
			"key": "defaultName",
			"value": "Test User Shopsifu",
			"type": "string"
		},
		{
			"key": "newPassword",
			"value": "NewPassword123!",
			"type": "string"
		},
		{
			"key": "loginSessionToken",
			"value": "",
			"type": "string",
			"description": "L·∫•y t·ª´ response c·ªßa Login khi 2FA ƒë∆∞·ª£c y√™u c·∫ßu."
		},
		{
			"key": "twoFactorMethod",
			"value": "TOTP",
			"type": "string",
			"description": "Ph∆∞∆°ng th·ª©c 2FA (v√≠ d·ª•: TOTP), l·∫•y t·ª´ response Login."
		},
		{
			"key": "otpToken",
			"value": "",
			"type": "string",
			"description": "L·∫•y t·ª´ response c·ªßa Verify Code, d√πng cho Register ho·∫∑c Reset Password."
		},
		{
			"key": "setupToken",
			"value": "",
			"type": "string",
			"description": "L·∫•y t·ª´ response c·ªßa Setup 2FA, d√πng cho Confirm 2FA Setup."
		},
		{
			"key": "csrfToken",
			"value": "",
			"type": "string",
			"description": "L·∫•y t·ª´ cookie 'xsrf-token' sau m·ªôt request GET th√†nh c√¥ng ho·∫∑c c√°c request kh√°c."
		},
		{
			"key": "accessToken",
			"value": "",
			"type": "string",
			"description": "(Kh√¥ng c√≤n s·ª≠ d·ª•ng tr·ª±c ti·∫øp, ƒë∆∞·ª£c qu·∫£n l√Ω qua HttpOnly cookie)"
		},
		{
			"key": "refreshToken",
			"value": "",
			"type": "string",
			"description": "(Kh√¥ng c√≤n s·ª≠ d·ª•ng tr·ª±c ti·∫øp, ƒë∆∞·ª£c qu·∫£n l√Ω qua HttpOnly cookie)"
		},
		{
			"key": "userId",
			"value": "",
			"type": "string",
			"description": "L·∫•y t·ª´ response Login ho·∫∑c Verify 2FA th√†nh c√¥ng."
		},
		{
			"key": "userRole",
			"value": "",
			"type": "string",
			"description": "L·∫•y t·ª´ response Login ho·∫∑c Verify 2FA th√†nh c√¥ng."
		},
		{
			"key": "otpCodeFromEmail",
			"value": "123456",
			"type": "string",
			"description": "Nh·∫≠p th·ªß c√¥ng OTP t·ª´ email."
		},
		{
			"key": "2faOtpFromAuthenticator",
			"value": "123456",
			"type": "string",
			"description": "Nh·∫≠p th·ªß c√¥ng OTP t·ª´ ·ª©ng d·ª•ng Authenticator."
		},
		{
			"key": "refreshTokenFromCookie",
			"value": "",
			"type": "string",
			"description": "S·ª≠ d·ª•ng n·∫øu c·∫ßn g·ª≠i refresh token trong body thay v√¨ ch·ªâ d·ª±a v√†o cookie (hi·ªán t·∫°i server ∆∞u ti√™n cookie)."
		}
	]
}