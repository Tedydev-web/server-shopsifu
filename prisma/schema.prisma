generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ACTIVE
  INACTIVE
  PENDING_VERIFICATION 
  SUSPENDED
}

enum TwoFactorMethodType {
  EMAIL
  AUTHENTICATOR_APP
}

model Language {
  id   String @id @db.VarChar(10)
  name String @db.VarChar(500)

  userTranslations     UserTranslation[]
  productTranslations  ProductTranslation[]
  categoryTranslations CategoryTranslation[]
  brandTranslations    BrandTranslation[]

  createdById Int?
  createdBy   User? @relation("LanguageCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User? @relation("LanguageUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedById Int?
  deletedBy   User?     @relation("LanguageDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([deletedAt])
}

model User {
  id                  Int                  @id @default(autoincrement())
  email               String               @unique
  password            String?              @db.VarChar(500) 
  googleId            String?              @unique
  status              UserStatus           @default(ACTIVE)
  isEmailVerified     Boolean              @default(false) 
  pendingEmail        String?              @unique @db.VarChar(255) 
  emailVerificationToken             String?   @unique @db.VarChar(255)
  emailVerificationTokenExpiresAt    DateTime?
  emailVerificationSentAt            DateTime?

  twoFactorEnabled    Boolean?             @default(false)
  twoFactorSecret     String?              @db.VarChar(1000)
  twoFactorMethod     TwoFactorMethodType? 
  twoFactorVerifiedAt DateTime?

  passwordChangedAt   DateTime?            

  roleId              Int?                 
  role                Role?                @relation(fields: [roleId], references: [id], onDelete: SetNull, onUpdate: NoAction)

  userProfile         UserProfile?

  devices             Device[]
  carts               CartItem[]           
  orders              Order[]              
  reviews             Review[]             
  RecoveryCode        RecoveryCode[]
  auditLogs           AuditLog[]           
  userTranslations    UserTranslation[]    @relation("User")
  sentMessages        Message[]            @relation("FromUser")    
  receivedMessages    Message[]            @relation("ToUser")     

  createdPermissions Permission[] @relation("PermissionCreatedBy")
  updatedPermissions Permission[] @relation("PermissionUpdatedBy")
  deletedPermissions Permission[] @relation("PermissionDeletedBy")

  createdRoles Role[] @relation("RoleCreatedBy")
  updatedRoles Role[] @relation("RoleUpdatedBy")
  deletedRoles Role[] @relation("RoleDeletedBy")

  assignedRolePermissions RolePermission[] @relation("RolePermissionAssignedBy") 

  createdProducts Product[] @relation("ProductCreatedBy")
  updatedProducts Product[] @relation("ProductUpdatedBy")
  deletedProducts Product[] @relation("ProductDeletedBy")

  createdCategories Category[] @relation("CategoryCreatedBy")
  updatedCategories Category[] @relation("CategoryUpdatedBy")
  deletedCategories Category[] @relation("CategoryDeletedBy")

  createdVariants Variant[] @relation("VariantCreatedBy")
  updatedVariants Variant[] @relation("VariantUpdatedBy")
  deletedVariants Variant[] @relation("VariantDeletedBy")

  createdVariantOptions VariantOption[] @relation("VariantOptionCreatedBy")
  updatedVariantOptions VariantOption[] @relation("VariantOptionUpdatedBy")
  deletedVariantOptions VariantOption[] @relation("VariantOptionDeletedBy")

  createdSKUS SKU[] @relation("SKUCreatedBy")
  updatedSKUS SKU[] @relation("SKUUpdatedBy")
  deletedSKUS SKU[] @relation("SKUDeletedBy")

  createdLanguages Language[] @relation("LanguageCreatedBy")
  updatedLanguages Language[] @relation("LanguageUpdatedBy")
  deletedLanguages Language[] @relation("LanguageDeletedBy")

  createdUserTranslations UserTranslation[] @relation("UserTranslationCreatedBy")
  updatedUserTranslations UserTranslation[] @relation("UserTranslationUpdatedBy")
  deletedUserTranslations UserTranslation[] @relation("UserTranslationDeletedBy")

  createdProductTranslations ProductTranslation[] @relation("ProductTranslationCreatedBy")
  updatedProductTranslations ProductTranslation[] @relation("ProductTranslationUpdatedBy")
  deletedProductTranslations ProductTranslation[] @relation("ProductTranslationDeletedBy")

  createdCategoryTranslations CategoryTranslation[] @relation("CategoryTranslationCreatedBy")
  updatedCategoryTranslations CategoryTranslation[] @relation("CategoryTranslationUpdatedBy")
  deletedCategoryTranslations CategoryTranslation[] @relation("CategoryTranslationDeletedBy")

  createdBrands Brand[] @relation("BrandCreatedBy")
  updatedBrands Brand[] @relation("BrandUpdatedBy")
  deletedBrands Brand[] @relation("BrandDeletedBy")

  createdBrandTranslations BrandTranslation[] @relation("BrandTranslationCreatedBy")
  updatedBrandTranslations BrandTranslation[] @relation("BrandTranslationUpdatedBy")
  deletedBrandTranslations BrandTranslation[] @relation("BrandTranslationDeletedBy")

  createdOrders Order[] @relation("OrderCreatedBy")
  updatedOrders Order[] @relation("OrderUpdatedBy")
  deletedOrders Order[] @relation("OrderDeletedBy")

  createdById  Int?
  createdBy    User?  @relation("UserCreatedByOtherUser", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  createdUsers User[] @relation("UserCreatedByOtherUser") 

  updatedById  Int?
  updatedBy    User?  @relation("UserUpdatedByOtherUser", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedUsers User[] @relation("UserUpdatedByOtherUser") 

  deletedById  Int?      
  deletedBy    User?     @relation("UserDeletedByOtherUser", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedUsers User[]    @relation("UserDeletedByOtherUser") 

  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime? 

  @@index([email])
  @@index([status])
  @@index([roleId])
  @@index([deletedAt])
}

model UserProfile {
  id        Int     @id @default(autoincrement())
  userId    Int     @unique
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  firstName String? @db.VarChar(100)
  lastName  String? @db.VarChar(100)
  username  String? @unique @db.VarChar(100) 
  avatar    String? @db.VarChar(1000)
  bio                      String?
  phoneNumber              String?   @unique @db.VarChar(50)
  isPhoneNumberVerified    Boolean   @default(false)
  phoneNumberVerifiedAt    DateTime?
  countryCode              String?   @db.VarChar(10)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserTranslation {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation("User", fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  languageId  String
  language    Language @relation(fields: [languageId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  address     String?  @db.VarChar(500)
  description String?

  createdById Int?
  createdBy   User?    @relation("UserTranslationCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User?    @relation("UserTranslationUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedById Int?
  deletedBy   User?     @relation("UserTranslationDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedAt   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([deletedAt])
}

model Device {
  id                 Int                 @id @default(autoincrement())
  userId             Int
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  name               String?             @db.VarChar(255) 
  fingerprint        String?             @unique @db.VarChar(255) 
  userAgent          String
  ip                 String              @db.VarChar(45)
  lastActive         DateTime            @default(now()) @updatedAt 
  createdAt          DateTime            @default(now())
  isActive           Boolean             @default(true) 
  isTrusted          Boolean             @default(false)
  trustExpiration    DateTime?           
  lastKnownIp        String?             @db.VarChar(45)
  lastKnownCountry   String?             @db.VarChar(100)
  lastKnownCity      String?             @db.VarChar(100)
  lastNotificationSentAt DateTime?       

  @@index([userId, fingerprint])
  @@index([userId, lastActive])
}

model Role {
  id           Int      @id @default(autoincrement())
  name         String   @unique @db.VarChar(100)
  description  String?
  isSystemRole Boolean  @default(false)
  isSuperAdmin Boolean  @default(false)

  users        User[]

  permissions RolePermission[]

  createdById  Int?
  createdBy    User?    @relation("RoleCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById  Int?
  updatedBy    User?    @relation("RoleUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedById  Int?
  deletedBy    User?    @relation("RoleDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  deletedAt    DateTime?

  @@index([name])
  @@index([isSystemRole])
  @@index([deletedAt])
}

model Permission {
  id          Int     @id @default(autoincrement())
  action      String  @db.VarChar(100)
  subject     String  @db.VarChar(255)
  description String?
  category    String? @db.VarChar(100)
  conditions  Json?    @db.Json

  roles RolePermission[]

  createdById Int?
  createdBy   User?    @relation("PermissionCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User?    @relation("PermissionUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedById Int?
  deletedBy   User?    @relation("PermissionDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")
  deletedAt   DateTime?

  @@unique([action, subject])
  @@index([subject, action])
  @@index([category])
  @@index([deletedAt])
}

model RolePermission {
  roleId         Int
  permissionId   Int

  role           Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission     Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  assignedAt     DateTime @default(now())
  assignedById   Int?     
  assignedBy     User?    @relation("RolePermissionAssignedBy", fields: [assignedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  @@id([roleId, permissionId])
  @@index([assignedById])
}

model Product {
  id                  Int                  @id @default(autoincrement())
  base_price          Float
  virtual_price       Float                
  brandId             Int
  brand               Brand                @relation(fields: [brandId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  images              String[]             
  categories          Category[]           
  variants            Variant[]
  skus                SKU[]
  reviews             Review[]
  productTranslations ProductTranslation[]

  createdById Int?
  createdBy   User? @relation("ProductCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User? @relation("ProductUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedById Int?
  deletedBy   User?     @relation("ProductDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([deletedAt])
  @@index([brandId])
}

model ProductTranslation {
  id          Int      @id @default(autoincrement())
  productId   Int
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  languageId  String
  language    Language @relation(fields: [languageId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  name        String   @db.VarChar(500)
  description String   

  createdById Int?
  createdBy   User? @relation("ProductTranslationCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User? @relation("ProductTranslationUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedById Int?
  deletedBy   User?     @relation("ProductTranslationDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([productId, languageId])
  @@index([deletedAt])
}

model Category {
  id                   Int                   @id @default(autoincrement())
  name                 String                @unique @db.VarChar(255)
  description          String?
  parentId             Int?
  parent               Category?             @relation("SubCategories", fields: [parentId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  children             Category[]            @relation("SubCategories")
  products             Product[]             
  categoryTranslations CategoryTranslation[]

  createdById Int?
  createdBy   User? @relation("CategoryCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User? @relation("CategoryUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedById Int?
  deletedBy   User?     @relation("CategoryDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([deletedAt])
}

model CategoryTranslation {
  id          Int      @id @default(autoincrement())
  categoryId  Int
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  languageId  String
  language    Language @relation(fields: [languageId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  name        String   @db.VarChar(500)
  description String

  createdById Int?
  createdBy   User? @relation("CategoryTranslationCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User? @relation("CategoryTranslationUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedById Int?
  deletedBy   User?     @relation("CategoryTranslationDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([deletedAt])
}

model Variant {
  id             Int             @id @default(autoincrement())
  name           String          @db.VarChar(500)
  productId      Int
  product        Product         @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  variantOptions VariantOption[]

  createdById Int?
  createdBy   User? @relation("VariantCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User? @relation("VariantUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedById Int?
  deletedBy   User?     @relation("VariantDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([deletedAt])
}

model VariantOption {
  id        Int     @id @default(autoincrement())
  value     String  @db.VarChar(500)
  variantId Int
  variant   Variant @relation(fields: [variantId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  skus      SKU[]

  createdById Int?
  createdBy   User? @relation("VariantOptionCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User? @relation("VariantOptionUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedById Int?
  deletedBy   User?     @relation("VariantOptionDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([deletedAt])
}

model SKU {
  id                  Int                  @id @default(autoincrement())
  value               String               @db.VarChar(500)
  price               Float
  stock               Int
  images              String[]
  productId           Int
  product             Product              @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  variantOptions      VariantOption[]
  cartItems           CartItem[]
  productSKUSnapshots ProductSKUSnapshot[]

  createdById Int?
  createdBy   User? @relation("SKUCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User? @relation("SKUUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedById Int?
  deletedBy   User?     @relation("SKUDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([deletedAt])
}

model Brand {
  id                Int                @id @default(autoincrement())
  logo              String             @db.VarChar(1000)
  products          Product[]
  brandTranslations BrandTranslation[]

  createdById Int?
  createdBy   User? @relation("BrandCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User? @relation("BrandUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedById Int?
  deletedBy   User?     @relation("BrandDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([deletedAt])
}

model BrandTranslation {
  id          Int      @id @default(autoincrement())
  brandId     Int
  brand       Brand    @relation(fields: [brandId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  languageId  String
  language    Language @relation(fields: [languageId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  name        String   @db.VarChar(500)
  description String

  createdById Int?
  createdBy   User? @relation("BrandTranslationCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User? @relation("BrandTranslationUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedById Int?
  deletedBy   User?     @relation("BrandTranslationDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([deletedAt])
}

model CartItem {
  id       Int  @id @default(autoincrement())
  quantity Int
  skuId    Int
  sku      SKU  @relation(fields: [skuId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId   Int
  user     User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductSKUSnapshot {
  id          Int      @id @default(autoincrement())
  productName String   @db.VarChar(500)
  price       Float
  images      String[]
  skuValue    String   @db.VarChar(500)
  skuId       Int?
  sku         SKU?     @relation(fields: [skuId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  orderId     Int?
  order       Order?   @relation(fields: [orderId], references: [id], onDelete: SetNull, onUpdate: NoAction)

  createdAt DateTime @default(now())
}

model Order {
  id     Int                  @id @default(autoincrement())
  userId Int
  user   User                 @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  status OrderStatus
  items  ProductSKUSnapshot[]

  createdById Int?
  createdBy   User? @relation("OrderCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User? @relation("OrderUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedById Int?
  deletedBy   User?     @relation("OrderDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([deletedAt])
}

model Review {
  id        Int     @id @default(autoincrement())
  content   String
  rating    Int
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId    Int
  user      User    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PaymentTransaction {
  id                 Int      @id @default(autoincrement())
  gateway            String   @db.VarChar(100)
  transactionDate    DateTime @default(now())
  accountNumber      String   @db.VarChar(100)
  subAccount         String?  @db.VarChar(250)
  amountIn           Int      @default(0)
  amountOut          Int      @default(0)
  accumulated        Int      @default(0)
  code               String?  @db.VarChar(250)
  transactionContent String?  @db.Text
  referenceNumber    String?  @db.VarChar(255)
  body               String?  @db.Text

  createdAt DateTime @default(now())
}

model Message {
  id         Int    @id @default(autoincrement())
  fromUserId Int
  fromUser   User   @relation("FromUser", fields: [fromUserId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  toUserId   Int
  toUser     User   @relation("ToUser", fields: [toUserId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  content    String

  readAt    DateTime?
  createdAt DateTime  @default(now())
}

model RecoveryCode {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  code      String   @unique @db.VarChar(255)
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([userId])
}

enum OrderStatus {
  PENDING_CONFIRMATION
  PENDING_PICKUP
  PENDING_DELIVERY
  DELIVERED
  RETURNED
  CANCELLED
}

enum VerificationCodeType {
  REGISTER
  RESET_PASSWORD
  LOGIN
  LOGIN_UNTRUSTED_DEVICE_2FA
  DISABLE_2FA
  SETUP_2FA
  LOGIN_UNTRUSTED_DEVICE_OTP
  VERIFY_SECONDARY_EMAIL
  VERIFY_PHONE_NUMBER
}

model AuditLog {
  id           Int      @id @default(autoincrement())
  timestamp    DateTime @default(now())
  userId       Int?
  userEmail    String?
  action       String
  entity       String?
  entityId     String?
  ipAddress    String?
  userAgent    String?
  status       String
  errorMessage String?
  details      Json?
  notes        String?
  geoLocation  Json?

  user User? @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([action])
  @@index([entity, entityId])
  @@index([timestamp])
}
