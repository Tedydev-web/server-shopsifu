{
  "info": {
    "_postman_id": "56255e22-f6d6-490b-8a22-f69bbf0c0cf9",
    "name": "Shopsifu",
    "description": "üõçÔ∏è Shopsifu API Documentation\n\n> üìå Phi√™n b·∫£n: v1.0.0\n> üóìÔ∏è C·∫≠p nh·∫≠t l·∫ßn cu·ªëi: 16/05/2025\n> üåê M√¥i tr∆∞·ªùng m·∫∑c ƒë·ªãnh: Production\n> üîó API Base URL: [https://api.shopsifu.live/api/v1](https://api.shopsifu.live/api/v1)\n\n---\n\n## üî∞ Gi·ªõi thi·ªáu\n\nShopsifu l√† n·ªÅn t·∫£ng th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠ to√†n di·ªán, k·∫øt n·ªëi ng∆∞·ªùi mua v√† ng∆∞·ªùi b√°n, h·ªó tr·ª£ t·ª´ ƒëƒÉng s·∫£n ph·∫©m ƒë·∫øn x·ª≠ l√Ω ƒë∆°n h√†ng, v·∫≠n chuy·ªÉn v√† ƒë√°nh gi√°.\n\nCollection API n√†y gi√∫p dev, QA, tester v√† stakeholder d·ªÖ d√†ng ki·ªÉm th·ª≠, t√≠ch h·ª£p v√† m·ªü r·ªông ch·ª©c nƒÉng c·ªßa h·ªá th·ªëng.\n\n---\n\n## üöÄ Ch·ª©c nƒÉng ch√≠nh\n\n| Module         | M√¥ t·∫£                                               |\n| -------------- | --------------------------------------------------- |\n| üßë‚Äçüíº User     | ƒêƒÉng k√Ω, ƒëƒÉng nh·∫≠p, x√°c th·ª±c, qu·∫£n l√Ω h·ªì s∆° c√° nh√¢n |\n| üè™ Shop        | T·∫°o shop, c·∫≠p nh·∫≠t th√¥ng tin, qu·∫£n l√Ω s·∫£n ph·∫©m      |\n| üì¶ Product     | CRUD s·∫£n ph·∫©m, ph√¢n lo·∫°i, t√¨m ki·∫øm n√¢ng cao         |\n| üõí Cart        | Th√™m/xo√°/s·ª≠a s·∫£n ph·∫©m trong gi·ªè h√†ng                |\n| üí≥ Order       | T·∫°o ƒë∆°n h√†ng, thanh to√°n, theo d√µi tr·∫°ng th√°i ƒë∆°n   |\n| üöö Shipping    | T√≠nh ph√≠ ship, tracking v·∫≠n ƒë∆°n, t√≠ch h·ª£p GHTK/GHN  |\n| üßæ Payment     | T√≠ch h·ª£p v√≠ ƒëi·ªán t·ª≠, ho√†n ti·ªÅn, ki·ªÉm tra giao d·ªãch  |\n| üåü Review      | ƒê√°nh gi√° s·∫£n ph·∫©m v√† ng∆∞·ªùi b√°n                      |\n| üîß Admin Tools | Qu·∫£n l√Ω h·ªá th·ªëng, th·ªëng k√™, ki·ªÉm duy·ªát n·ªôi dung     |\n\n---\n\n## üî∞ X√°c th·ª±c & B·∫£o m·∫≠t (Cookie-Based Authentication)\n\n### C∆° ch·∫ø ho·∫°t ƒë·ªông c·ªßa Cookie-Based Authentication\n\n* H·ªá th·ªëng s·ª≠ d·ª•ng cookie-based authentication thay v√¨ token-based:\n  - Access Token ƒë∆∞·ª£c l∆∞u trong cookie HTTP-Only (kh√¥ng truy c·∫≠p ƒë∆∞·ª£c t·ª´ JavaScript)\n  - Refresh Token ƒë∆∞·ª£c l∆∞u trong cookie HTTP-Only ri√™ng bi·ªát\n  - CSRF Token ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ b·∫£o v·ªá kh·ªèi t·∫•n c√¥ng CSRF\n\n* Lu·ªìng x√°c th·ª±c:\n  1. User ƒëƒÉng nh·∫≠p ‚Üí Server t·∫°o token ‚Üí Token ƒë∆∞·ª£c g·ª≠i trong cookie\n  2. M·ªói request sau ƒë√≥ t·ª± ƒë·ªông g·ª≠i k√®m cookie ch·ª©a token\n  3. Server x√°c th·ª±c token t·ª´ cookie, kh√¥ng c·∫ßn g·ª≠i trong header\n  4. Khi token h·∫øt h·∫°n, refresh token cookie ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ l√†m m·ªõi\n  5. Khi ƒëƒÉng xu·∫•t, server x√≥a c√°c cookie li√™n quan\n\n* CSRF Protection:\n  - Server t·ª± ƒë·ªông t·∫°o CSRF token v√† g·ª≠i trong cookie `xsrf-token` v√† header `XSRF-TOKEN`\n  - C√°c request kh√¥ng ph·∫£i GET ph·∫£i k√®m CSRF token trong header `X-CSRF-Token`\n\n### C·∫•u h√¨nh Postman\n\n1. **B·∫≠t ch·ª©c nƒÉng Cookie trong Postman**:\n   - Settings > General > Cookies > Enable cookies\n   - Enable \"Automatically follow redirects\" \n\n2. **T·∫°o CSRF Token Variable**:\n   - Sau khi ƒëƒÉng nh·∫≠p, token ƒë∆∞·ª£c t·ª± ƒë·ªông tr·∫£ v·ªÅ trong cookie v√† header\n   - L∆∞u gi√° tr·ªã v√†o bi·∫øn `{{csrfToken}}` cho c√°c request ti·∫øp theo\n   - Th√™m header `XSRF-TOKEN: {{csrfToken}}` cho c√°c request POST/PUT/DELETE\n\n3. **C√°ch debug Cookie**:\n   - Xem cookies b·∫±ng c√°ch ch·ªçn request > Cookies (tab b√™n c·∫°nh Headers)\n   - Xem response headers ƒë·ªÉ l·∫•y CSRF token m·ªõi n·∫øu c·∫ßn\n\n---\n\n## üß™ H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng Collection\n\n1. T·∫£i Collection: [‚Üí T·∫£i Shopsifu Postman Collection](https://api.shopsifu.live/docs/postman-collection)\n2. Import v√†o Postman\n3. Thi·∫øt l·∫≠p Environment Variable:\n\n   * base\\_url = [https://api.shopsifu.live/api/v1](https://api.shopsifu.live/api/v1)\n   * localUrl = [http://localhost:3000/api/v1](http://localhost:3000/api/v1)\n   * csrfToken = (s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t t·ª± ƒë·ªông sau ƒëƒÉng nh·∫≠p)\n4. Lu·ªìng x√°c th·ª±c:\n   * ƒêƒÉng nh·∫≠p ‚Üí Cookies ƒë∆∞·ª£c l∆∞u t·ª± ƒë·ªông\n   * L·∫•y CSRF token t·ª´ response header/cookie\n   * S·ª≠ d·ª•ng CSRF token cho c√°c request kh√¥ng ph·∫£i GET\n   * Truy c·∫≠p API - Cookies ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông\n   * Refresh token - Kh√¥ng c·∫ßn g·ª≠i token th·ªß c√¥ng\n   * ƒêƒÉng xu·∫•t - Cookies b·ªã x√≥a\n\n> **L∆∞u √Ω**: V·ªõi t·∫•t c·∫£ c√°c endpoint kh√¥ng ph·∫£i GET, nh·ªõ th√™m header `XSRF-TOKEN: {{csrfToken}}`.\n\n---\n\n## üìò Ti√™u chu·∫©n RESTful & Quy ∆∞·ªõc\n\n* ‚úÖ GET ‚Äì L·∫•y d·ªØ li·ªáu\n* ‚úèÔ∏è POST ‚Äì T·∫°o m·ªõi\n* ‚ôªÔ∏è PUT/PATCH ‚Äì C·∫≠p nh·∫≠t\n* ‚ùå DELETE ‚Äì Xo√°\n\nM√£ ph·∫£n h·ªìi (Status Code):\n\n* 200 OK ‚Äì Th√†nh c√¥ng\n* 201 Created ‚Äì T·∫°o th√†nh c√¥ng\n* 400 Bad Request ‚Äì Request l·ªói\n* 401 Unauthorized ‚Äì Token sai/h·∫øt h·∫°n\n* 403 Forbidden ‚Äì Kh√¥ng ƒë·ªß quy·ªÅn ho·∫∑c thi·∫øu CSRF token\n* 404 Not Found ‚Äì Kh√¥ng t√¨m th·∫•y\n* 500 Internal Server Error ‚Äì L·ªói server\n\n---\n\n## üìà ƒê·ªãnh h∆∞·ªõng m·ªü r·ªông\n\n* T√≠ch h·ª£p AI g·ª£i √Ω s·∫£n ph·∫©m\n* Tracking ƒë∆°n h√†ng realtime v·ªõi WebSocket\n* GraphQL API (phi√™n b·∫£n 2)\n* Microservices h√≥a t·ª´ng module\n\n---\n\n## üë®‚Äçüíª ƒê·ªôi ng≈© ph√°t tri·ªÉn\n\n| Th√†nh vi√™n       | Vai tr√≤            |\n| ---------------- | ------------------ |\n| ƒê·ªìng Hi·∫øu ƒê·∫°t    | Backend Engineer   |\n| Nguy·ªÖn ƒêƒÉng Ph√°t | Frontend Developer |\n| Hu·ª≥nh S∆°n T√πng   | Frontend Developer |\n| Tr∆∞∆°ng H√πng Anh  | Frontend Developer |\n| Nguy·ªÖn Gia Huy   | DQA & Tester       |\n| Phan Th√†nh L·ª£i   | QA & Tester        |\n\n---\n\nMade with ‚ù§Ô∏è by Shopsifu Engineering Team\n",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "30243513",
    "_collection_link": "https://www.postman.com/shopsifu/workspace/shopsifu-workspace/collection/30243513-56255e22-f6d6-490b-8a22-f69bbf0c0cf9?action=share&source=collection_link&creator=30243513"
  },
  "item": [
    {
      "name": "Auth Modules Local",
      "item": [
        {
          "name": "Get Collection Variables",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// L·∫•y v√† hi·ªÉn th·ªã c√°c bi·∫øn m√¥i tr∆∞·ªùng v√† collection hi·ªán t·∫°i",
                  "console.log('===== THI·∫æT L·∫¨P POSTMAN CHO COOKIE-BASED AUTH =====');",
                  "console.log('* CSRF token hi·ªán t·∫°i:', pm.environment.get('csrfToken'));",
                  "console.log('* LOCAL URL hi·ªán t·∫°i:', pm.environment.get('localUrl'));",
                  "console.log('* EMAIL hi·ªán t·∫°i:', pm.environment.get('email'));",
                  "console.log('* M·∫≠t kh·∫©u hi·ªán t·∫°i:', pm.environment.get('defaultPwd'));",
                  "console.log('===== H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG =====');",
                  "console.log('1. Enable cookies trong Postman: Settings > General > Cookies');",
                  "console.log('2. Th√™m bi·∫øn m√¥i tr∆∞·ªùng \"localUrl\" = http://localhost:3000/api/v1');",
                  "console.log('3. ƒê·∫∑t email v√† defaultPwd ph√π h·ª£p v·ªõi h·ªá th·ªëng c·ªßa b·∫°n');",
                  "console.log('4. Th·ª±c hi·ªán c√°c request theo th·ª© t·ª± trong collection');",
                  "console.log('5. Headers v·ªõi X-CSRF-Token s·∫Ω ƒë∆∞·ª£c t·ª± ƒë·ªông ƒëi·ªÅn sau khi ƒëƒÉng nh·∫≠p');"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{localUrl}}/",
              "host": ["{{localUrl}}"],
              "path": [""]
            },
            "description": "## H∆∞·ªõng d·∫´n c√†i ƒë·∫∑t v√† s·ª≠ d·ª•ng Cookie-Based Auth\n\n### C√†i ƒë·∫∑t Postman\n\n1. **Thi·∫øt l·∫≠p bi·∫øn m√¥i tr∆∞·ªùng**:\n   - `localUrl`: URL c·ªßa API local (v√≠ d·ª•: http://localhost:3000/api/v1)\n   - `email`: Email ƒëƒÉng k√Ω/ƒëƒÉng nh·∫≠p\n   - `defaultPwd`: M·∫≠t kh·∫©u m·∫∑c ƒë·ªãnh\n\n2. **C·∫•u h√¨nh Postman**:\n   - Settings > General > Cookies > Enable cookies\n   - B·∫≠t \"Automatically follow redirects\"\n\n### Th·ª© t·ª± th·ª±c hi·ªán c√°c API\n\n1. **ƒêƒÉng k√Ω ng∆∞·ªùi d√πng m·ªõi**:\n   - Send OTP (type: REGISTER)\n   - Verify Code (type: REGISTER)\n   - Register\n\n2. **ƒêƒÉng nh·∫≠p**:\n   - Login\n   - Sau khi ƒëƒÉng nh·∫≠p, Postman s·∫Ω t·ª± ƒë·ªông l∆∞u cookies v√† CSRF token\n\n3. **S·ª≠ d·ª•ng API ƒë√£ x√°c th·ª±c**:\n   - T·∫•t c·∫£ c√°c request b·∫£o m·∫≠t s·∫Ω s·ª≠ d·ª•ng cookies ƒë∆∞·ª£c l∆∞u t·ª± ƒë·ªông\n   - Th√™m header `X-CSRF-Token: {{csrfToken}}` cho c√°c request kh√¥ng ph·∫£i GET\n\n4. **Refresh Token** (khi access token h·∫øt h·∫°n):\n   - G·ªçi endpoint refresh-token ƒë·ªÉ c·∫≠p nh·∫≠t cookies\n\n5. **ƒêƒÉng xu·∫•t**:\n   - G·ªçi endpoint logout ƒë·ªÉ x√≥a cookies\n\nC√°c cookies ƒë∆∞·ª£c t·∫°o:\n- `access_token`: Ch·ª©a JWT access token (HTTP-Only)\n- `refresh_token`: Ch·ª©a JWT refresh token (HTTP-Only)\n- `xsrf-token`: Ch·ª©a CSRF token (ƒë·ªçc ƒë∆∞·ª£c t·ª´ JavaScript)"
          },
          "response": []
        },
        {
          "name": "Get Authorize",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [""],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [""],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{localUrl}}/auth/google-link",
              "host": ["{{localUrl}}"],
              "path": ["auth", "google-link"]
            },
            "description": "#### üìÑ M·ª•c ƒë√≠ch\n\nL·∫•y ƒë∆∞·ªùng d·∫´n OAuth2 ƒë·ªÉ redirect ng∆∞·ªùi d√πng sang Google, ph·ª•c v·ª• login/auth v·ªõi Google account.\n\n#### üîë Headers\n\n* (Kh√¥ng y√™u c·∫ßu)\n\n#### ‚ùì Query / Path / Body\n\n* (Kh√¥ng c√≥)\n\n#### üì§ V√≠ d·ª• Request\n\n```\nGET https://api.shopsifu.live/api/v1/auth/google-link\n```\n\n#### ‚úÖ Response Codes\n\n* `200 OK` ‚Äì Tr·∫£ v·ªÅ URL redirect.\n* `500 Internal Server Error` ‚Äì L·ªói server.\n\n#### üì¶ V√≠ d·ª• Response\n\n```json\n{\n  \"url\": \"https://accounts.google.com/o/oauth2/v2/auth?client_id=‚Ä¶\"\n}\n```"
          },
          "response": []
        },
        {
          "name": "Register",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"\", function () {",
                  "    pm.response.to.be.success",
                  "    const {email} = pm.response.json().data",
                  "    pm.environment.set(\"email\", email)",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "XSRF-TOKEN",
                "value": "{{csrfToken}}",
                "type": "text"
              },
              {
                "key": "User-Agent",
                "value": "",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "  {\n    \"email\": \"{{email}}\",\n    \"name\": \"{{defaultName}}\",\n    \"phoneNumber\": \"0123456789\",\n    \"password\": \"{{defaultPwd}}\",\n    \"confirmPassword\": \"{{defaultPwd}}\",\n    \"otpToken\": \"ad960e3e-1602-4879-8efe-10d091648f23\" // otpToken: Nh·∫≠n ƒë∆∞·ª£c sau khi g·ªçi verify-code v·ªõi type=REGISTER\n  }",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{localUrl}}/auth/register",
              "host": ["{{localUrl}}"],
              "path": ["auth", "register"]
            },
            "description": "#### üìÑ M·ª•c ƒë√≠ch\n\nT·∫°o m·ªõi t√†i kho·∫£n ng∆∞·ªùi d√πng sau khi ƒë√£ verify OTP.\n\n#### üîë Headers\n\n* `Content-Type: application/json`\n* `Accept-Language: vi`\n\n#### üì• Body Parameters\n\n| Field           | Lo·∫°i   | M√¥ t·∫£                             |\n| --------------- | ------ | --------------------------------- |\n| email           | string | Email ƒë√£ verify b·∫±ng OTP          |\n| name            | string | H·ªç t√™n ng∆∞·ªùi d√πng                 |\n| phoneNumber     | string | S·ªë ƒëi·ªán tho·∫°i                     |\n| password        | string | M·∫≠t kh·∫©u                          |\n| confirmPassword | string | Nh·∫≠p l·∫°i m·∫≠t kh·∫©u                 |\n| otpToken        | string | Token OTP (response t·ª´ /auth/otp) |\n\n#### üì§ V√≠ d·ª• Request\n\n```json\nPOST https://api.shopsifu.live/api/v1/auth/register\nContent-Type: application/json\nAccept-Language: vi\n\n{\n  \"email\": \"user@example.com\",\n  \"name\": \"Nguyen Phat\",\n  \"phoneNumber\": \"0123456789\",\n  \"password\": \"P@ssw0rd!\",\n  \"confirmPassword\": \"P@ssw0rd!\",\n  \"otpToken\": \"{{otpToken}}\"\n}\n```\n\n#### ‚úÖ Response Codes\n\n* `201 Created` ‚Äì T·∫°o t√†i kho·∫£n th√†nh c√¥ng.\n* `400 Bad Request` ‚Äì Thi·∫øu tr∆∞·ªùng ho·∫∑c m·∫≠t kh·∫©u kh√¥ng kh·ªõp.\n* `409 Conflict` ‚Äì Email ƒë√£ t·ªìn t·∫°i.\n\n#### üì¶ V√≠ d·ª• Response\n\n```json\n{\n  \"data\": {\n    \"email\": \"user@example.com\",\n    \"id\": \"user-uuid-1234\"\n  }\n}\n```"
          },
          "response": []
        },
        {
          "name": "Send OTP",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "",
                  "// Check response for successful execution and set environment variables",
                  "pm.test(\"Check response for successful execution and set environment variables\", function () {",
                  "    pm.response.to.be.success;",
                  "    const responseData = pm.response.json();",
                  "    ",
                  "    // N·∫øu m√¥i tr∆∞·ªùng ph√°t tri·ªÉn c√≥ th·ªÉ c√≥ email v√† code",
                  "    if (responseData.email) {",
                  "        pm.expect(responseData).to.have.property('email').that.is.a('string');",
                  "        pm.environment.set(\"email\", responseData.email);",
                  "    }",
                  "    ",
                  "    if (responseData.code) {",
                  "        pm.expect(responseData).to.have.property('code').that.is.a('string');",
                  "        pm.environment.set(\"code\", responseData.code);",
                  "    }",
                  "    ",
                  "    // L∆∞u otpToken n·∫øu c√≥",
                  "    if (responseData.otpToken) {",
                  "        pm.environment.set(\"otpToken\", responseData.otpToken);",
                  "    }",
                  "    ",
                  "    // Ki·ªÉm tra CSRF token m·ªõi n·∫øu c√≥",
                  "    var csrfToken = pm.cookies.get('xsrf-token') || pm.response.headers.get('XSRF-TOKEN');",
                  "    if (csrfToken) {",
                  "        console.log('CSRF Token m·ªõi:', csrfToken);",
                  "        pm.environment.set(\"csrfToken\", csrfToken);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [""],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "X-CSRF-Token",
                "value": "{{csrfToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "  {\n    \"email\": \"{{email}}\",\n    \"type\": \"FORGOT_PASSWORD\" // type: Lo·∫°i m√£ x√°c th·ª±c - c√≥ th·ªÉ l√†: \"REGISTER\", \"FORGOT_PASSWORD\", \"LOGIN\", \"DISABLE_2FA\", \"SETUP_2FA\"\n  }",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{localUrl}}/auth/otp",
              "host": ["{{localUrl}}"],
              "path": ["auth", "otp"]
            },
            "description": "#### üìÑ M·ª•c ƒë√≠ch\n\nG·ª≠i m√£ OTP cho email:\n\n* ƒêƒÉng k√Ω (REGISTER)\n* Qu√™n m·∫≠t kh·∫©u (FORGOT\\_PASSWORD)\n* Login kh√¥ng m·∫≠t kh·∫©u (LOGIN)\n* T·∫Øt 2FA (DISABLE\\_2FA)\n\n#### üîë Headers\n\n* `Content-Type: application/json`\n* `X-CSRF-Token: {{csrfToken}}`\n\n#### üì• Body Parameters\n\n| Field | Lo·∫°i   | M√¥ t·∫£                                              |\n| ----- | ------ | -------------------------------------------------- |\n| email | string | ƒê·ªãa ch·ªâ email nh·∫≠n OTP                             |\n| type  | string | REGISTER / FORGOT\\_PASSWORD / LOGIN / DISABLE\\_2FA |\n\n#### üì§ V√≠ d·ª• Request\n\n```json\nPOST https://api.shopsifu.live/api/v1/auth/otp\nContent-Type: application/json\nX-CSRF-Token: {{csrfToken}}\n\n{\n  \"email\": \"user@example.com\",\n  \"type\": \"REGISTER\"\n}\n```\n\n#### ‚úÖ Response Codes\n\n* `200 OK` ‚Äì OTP ƒë√£ g·ª≠i th√†nh c√¥ng.\n* `400 Bad Request` ‚Äì Thi·∫øu ho·∫∑c sai type.\n* `403 Forbidden` ‚Äì Thi·∫øu CSRF token.\n* `429 Too Many Requests` ‚Äì G·ª≠i qu√° s·ªë l·∫ßn cho ph√©p.\n\n#### üì¶ V√≠ d·ª• Response (Ch·ªâ trong m√¥i tr∆∞·ªùng ph√°t tri·ªÉn)\n\n```json\n{\n  \"email\": \"user@example.com\",\n  \"code\": \"d6f3a2\",\n  \"message\": \"G·ª≠i m√£ OTP th√†nh c√¥ng\"\n}\n```\n\n#### üì¶ V√≠ d·ª• Response (M√¥i tr∆∞·ªùng production)\n\n```json\n{\n  \"message\": \"G·ª≠i m√£ OTP th√†nh c√¥ng\"\n}\n```\n"
          },
          "response": []
        },
        {
          "name": "Verify code",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "X-CSRF-Token",
                "value": "{{csrfToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{email}}\",\n    \"code\": \"239667\", // code: M√£ 6 s·ªë ng∆∞·ªùi d√πng nh·∫≠n qua email\n    \"type\": \"FORGOT_PASSWORD\" // type: Lo·∫°i m√£ x√°c th·ª±c, c·∫ßn kh·ªõp v·ªõi lo·∫°i ƒë√£ g·ª≠i - c√≥ th·ªÉ l√†: \"REGISTER\", \"FORGOT_PASSWORD\", \"LOGIN\", \"DISABLE_2FA\", \"SETUP_2FA\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{localUrl}}/auth/verify-code",
              "host": ["{{localUrl}}"],
              "path": ["auth", "verify-code"]
            },
            "description": "#### üìÑ M·ª•c ƒë√≠ch\n\nX√°c th·ª±c m√£ OTP ƒë√£ g·ª≠i v·ªÅ email ƒë·ªÉ ti·∫øp t·ª•c flow REGISTER / LOGIN / RESET / DISABLE\\_2FA.\n\n#### üîë Headers\n\n* `Content-Type: application/json`\n* `X-CSRF-Token: {{csrfToken}}`\n\n#### üì• Body Parameters\n\n| Field | Lo·∫°i   | M√¥ t·∫£                                              |\n| ----- | ------ | -------------------------------------------------- |\n| email | string | Email ƒë√£ d√πng l·∫•y OTP                              |\n| code  | string | M√£ OTP nh·∫≠n ƒë∆∞·ª£c                                   |\n| type  | string | REGISTER / FORGOT\\_PASSWORD / LOGIN / DISABLE\\_2FA |\n\n#### üì§ V√≠ d·ª• Request\n\n```json\nPOST https://api.shopsifu.live/api/v1/auth/verify-code\nContent-Type: application/json\nX-CSRF-Token: {{csrfToken}}\n\n{\n  \"email\": \"user@example.com\",\n  \"code\": \"d6f3a2\",\n  \"type\": \"REGISTER\"\n}\n```\n\n#### ‚úÖ Response Codes\n\n* `200 OK` ‚Äì Code h·ª£p l·ªá.\n* `400 Bad Request` ‚Äì Code sai/h·∫øt h·∫°n.\n* `401 Unauthorized` ‚Äì Email ch∆∞a g·ª≠i OTP.\n* `403 Forbidden` ‚Äì Thi·∫øu CSRF token.\n\n#### üì¶ V√≠ d·ª• Response\n\n```json\n{\n  \"otpToken\": \"a1b2c3d4-e5f6-g7h8-i9j0-k1l2m3n4o5p6\",\n  \"message\": \"Code verified successfully.\"\n}\n```\n"
          },
          "response": []
        },
        {
          "name": "Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Ki·ªÉm tra response status code v√† set environment variables",
                  "pm.test(\"ƒêƒÉng nh·∫≠p th√†nh c√¥ng, l∆∞u th√¥ng tin ng∆∞·ªùi d√πng\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    ",
                  "    // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng t·ª´ response body",
                  "    var responseData = pm.response.json();",
                  "    if (responseData.userId) {",
                  "        pm.environment.set(\"userId\", responseData.userId);",
                  "        pm.environment.set(\"userEmail\", responseData.email);",
                  "    }",
                  "    ",
                  "    // Ki·ªÉm tra xem c√≥ loginSessionToken kh√¥ng (cho 2FA)",
                  "    if (responseData.loginSessionToken) {",
                  "        pm.environment.set(\"loginSessionToken\", responseData.loginSessionToken);",
                  "    }",
                  "    ",
                  "    // Ki·ªÉm tra cookies ƒë√£ ƒë∆∞·ª£c set hay ch∆∞a",
                  "    var allCookies = pm.cookies.getAll();",
                  "    console.log('Cookies hi·ªán t·∫°i:', allCookies);",
                  "    ",
                  "    // L·∫•y CSRF token t·ª´ cookie ho·∫∑c header",
                  "    var csrfToken = pm.cookies.get('xsrf-token') || pm.response.headers.get('XSRF-TOKEN');",
                  "    if (csrfToken) {",
                  "        console.log('CSRF Token:', csrfToken);",
                  "        pm.environment.set(\"csrfToken\", csrfToken);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [""],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "X-CSRF-Token",
                "value": "{{csrfToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{email}}\",\n    \"password\": \"{{defaultPwd}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{localUrl}}/auth/login",
              "host": ["{{localUrl}}"],
              "path": ["auth", "login"]
            },
            "description": "#### üìÑ M·ª•c ƒë√≠ch\n\nX√°c th·ª±c email + password, l∆∞u tokens v√†o cookies v√† tr·∫£ v·ªÅ th√¥ng tin ng∆∞·ªùi d√πng.\n\n#### üîë Headers\n\n* `Content-Type: application/json`\n* `X-CSRF-Token: {{csrfToken}}` (N·∫øu ƒë√£ c√≥ s·∫µn t·ª´ request tr∆∞·ªõc)\n\n#### üì• Body Parameters\n\n| Field    | Lo·∫°i   | M√¥ t·∫£            |\n| -------- | ------ | ---------------- |\n| email    | string | Email ng∆∞·ªùi d√πng |\n| password | string | M·∫≠t kh·∫©u         |\n\n#### üì§ V√≠ d·ª• Request\n\n```json\nPOST https://api.shopsifu.live/api/v1/auth/login\nContent-Type: application/json\n\n{\n  \"email\": \"user@example.com\",\n  \"password\": \"P@ssw0rd!\"\n}\n```\n\n#### ‚úÖ Response Codes\n\n* `200 OK` ‚Äì Th√¥ng tin h·ª£p l·ªá, cookies ƒë√£ ƒë∆∞·ª£c set.\n* `401 Unauthorized` ‚Äì Email ho·∫∑c m·∫≠t kh·∫©u sai.\n* `403 Forbidden` ‚Äì T√†i kho·∫£n c·∫ßn 2FA.\n\n#### üì¶ V√≠ d·ª• Response\n\n```json\n{\n  \"userId\": 123,\n  \"email\": \"user@example.com\",\n  \"name\": \"User Name\",\n  \"role\": \"client\"\n}\n```\n\n#### üç™ Cookie\n\nAPI n√†y s·∫Ω set cookie:\n* `access_token`: Cookie HTTP-Only ch·ª©a JWT access token\n* `refresh_token`: Cookie HTTP-Only ch·ª©a JWT refresh token\n* `xsrf-token`: Cookie ch·ª©a CSRF token\n\n#### üìã CSRF Token\n\nCSRF token c≈©ng ƒë∆∞·ª£c tr·∫£ v·ªÅ trong response header `XSRF-TOKEN`"
          },
          "response": []
        },
        {
          "name": "Refresh Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Ki·ªÉm tra response status code v√† set environment variables",
                  "pm.test(\"Refresh token th√†nh c√¥ng\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    ",
                  "    // Ki·ªÉm tra xem response ch·ªâ ch·ª©a th√¥ng tin user v√† kh√¥ng ch·ª©a token",
                  "    var responseData = pm.response.json();",
                  "    pm.expect(responseData).to.have.property('userId');",
                  "    pm.expect(responseData).to.have.property('role');",
                  "    pm.expect(responseData).to.not.have.property('accessToken');",
                  "    pm.expect(responseData).to.not.have.property('refreshToken');",
                  "    ",
                  "    // Ki·ªÉm tra cookies ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t hay ch∆∞a",
                  "    var allCookies = pm.cookies.getAll();",
                  "    console.log('Cookies sau refresh:', allCookies);",
                  "    ",
                  "    // L·∫•y CSRF token m·ªõi n·∫øu c√≥",
                  "    var csrfToken = pm.cookies.get('xsrf-token') || pm.response.headers.get('XSRF-TOKEN');",
                  "    if (csrfToken) {",
                  "        console.log('CSRF Token m·ªõi:', csrfToken);",
                  "        pm.environment.set(\"csrfToken\", csrfToken);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [""],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "X-CSRF-Token",
                "value": "{{csrfToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{localUrl}}/auth/refresh-token",
              "host": ["{{localUrl}}"],
              "path": ["auth", "refresh-token"]
            },
            "description": "#### üìÑ M·ª•c ƒë√≠ch\n\nL√†m m·ªõi access token khi h·∫øt h·∫°n, s·ª≠ d·ª•ng refresh token t·ª´ cookie.\n\n#### üîë Headers\n\n* `Content-Type: application/json`\n* `X-CSRF-Token: {{csrfToken}}`\n\n#### üì• Body Parameters\n\n* Kh√¥ng c·∫ßn body, cookie refresh_token s·∫Ω ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông\n\n#### üì§ V√≠ d·ª• Request\n\n```json\nPOST https://api.shopsifu.live/api/v1/auth/refresh-token\nContent-Type: application/json\nX-CSRF-Token: {{csrfToken}}\n```\n\n#### ‚úÖ Response Codes\n\n* `200 OK` ‚Äì Refresh th√†nh c√¥ng, cookies ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.\n* `401 Unauthorized` ‚Äì Refresh token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n.\n* `403 Forbidden` ‚Äì Thi·∫øu CSRF token.\n\n#### üì¶ V√≠ d·ª• Response\n\n```json\n{\n  \"userId\": 123,\n  \"role\": \"client\"\n}\n```\n\n#### üç™ Cookie\n\nAPI n√†y s·∫Ω c·∫≠p nh·∫≠t cookie:\n* `access_token`: Cookie HTTP-Only ch·ª©a JWT access token m·ªõi\n* `refresh_token`: Cookie HTTP-Only ch·ª©a JWT refresh token m·ªõi\n* `xsrf-token`: Cookie ch·ª©a CSRF token m·ªõi\n\n#### üìã CSRF Token\n\nCSRF token m·ªõi c≈©ng ƒë∆∞·ª£c tr·∫£ v·ªÅ trong response header `XSRF-TOKEN`"
          },
          "response": []
        },
        {
          "name": "Logout",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"ƒêƒÉng xu·∫•t th√†nh c√¥ng, cookies ƒë∆∞·ª£c x√≥a\", function () {",
                  "    pm.response.to.be.success;",
                  "    ",
                  "    // Ki·ªÉm tra xem cookies ƒë√£ b·ªã x√≥a ch∆∞a",
                  "    var accessTokenCookie = pm.cookies.get('access_token');",
                  "    var refreshTokenCookie = pm.cookies.get('refresh_token');",
                  "    ",
                  "    // Ki·ªÉm tra response message",
                  "    var responseData = pm.response.json();",
                  "    pm.expect(responseData).to.have.property('message');",
                  "    pm.expect(responseData.message).to.include('th√†nh c√¥ng');",
                  "    ",
                  "    // Log c√°c cookies c√≤n l·∫°i cho m·ª•c ƒë√≠ch debug",
                  "    console.log('Cookies sau khi ƒëƒÉng xu·∫•t:', pm.cookies.getAll());",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [""],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "X-CSRF-Token",
                "value": "{{csrfToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{localUrl}}/auth/logout",
              "host": ["{{localUrl}}"],
              "path": ["auth", "logout"]
            },
            "description": "#### üìÑ M·ª•c ƒë√≠ch\n\nH·ªßy phi√™n ƒëƒÉng nh·∫≠p, x√≥a c√°c cookie ch·ª©a token.\n\n#### üîë Headers\n\n* `Content-Type: application/json`\n* `X-CSRF-Token: {{csrfToken}}`\n\n#### üì• Body Parameters\n\n* Kh√¥ng c·∫ßn body, cookie refresh_token s·∫Ω ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông\n\n#### üì§ V√≠ d·ª• Request\n\n```json\nPOST https://api.shopsifu.live/api/v1/auth/logout\nContent-Type: application/json\nX-CSRF-Token: {{csrfToken}}\n```\n\n#### ‚úÖ Response Codes\n\n* `200 OK` ‚Äì ƒêƒÉng xu·∫•t th√†nh c√¥ng, cookies ƒë√£ b·ªã x√≥a.\n* `401 Unauthorized` ‚Äì Phi√™n kh√¥ng h·ª£p l·ªá.\n* `403 Forbidden` ‚Äì Thi·∫øu CSRF token.\n\n#### üì¶ V√≠ d·ª• Response\n\n```json\n{\n  \"message\": \"ƒêƒÉng xu·∫•t th√†nh c√¥ng\"\n}\n```\n\n#### üç™ Cookie\n\nAPI n√†y s·∫Ω x√≥a c√°c cookie sau:\n* `access_token`\n* `refresh_token`\n* `xsrf-token` (c√≥ th·ªÉ ƒë∆∞·ª£c gi·ªØ l·∫°i ƒë·ªÉ s·ª≠ d·ª•ng cho ƒëƒÉng nh·∫≠p ti·∫øp theo)"
          },
          "response": []
        },
        {
          "name": "Reset Password",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{email}}\",\n    \"otpToken\": \"1f170a4e-fb12-4402-a656-d116b4cd86c3\", // otpToken: Nh·∫≠n ƒë∆∞·ª£c sau khi g·ªçi verify-code v·ªõi type=FORGOT_PASSWORD\n    \"newPassword\": \"{{defaultPwd}}\",\n    \"confirmNewPassword\": \"{{defaultPwd}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{localUrl}}/auth/reset-password",
              "host": ["{{localUrl}}"],
              "path": ["auth", "reset-password"]
            },
            "description": "#### üìÑ M·ª•c ƒë√≠ch\n\nƒê·∫∑t l·∫°i m·∫≠t kh·∫©u m·ªõi cho t√†i kho·∫£n sau khi ƒë√£ verify OTP.\n\n#### üîë Headers\n\n* `Content-Type: application/json`\n\n#### üì• Body Parameters\n\n| Field              | Lo·∫°i   | M√¥ t·∫£                  |\n| ------------------ | ------ | ---------------------- |\n| email              | string | Email ng∆∞·ªùi d√πng       |\n| otpToken           | string | Token OTP t·ª´ /auth/otp |\n| newPassword        | string | M·∫≠t kh·∫©u m·ªõi           |\n| confirmNewPassword | string | Nh·∫≠p l·∫°i m·∫≠t kh·∫©u m·ªõi  |\n\n#### üì§ V√≠ d·ª• Request\n\n```json\nPOST https://api.shopsifu.live/api/v1/auth/reset-password\nContent-Type: application/json\n\n{\n  \"email\": \"user@example.com\",\n  \"otpToken\": \"{{otpToken}}\",\n  \"newPassword\": \"NewP@ss123\",\n  \"confirmNewPassword\": \"NewP@ss123\"\n}\n```\n\n#### ‚úÖ Response Codes\n\n* `200 OK` ‚Äì ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng.\n* `400 Bad Request` ‚Äì M·∫≠t kh·∫©u kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng kh·ªõp.\n* `401 Unauthorized` ‚Äì OTP sai/h·∫øt h·∫°n.\n"
          },
          "response": []
        },
        {
          "name": "Setup 2FA",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Store the secret from the response in an environment or global variable",
                  "var responseBody = pm.response.json();",
                  "var setupToken = responseBody.setupToken;",
                  "pm.environment.set(\"setupToken\", setupToken);"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [""],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{localUrl}}/auth/2fa/setup",
              "host": ["{{localUrl}}"],
              "path": ["auth", "2fa", "setup"]
            },
            "description": "#### üìÑ M·ª•c ƒë√≠ch\n\nKh·ªüi t·∫°o 2FA cho t√†i kho·∫£n, tr·∫£ v·ªÅ secret QR code ho·∫∑c URL ƒë·ªÉ ng∆∞·ªùi d√πng qu√©t v√†o Authenticator app.\n\n#### üîë Headers\n\n* `Authorization: Bearer {{accessToken}}`\n\n#### ‚ùì Body\n\n* (Kh√¥ng c·∫ßn body)\n\n#### üì§ V√≠ d·ª• Request\n\n```\nPOST https://api.shopsifu.live/api/v1/auth/2fa/setup\nAuthorization: Bearer <accessToken>\n```\n\n#### ‚úÖ Response Codes\n\n* `200 OK` ‚Äì Tr·∫£ v·ªÅ `secret`, `qrCodeUrl`.\n* `401 Unauthorized` ‚Äì Token sai/h·∫øt h·∫°n.\n\n#### üì¶ V√≠ d·ª• Response\n\n```json\n{\n  \"secret\": \"JBSWY3DPEHPK3PXP\",\n  \"qrCodeUrl\": \"https://api.qrserver.com/v1/create-qr-code/?data=‚Ä¶\"\n}\n```\n"
          },
          "response": []
        },
        {
          "name": "Confirm 2FA",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [""],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [""],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"setupToken\": \"{{setupToken}}\", // setupToken: Token nh·∫≠n ƒë∆∞·ª£c t·ª´ API setup 2FA\n  \"totpCode\": \"290704\" // totpCode: M√£ 6 s·ªë t·ª´ ·ª©ng d·ª•ng Authenticator\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{localUrl}}/auth/2fa/confirm-setup",
              "host": ["{{localUrl}}"],
              "path": ["auth", "2fa", "confirm-setup"]
            },
            "description": "#### üìÑ M·ª•c ƒë√≠ch\n\nKh·ªüi t·∫°o 2FA cho t√†i kho·∫£n, tr·∫£ v·ªÅ secret QR code ho·∫∑c URL ƒë·ªÉ ng∆∞·ªùi d√πng qu√©t v√†o Authenticator app.\n\n#### üîë Headers\n\n* `Authorization: Bearer {{accessToken}}`\n\n#### ‚ùì Body\n\n* (Kh√¥ng c·∫ßn body)\n\n#### üì§ V√≠ d·ª• Request\n\n```\nPOST https://api.shopsifu.live/api/v1/auth/2fa/setup\nAuthorization: Bearer <accessToken>\n```\n\n#### ‚úÖ Response Codes\n\n* `200 OK` ‚Äì Tr·∫£ v·ªÅ `secret`, `qrCodeUrl`.\n* `401 Unauthorized` ‚Äì Token sai/h·∫øt h·∫°n.\n\n#### üì¶ V√≠ d·ª• Response\n\n```json\n{\n  \"secret\": \"JBSWY3DPEHPK3PXP\",\n  \"qrCodeUrl\": \"https://api.qrserver.com/v1/create-qr-code/?data=‚Ä¶\"\n}\n```\n"
          },
          "response": []
        },
        {
          "name": "Disable 2FA",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [""],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [""],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"type\": \"TOTP\", // ho·∫∑c \"OTP\" | type: Ph∆∞∆°ng th·ª©c x√°c th·ª±c - \"TOTP\" (t·ª´ app) ho·∫∑c \"OTP\" (t·ª´ email)\n\t\"code\": \"015508\" // code: M√£ x√°c th·ª±c 6 s·ªë t·ª´ app ho·∫∑c email\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{localUrl}}/auth/2fa/disable",
              "host": ["{{localUrl}}"],
              "path": ["auth", "2fa", "disable"]
            },
            "description": "#### üìÑ M·ª•c ƒë√≠ch\n\nT·∫Øt 2FA cho t√†i kho·∫£n sau khi x√°c nh·∫≠n m√£ OTP ho·∫∑c TOTP.\n\n#### üîë Headers\n\n* `Authorization: Bearer {{accessToken}}`\n* `Content-Type: application/json`\n\n#### üì• Body Parameters\n\n| Field    | Lo·∫°i   | M√¥ t·∫£                   |\n| -------- | ------ | ----------------------- |\n| totpCode | string | M√£ TOTP ho·∫∑c OTP ƒë√£ g·ª≠i |\n\n#### üì§ V√≠ d·ª• Request\n\n```json\nPOST https://api.shopsifu.live/api/v1/auth/2fa/disable\nAuthorization: Bearer <accessToken>\nContent-Type: application/json\n\n{\n  \"totpCode\": \"654321\"\n}\n```\n\n#### ‚úÖ Response Codes\n\n* `200 OK` ‚Äì T·∫Øt 2FA th√†nh c√¥ng.\n* `400 Bad Request` ‚Äì Code sai/h·∫øt h·∫°n.\n* `401 Unauthorized` ‚Äì Token kh√¥ng h·ª£p l·ªá.\n"
          },
          "response": []
        },
        {
          "name": "Verify 2FA",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"X√°c th·ª±c 2FA th√†nh c√¥ng\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    ",
                  "    // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng t·ª´ response body",
                  "    var responseData = pm.response.json();",
                  "    pm.expect(responseData).to.have.property('userId');",
                  "    pm.expect(responseData).to.have.property('email');",
                  "    pm.expect(responseData).to.have.property('name');",
                  "    pm.expect(responseData).to.have.property('role');",
                  "    pm.expect(responseData).to.not.have.property('accessToken');",
                  "    pm.expect(responseData).to.not.have.property('refreshToken');",
                  "    ",
                  "    // Ki·ªÉm tra cookies ƒë√£ ƒë∆∞·ª£c set hay ch∆∞a",
                  "    var allCookies = pm.cookies.getAll();",
                  "    console.log('Cookies sau x√°c th·ª±c 2FA:', allCookies);",
                  "    ",
                  "    // L·∫•y CSRF token t·ª´ cookie ho·∫∑c header",
                  "    var csrfToken = pm.cookies.get('xsrf-token') || pm.response.headers.get('XSRF-TOKEN');",
                  "    if (csrfToken) {",
                  "        console.log('CSRF Token:', csrfToken);",
                  "        pm.environment.set(\"csrfToken\", csrfToken);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [""],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "X-CSRF-Token",
                "value": "{{csrfToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"loginSessionToken\": \"{{loginSessionToken}}\", // loginSessionToken: Token nh·∫≠n ƒë∆∞·ª£c t·ª´ API login khi 2FA ƒë∆∞·ª£c b·∫≠t\n  \"type\": \"TOTP\", // type: Ph∆∞∆°ng th·ª©c x√°c th·ª±c - \"TOTP\" (t·ª´ app) ho·∫∑c \"OTP\" (t·ª´ email) ho·∫∑c \"recoveryCode\" (T√πy ch·ªçn, ch·ªâ s·ª≠ d·ª•ng khi mu·ªën bypass 2FA b·∫±ng recovery code n√≥ s·∫Ω ƒë∆∞·ª£c tr·∫£ ra khi b·∫≠t 2FA th√†nh c√¥ng)\n  \"code\": \"189282\" // code: M√£ x√°c th·ª±c 6 s·ªë ho·∫∑c recovery code 10 s·ªë\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{localUrl}}/auth/2fa/verify",
              "host": ["{{localUrl}}"],
              "path": ["auth", "2fa", "verify"]
            },
            "description": "#### üìÑ M·ª•c ƒë√≠ch\n\nX√°c th·ª±c m√£ 2FA (TOTP ho·∫∑c OTP) sau khi login, l∆∞u tokens v√†o cookies v√† tr·∫£ v·ªÅ th√¥ng tin ng∆∞·ªùi d√πng.\n\n#### üîë Headers\n\n* `Content-Type: application/json`\n* `X-CSRF-Token: {{csrfToken}}`\n\n#### üì• Body Parameters\n\n| Field             | Lo·∫°i   | M√¥ t·∫£                                                 |\n| ----------------- | ------ | ----------------------------------------------------- |\n| loginSessionToken | string | Token phi√™n ƒëƒÉng nh·∫≠p t·∫°m th·ªùi                        |\n| type              | string | TOTP / OTP / RECOVERY                                 |\n| code              | string | M√£ t·ª´ Authenticator app, email, ho·∫∑c recovery code    |\n\n#### üì§ V√≠ d·ª• Request\n\n```json\nPOST https://api.shopsifu.live/api/v1/auth/2fa/verify\nContent-Type: application/json\nX-CSRF-Token: {{csrfToken}}\n\n{\n  \"loginSessionToken\": \"abc123-session-token\",\n  \"type\": \"TOTP\",\n  \"code\": \"123456\"\n}\n```\n\n#### ‚úÖ Response Codes\n\n* `200 OK` ‚Äì X√°c th·ª±c th√†nh c√¥ng, cookies ƒë√£ ƒë∆∞·ª£c set.\n* `400 Bad Request` ‚Äì Code sai/h·∫øt h·∫°n.\n* `401 Unauthorized` ‚Äì Session token kh√¥ng h·ª£p l·ªá.\n* `403 Forbidden` ‚Äì Thi·∫øu CSRF token.\n\n#### üì¶ V√≠ d·ª• Response\n\n```json\n{\n  \"userId\": 123,\n  \"email\": \"user@example.com\",\n  \"name\": \"User Name\",\n  \"role\": \"client\"\n}\n```\n\n#### üç™ Cookie\n\nAPI n√†y s·∫Ω set cookie:\n* `access_token`: Cookie HTTP-Only ch·ª©a JWT access token\n* `refresh_token`: Cookie HTTP-Only ch·ª©a JWT refresh token\n* `xsrf-token`: Cookie ch·ª©a CSRF token\n\n#### üìã CSRF Token\n\nCSRF token c≈©ng ƒë∆∞·ª£c tr·∫£ v·ªÅ trong response header `XSRF-TOKEN`"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Language Modules",
      "item": [
        {
          "name": "Create Language",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"id\": \"ru\",\n\t\"name\": \"Rusia\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{serverUrl}}/languages",
              "host": ["{{serverUrl}}"],
              "path": ["languages"]
            }
          },
          "response": []
        },
        {
          "name": "Get All Languages",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{serverUrl}}/languages",
              "host": ["{{serverUrl}}"],
              "path": ["languages"]
            }
          },
          "response": []
        },
        {
          "name": "Update Language",
          "request": {
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"name\": \"English\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{serverUrl}}/languages/en",
              "host": ["{{serverUrl}}"],
              "path": ["languages", "en"]
            }
          },
          "response": []
        },
        {
          "name": "Delete Language",
          "request": {
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{serverUrl}}/languages/vi",
              "host": ["{{serverUrl}}"],
              "path": ["languages", "vi"]
            }
          },
          "response": []
        },
        {
          "name": "Get Language Detail",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{serverUrl}}/languages/vi",
              "host": ["{{serverUrl}}"],
              "path": ["languages", "vi"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Permissions Modules",
      "item": []
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{accessToken}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "packages": {},
        "exec": [""]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "packages": {},
        "exec": [""]
      }
    }
  ],
  "variable": [
    {
      "key": "localUrl",
      "value": ""
    },
    {
      "key": "serverUrl",
      "value": "",
      "type": "string"
    },
    {
      "key": "email",
      "value": "",
      "type": "string"
    },
    {
      "key": "defaultPwd",
      "value": "",
      "type": "string"
    },
    {
      "key": "loginSessionToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "otpToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "setupToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "csrfToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "accessToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "refreshToken",
      "value": "",
      "type": "string"
    }
  ]
}
