@startuml
!theme aws-orange
skinparam backgroundColor #FFFFFF
skinparam defaultTextAlignment center
skinparam participant {
    BackgroundColor #E8F4FD
    BorderColor #1976D2
    FontColor #000000
    FontStyle bold
}
skinparam actor {
    BackgroundColor #FFF8E1
    BorderColor #F57C00
    FontColor #000000
    FontStyle bold
}
skinparam database {
    BackgroundColor #F3E5F5
    BorderColor #7B1FA2
    FontColor #000000
    FontStyle bold
}
skinparam note {
    BackgroundColor #FFFDE7
    BorderColor #F9A825
    FontColor #000000
}

title Mô-đun Permission - Tổng Quan Sequence
note top : Hệ thống quản lý quyền với cache management và role relationships

actor "Admin" as Admin
participant PermissionController
participant PermissionService
participant PermissionRepo
database PostgreSQL
database Redis

== GET /permissions - Lấy Danh Sách Quyền ==
Admin -> PermissionController: GET /permissions?page=1&limit=10
PermissionController -> PermissionService: list(pagination)

PermissionService -> PermissionRepo: list(pagination)
PermissionRepo -> PermissionRepo: Calculate pagination metadata
note right
Pagination Logic:
• skip = (page - 1) * limit
• take = limit
• Parallel queries: count + findMany
• Calculate totalPages, hasNext, hasPrev
end note

PermissionRepo -> PostgreSQL: count() với WHERE deletedAt IS NULL
PermissionRepo -> PostgreSQL: findMany() với pagination
PostgreSQL --> PermissionRepo: Total count + permissions data
PermissionRepo --> PermissionService: Permissions với metadata
PermissionService --> PermissionController: Response + i18n message
PermissionController --> Admin: JSON với data + metadata

== GET /permissions/:id - Chi Tiết Quyền ==
Admin -> PermissionController: GET /permissions/:permissionId
PermissionController -> PermissionService: findById(permissionId)

PermissionService -> PermissionRepo: findById(id)
PermissionRepo -> PostgreSQL: findUnique với WHERE deletedAt IS NULL
PostgreSQL --> PermissionRepo: Permission data
PermissionRepo --> PermissionService: Permission info

alt Permission tồn tại
    PermissionService --> PermissionController: Success response
    PermissionController --> Admin: JSON permission detail
else Permission không tồn tại
    PermissionService --> PermissionController: NotFoundRecordException
    PermissionController --> Admin: 404 Not Found
end

== POST /permissions - Tạo Quyền Mới ==
Admin -> PermissionController: POST /permissions + {name, path, method, module}
PermissionController -> PermissionService: create({data, user})

PermissionService -> PermissionService: Validate data với Zod schema
note right
Data Validation:
• name: required string
• path: required string (API path)
• method: required string (HTTP method)
• module: required string
• Unique constraint: path + method
end note

PermissionService -> PermissionRepo: create({createdById, data})
PermissionRepo -> PostgreSQL: INSERT permission với audit fields
note right
Create Logic:
• INSERT permission với createdById
• Audit trail: createdAt, createdById
• Validate unique constraint
end note
PostgreSQL --> PermissionRepo: Permission created
PermissionRepo --> PermissionService: New permission
PermissionService --> PermissionController: Success response
PermissionController --> Admin: 201 Created + JSON response

== PUT /permissions/:id - Cập Nhật Quyền ==
Admin -> PermissionController: PUT /permissions/:permissionId + {data}
PermissionController -> PermissionService: update({id, data, user})

PermissionService -> PermissionRepo: update({id, updatedById, data})
PermissionRepo -> PostgreSQL: UPDATE permission với include roles
note right
Update Logic:
• UPDATE permission với updatedById
• Include roles relationship
• Validate unique constraint
• Audit trail: updatedAt, updatedById
end note
PostgreSQL --> PermissionRepo: Updated permission với roles
PermissionRepo --> PermissionService: Updated data

alt Update successful
    PermissionService -> PermissionService: deleteCachedRole(roles)
    note right
    Cache Management:
    • Delete cached role data cho tất cả roles
    • Cache key: `role:${roleId}`
    • Parallel deletion với Promise.all
    • Ensure cache consistency
    end note
    PermissionService -> Redis: del(cacheKey) cho mỗi role
    Redis --> PermissionService: Cache cleared
    PermissionService --> PermissionController: Success response
    PermissionController --> Admin: 200 OK + JSON response
else Update failed
    PermissionService --> PermissionController: Error response
    PermissionController --> Admin: 400/404 Error
end

== DELETE /permissions/:id - Xóa Quyền ==
Admin -> PermissionController: DELETE /permissions/:permissionId
PermissionController -> PermissionService: delete({id, user})

PermissionService -> PermissionRepo: delete({id, deletedById})
PermissionRepo -> PostgreSQL: UPDATE deletedAt (soft delete)
note right
Delete Logic:
• Soft delete: UPDATE deletedAt field
• Include roles relationship
• Audit trail: deletedAt, deletedById
• Support hard delete với isHard flag
end note
PostgreSQL --> PermissionRepo: Permission marked deleted với roles
PermissionRepo --> PermissionService: Deleted data

alt Delete successful
    PermissionService -> PermissionService: deleteCachedRole(roles)
    PermissionService -> Redis: del(cacheKey) cho mỗi role
    Redis --> PermissionService: Cache cleared
    PermissionService --> PermissionController: Success response
    PermissionController --> Admin: 200 OK + message
else Delete failed
    PermissionService --> PermissionController: Error response
    PermissionController --> Admin: 404 Not Found
end

== Xử Lý Lỗi & Validation ==
alt Lỗi unique constraint
    PermissionService --> PermissionController: PermissionAlreadyExistsException
    PermissionController --> Admin: 422 Unprocessable Entity
    note right
    Unique Constraint Error:
    • path + method combination đã tồn tại
    • Duplicate permission không được phép
    • Clear error message cho user
    end note

else Lỗi không tìm thấy
    PermissionService --> PermissionController: NotFoundRecordException
    PermissionController --> Admin: 404 Not Found

else Lỗi validation dữ liệu
    PermissionService --> PermissionController: ValidationException
    PermissionController --> Admin: 422 Unprocessable Entity

else Lỗi database
    PermissionService --> PermissionController: DatabaseException
    PermissionController --> Admin: 500 Internal Server Error
end

== Cache Management ==
alt Cache operations
    PermissionService -> Redis: del(cacheKey)
    note right
    Cache Operations:
    • Delete role cache khi permission thay đổi
    • Cache key format: `role:${roleId}`
    • Parallel deletion với Promise.all
    • Ensure data consistency
    end note
    Redis --> PermissionService: Cache operation result
end

== Trả Kết Quả ==
PermissionService -> PermissionService: Tạo thông báo đa ngôn ngữ (I18nService)
PermissionService --> PermissionController: Response + Message đã localize
PermissionController --> Admin: JSON Response với metadata đầy đủ

note bottom
**Đặc điểm chính của module Permission:**
• CRUD operations đầy đủ với audit trail
• Soft delete pattern với hard delete option
• Cache management cho role relationships
• Unique constraint validation (path + method)
• Pagination với metadata đầy đủ
• Multi-language support
• Comprehensive error handling
• Role relationship management
end note

@enduml
