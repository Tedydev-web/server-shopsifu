@startuml
!theme aws-orange
skinparam backgroundColor #FFFFFF
skinparam defaultTextAlignment center
skinparam participant {
    BackgroundColor #E8F4FD
    BorderColor #1976D2
    FontColor #000000
    FontStyle bold
}
skinparam actor {
    BackgroundColor #FFF8E1
    BorderColor #F57C00
    FontColor #000000
    FontStyle bold
}
skinparam database {
    BackgroundColor #F3E5F5
    BorderColor #7B1FA2
    FontColor #000000
    FontStyle bold
}
skinparam note {
    BackgroundColor #FFFDE7
    BorderColor #F9A825
    FontColor #000000
}

title Mô-đun Sepay - Tổng Quan Sequence
note top : Hệ thống xử lý webhook thanh toán SePay với validation và real-time notification

actor "SePay Gateway" as SePayGateway
actor "Client (Payment Room)" as Client
participant SepayController
participant SepayService
participant SepayRepo
participant SharedPaymentRepo
participant PaymentProducer
database PostgreSQL
database Redis

== Webhook Processing ==
SePayGateway -> SepayController: POST /payment/receiver (webhook data)
note right
Webhook Data Structure:
• id: Transaction ID từ SePay
• gateway: Brand name ngân hàng
• transactionDate: Thời gian giao dịch
• transferType: 'in' hoặc 'out'
• transferAmount: Số tiền giao dịch
• content: Nội dung chuyển khoản
• code: Mã code thanh toán
end note

SepayController -> SepayService: receiver(webhookBody)
SepayService -> SepayRepo: receiver(webhookBody)

== Transaction Processing ==
SepayRepo -> SepayRepo: Validate transaction không trùng lặp
note right
Duplicate Check:
• Tìm paymentTransaction theo id
• Nếu đã tồn tại → throw BadRequestException
• Đảm bảo idempotency
end note

SepayRepo -> PostgreSQL: findUnique paymentTransaction
PostgreSQL --> SepayRepo: Existing transaction check
SepayRepo -> SepayRepo: Calculate amountIn/amountOut

alt Transaction chưa tồn tại
    SepayRepo -> PostgreSQL: $transaction (atomic operation)
    note right
    Database Transaction:
    • CREATE paymentTransaction với audit fields
    • Parse transactionDate từ string
    • Lưu đầy đủ webhook data
    • Đảm bảo ACID properties
    end note

    == Payment ID Extraction ==
    SepayRepo -> SharedPaymentRepo: extractPaymentId(prefix, code, content)
    note right
    Payment ID Extraction:
    • Tìm paymentId từ code hoặc content
    • Sử dụng PREFIX_PAYMENT_CODE
    • Parse và validate paymentId
    • Throw BadRequestException nếu không tìm thấy
    end note

    SharedPaymentRepo -> SharedPaymentRepo: extractPaymentId logic
    SharedPaymentRepo --> SepayRepo: paymentId hoặc null

    alt Payment ID found
        == Payment Validation ==
        SepayRepo -> SharedPaymentRepo: validateAndFindPayment(paymentId)
        SharedPaymentRepo -> PostgreSQL: findUnique payment với orders
        note right
        Payment Validation:
        • Tìm payment theo paymentId
        • Include orders với items, discounts
        • Validate payment tồn tại
        • Lấy userId từ orders[0]
        end note
        PostgreSQL --> SharedPaymentRepo: Payment với orders
        SharedPaymentRepo --> SepayRepo: Payment data

        == Amount Validation ==
        SepayRepo -> SharedPaymentRepo: validatePaymentAmount(orders, expected, actual)
        SharedPaymentRepo -> SharedPaymentRepo: getTotalPrice(orders)
        note right
        Amount Validation Logic:
        • Tính tổng giá trị orders
        • So sánh với transferAmount
        • Tolerance 0.01 để tránh float precision
        • Throw BadRequestException nếu không khớp
        end note

        alt Amount validation passed
            == Update Payment Status ==
            SepayRepo -> SharedPaymentRepo: updatePaymentAndOrdersOnSuccess(paymentId, orders)
            SharedPaymentRepo -> PostgreSQL: UPDATE payment status = SUCCESS
            SharedPaymentRepo -> PostgreSQL: UPDATE orders status = PENDING_PICKUP
            SharedPaymentRepo -> PaymentProducer: removeJob(paymentId)
            note right
            Success Update:
            • Payment status → SUCCESS
            • Orders status → PENDING_PICKUP
            • Remove cancel payment job
            • Atomic operations
            end note
            PostgreSQL --> SharedPaymentRepo: Updated records
            PaymentProducer -> Redis: Remove job từ queue
            Redis --> PaymentProducer: Job removed

            SepayRepo --> SepayService: {userId, paymentId}
            SepayService --> SepayController: Success response

        else Amount validation failed
            SepayRepo --> SepayService: BadRequestException
            SepayService --> SepayController: Error response
            SepayController --> SePayGateway: 400 Bad Request
        end

    else Payment ID not found
        SepayRepo --> SepayService: BadRequestException
        SepayService --> SepayController: Error response
        SepayController --> SePayGateway: 400 Bad Request
    end

else Transaction đã tồn tại
    SepayRepo --> SepayService: BadRequestException
    SepayService --> SepayController: Error response
    SepayController --> SePayGateway: 400 Bad Request
end

== Real-time Notification ==
alt Payment success
    SepayService -> SepayService: Emit WebSocket event
    note right
    WebSocket Notification:
    • Emit 'payment' event
    • Room: generateRoomPaymentId(paymentId)
    • Data: {status: 'success', gateway: 'sepay', paymentId}
    • Chỉ client trong payment room nhận được
    end note
    SepayService -> Client: WebSocket event
    Client -> Client: Update UI (payment success)
end

== Error Handling ==
alt Lỗi validation
    SepayService --> SepayController: BadRequestException
    SepayController --> SePayGateway: 400 Bad Request
    note right
    Validation Errors:
    • Transaction already exists
    • Cannot get payment id from content
    • Payment not found
    • Price not match
    end note

else Lỗi database
    SepayRepo --> SepayService: DatabaseException
    SepayService --> SepayController: Internal Server Error
    SepayController --> SePayGateway: 500 Internal Server Error
end

== Trả Kết Quả ==
SepayService -> SepayService: Tạo thông báo đa ngôn ngữ (I18nService)
SepayService --> SepayController: Response + Message đã localize
SepayController --> SePayGateway: JSON Response với success message

note bottom
**Đặc điểm chính của module Sepay:**
• Webhook processing với idempotency
• Payment validation phức tạp (amount, paymentId)
• Real-time WebSocket notification
• Atomic database transactions
• Integration với shared payment repository
• Queue management (remove cancel jobs)
• Multi-language support
• Comprehensive error handling
end note

@enduml
