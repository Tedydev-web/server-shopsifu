@startuml
!theme aws-orange
skinparam backgroundColor #FFFFFF
skinparam defaultTextAlignment center
skinparam participant {
    BackgroundColor #E8F4FD
    BorderColor #1976D2
    FontColor #000000
    FontStyle bold
}
skinparam actor {
    BackgroundColor #FFF8E1
    BorderColor #F57C00
    FontColor #000000
    FontStyle bold
}
skinparam database {
    BackgroundColor #F3E5F5
    BorderColor #7B1FA2
    FontColor #000000
    FontStyle bold
}
skinparam note {
    BackgroundColor #FFFDE7
    BorderColor #F9A825
    FontColor #000000
}

title Mô-đun Thương Hiệu - Tổng Quan Luồng Xử Lý
note top : Hệ thống quản lý thương hiệu với đa ngôn ngữ và phân quyền

actor "Khách hàng" as Client
actor "Người dùng" as User
participant "BrandController" as BC
participant "BrandTranslationController" as BTC
participant "BrandService" as BS
participant "BrandTranslationService" as BTS
participant "BrandRepo" as BR
participant "BrandTranslationRepo" as BTR
participant "I18nService" as IS
participant "I18nContext" as IC
database "PostgreSQL" as DB

== API Công Khai (Public Brands) ==
Client -> BC: GET /brands (danh sách thương hiệu)
BC -> BS: list() với pagination

opt Multi-language Support
    BS -> IC: I18nContext.current()?.lang
    IC -> BS: trả về ngôn ngữ hiện tại
    note right
    Language Handling:
    • Lấy language từ I18nContext
    • ALL_LANGUAGE_CODE = 'all' cho tất cả ngôn ngữ
    • Filter theo languageId cụ thể
    end note
end

BS -> BR: list(pagination, languageId)
BR -> DB: Query với JOIN brandTranslations
note right
Database Query Logic:
• COUNT(*) cho pagination metadata
• findMany với include brandTranslations
• WHERE deletedAt IS NULL
• ORDER BY createdAt DESC
• Language filter: ALL_LANGUAGE_CODE hoặc specific language
end note
DB -> BR: Brands với translations + metadata
BR -> BS: Kết quả có đa ngôn ngữ
BS -> IS: i18n.t('brand.brand.success.GET_SUCCESS')
IS -> BS: Trả về message đã localize
BS -> BC: Response + Message đã localize
BC -> Client: JSON với data + metadata

Client -> BC: GET /brands/:brandId (chi tiết thương hiệu)
BC -> BS: findById(brandId)
BS -> IC: I18nContext.current()?.lang
IC -> BS: trả về ngôn ngữ hiện tại
BS -> BR: findById(id, languageId)
BR -> DB: findUnique với include brandTranslations
DB -> BR: Brand detail với translations
BR -> BS: Brand với đa ngôn ngữ
BS -> IS: i18n.t('brand.brand.success.GET_DETAIL_SUCCESS')
IS -> BS: Trả về message đã localize
BS -> BC: Response chi tiết
BC -> Client: JSON brand detail

== API Quản Lý (Management Brands) ==
User -> BC: Request CRUD operations
BC -> BS: Business logic + Auth

alt Thao tác CREATE
    BS -> BS: validateData(brandData)
    note right
    Data Validation:
    • Schema validation (name, logo)
    • Business rules (required fields)
    • Brand uniqueness check
    end note
    BS -> BR: create() với createdById
    BR -> DB: INSERT brand với audit fields
    DB -> BR: Brand mới với translations
    BR -> BS: Brand đã tạo
    BS -> IS: i18n.t('brand.brand.success.CREATE_SUCCESS')
    IS -> BS: Trả về message đã localize
    BS -> BC: Success response
    BC -> User: 201 Created + JSON response

else Thao tác UPDATE
    BS -> BR: findById() trước
    BR -> DB: Tìm brand theo ID
    DB -> BR: Brand data
    BR -> BS: Brand info
    BS -> BR: update() với updatedById
    BR -> DB: UPDATE brand với audit
    DB -> BR: Brand updated
    BR -> BS: Brand đã cập nhật
    BS -> IS: i18n.t('brand.brand.success.UPDATE_SUCCESS')
    IS -> BS: Trả về message đã localize
    BS -> BC: Success response
    BC -> User: 200 OK + JSON response

else Thao tác DELETE
    BS -> BR: delete() soft delete
    BR -> DB: UPDATE deletedAt field
    DB -> BR: Brand marked deleted
    BR -> BS: Success response
    BS -> IS: i18n.t('brand.brand.success.DELETE_SUCCESS')
    IS -> BS: Trả về message đã localize
    BS -> BC: Success response
    BC -> User: 200 OK + JSON response
end

== API Quản Lý Translation ==
User -> BTC: Request CRUD translations
BTC -> BTS: Business logic + Auth

alt Thao tác CREATE Translation
    BTS -> BTS: validateData(translationData)
    note right
    Translation Validation:
    • brandId, languageId, name, description
    • Unique constraint: brandId + languageId
    • Foreign key validation
    end note
    BTS -> BTR: create()
    BTR -> DB: INSERT brandTranslation
    DB -> BTR: Translation created
    BTR -> BTS: Translation data
    BTS -> IS: i18n.t('brand.brandTranslation.success.CREATE_SUCCESS')
    IS -> BTS: Trả về message đã localize
    BTS -> BTC: Success response
    BTC -> User: 201 Created + JSON response

else Thao tác UPDATE Translation
    BTS -> BTR: update()
    BTR -> DB: UPDATE brandTranslation
    DB -> BTR: Translation updated
    BTR -> BTS: Updated data
    BTS -> IS: i18n.t('brand.brandTranslation.success.UPDATE_SUCCESS')
    IS -> BTS: Trả về message đã localize
    BTS -> BTC: Success response
    BTC -> User: 200 OK + JSON response

else Thao tác DELETE Translation
    BTS -> BTR: delete() soft delete
    BTR -> DB: UPDATE deletedAt
    DB -> BTR: Translation marked deleted
    BTR -> BTS: Success
    BTS -> IS: i18n.t('brand.brandTranslation.success.DELETE_SUCCESS')
    IS -> BTS: Trả về message đã localize
    BTS -> BTC: Success response
    BTC -> User: 200 OK + JSON response
end

== Xử Lý Lỗi & Phân Quyền ==
alt Lỗi validation dữ liệu
    BS -> BC: ValidationException
    BC -> User: 422 Unprocessable Entity

else Lỗi không tìm thấy
    BS -> BC: NotFoundRecordException
    BC -> Client: 404 Not Found

else Lỗi unique constraint (translation)
    BTS -> BTC: BrandTranslationAlreadyExistsException
    BTC -> User: 422 Unprocessable Entity

else Lỗi foreign key
    BS -> BC: ForeignKeyConstraintException
    BC -> User: 422 Unprocessable Entity
end

== Trả Kết Quả ==
BS -> IS: i18n.t('brand.brand.success.XXX')
IS -> BS: Trả về message đã localize
BS -> BC: Response + Message đã localize
BC -> User: JSON Response với metadata đầy đủ

note bottom
**Đặc điểm chính của module Brand:**
• Hỗ trợ đa ngôn ngữ hoàn chỉnh (I18nContext)
• Soft delete cho cả brand và translation
• Audit trail (createdById, updatedById, deletedById)
• Pagination với metadata đầy đủ
• Public API cho danh sách và chi tiết
• Management API cho CRUD operations
• Unique constraint cho brand + language combination
• Translation management sub-module
end note

@enduml



