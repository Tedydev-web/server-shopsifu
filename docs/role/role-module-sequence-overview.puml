@startuml
!theme aws-orange
skinparam backgroundColor #FFFFFF
skinparam defaultTextAlignment center
skinparam participant {
    BackgroundColor #E8F4FD
    BorderColor #1976D2
    FontColor #000000
    FontStyle bold
}
skinparam actor {
    BackgroundColor #FFF8E1
    BorderColor #F57C00
    FontColor #000000
    FontStyle bold
}
skinparam database {
    BackgroundColor #F3E5F5
    BorderColor #7B1FA2
    FontColor #000000
    FontStyle bold
}
skinparam note {
    BackgroundColor #FFFDE7
    BorderColor #F9A825
    FontColor #000000
}

title Mô-đun Role - Tổng Quan Sequence
note top : Hệ thống quản lý vai trò với base role protection và permission management

actor "Admin" as Admin
participant RoleController
participant RoleService
participant RoleRepo
database PostgreSQL
database Redis

== GET /roles - Lấy Danh Sách Vai Trò ==
Admin -> RoleController: GET /roles?page=1&limit=10&name=search
RoleController -> RoleService: list(pagination)

RoleService -> RoleRepo: list({page, limit, name})
RoleRepo -> RoleRepo: Calculate pagination metadata
note right
Pagination Logic:
• skip = (page - 1) * limit
• take = limit
• Parallel queries: count + findMany
• Filter theo name (case insensitive)
• WHERE deletedAt IS NULL
end note

RoleRepo -> PostgreSQL: count() với WHERE deletedAt IS NULL
RoleRepo -> PostgreSQL: findMany() với pagination và name filter
note right
Database Query Features:
• WHERE deletedAt IS NULL
• Filter name với contains + insensitive
• Pagination với skip/take
• ORDER BY default
end note
PostgreSQL --> RoleRepo: Total count + roles data
RoleRepo --> RoleService: Roles với metadata
RoleService --> RoleController: Response + i18n message
RoleController --> Admin: JSON với data + metadata

== GET /roles/:id - Chi Tiết Vai Trò ==
Admin -> RoleController: GET /roles/:roleId
RoleController -> RoleService: findById(roleId)

RoleService -> RoleRepo: findById(id)
RoleRepo -> PostgreSQL: findUnique với include permissions
note right
Detail Query Features:
• WHERE id = :roleId AND deletedAt IS NULL
• Include permissions với WHERE deletedAt IS NULL
• Return role với permissions array
end note
PostgreSQL --> RoleRepo: Role với permissions
RoleRepo --> RoleService: Role info

alt Role tồn tại
    RoleService --> RoleController: Success response
    RoleController --> Admin: JSON role detail với permissions
else Role không tồn tại
    RoleService --> RoleController: NotFoundRecordException
    RoleController --> Admin: 404 Not Found
end

== POST /roles - Tạo Vai Trò Mới ==
Admin -> RoleController: POST /roles + {name, description, isActive}
RoleController -> RoleService: create({data, user})

RoleService -> RoleService: Validate data với Zod schema
note right
Data Validation:
• name: required string (unique)
• description: optional string
• isActive: boolean
• Unique constraint: name
end note

RoleService -> RoleRepo: create({createdById, data})
RoleRepo -> PostgreSQL: INSERT role với audit fields
note right
Create Logic:
• INSERT role với createdById
• Audit trail: createdAt, createdById
• Validate unique constraint cho name
end note
PostgreSQL --> RoleRepo: Role created
RoleRepo --> RoleService: New role
RoleService --> RoleController: Success response
RoleController --> Admin: 201 Created + JSON response

== PUT /roles/:id - Cập Nhật Vai Trò ==
Admin -> RoleController: PUT /roles/:roleId + {data, permissionIds}
RoleController -> RoleService: update({id, data, user})

RoleService -> RoleService: verifyRole(id)
note right
Base Role Protection:
• Kiểm tra role có phải base role không
• Base roles: Admin, Client, Seller
• Không cho phép update/delete base roles
• Throw ProhibitedActionOnBaseRoleException
end note

RoleService -> RoleRepo: findById(id)
RoleRepo -> PostgreSQL: findUnique role
PostgreSQL --> RoleRepo: Role data
RoleRepo --> RoleService: Role info

alt Role không phải base role
    RoleService -> RoleRepo: update({id, updatedById, data})

    RoleRepo -> RoleRepo: Validate permissionIds
    note right
    Permission Validation:
    • Kiểm tra tất cả permissionIds tồn tại
    • Filter permissions đã bị soft delete
    • Throw error nếu có permission đã bị xóa
    end note

    RoleRepo -> PostgreSQL: findMany permissions theo IDs
    PostgreSQL --> RoleRepo: Permissions data
    RoleRepo -> RoleRepo: Filter deleted permissions

    alt All permissions valid
        RoleRepo -> PostgreSQL: UPDATE role với permissions
        note right
        Update Logic:
        • UPDATE role với updatedById
        • SET permissions với permissionIds
        • Include permissions trong response
        • Audit trail: updatedAt, updatedById
        end note
        PostgreSQL --> RoleRepo: Updated role với permissions
        RoleRepo --> RoleService: Updated data

        RoleService -> RoleService: deleteCachedRole(roleId)
        RoleService -> Redis: del(cacheKey)
        note right
        Cache Management:
        • Delete cached role data
        • Cache key: `role:${roleId}`
        • Ensure cache consistency
        end note
        Redis --> RoleService: Cache cleared
        RoleService --> RoleController: Success response
        RoleController --> Admin: 200 OK + JSON response

    else Invalid permissions
        RoleRepo --> RoleService: Error với deleted permission IDs
        RoleService --> RoleController: Error response
        RoleController --> Admin: 400 Bad Request
    end

else Role là base role
    RoleService --> RoleController: ProhibitedActionOnBaseRoleException
    RoleController --> Admin: 403 Forbidden
end

== DELETE /roles/:id - Xóa Vai Trò ==
Admin -> RoleController: DELETE /roles/:roleId
RoleController -> RoleService: delete({id, user})

RoleService -> RoleService: verifyRole(id)
RoleService -> RoleRepo: findById(id)
RoleRepo -> PostgreSQL: findUnique role
PostgreSQL --> RoleRepo: Role data
RoleRepo --> RoleService: Role info

alt Role không phải base role
    RoleService -> RoleRepo: delete({id, deletedById})
    RoleRepo -> PostgreSQL: UPDATE deletedAt (soft delete)
    note right
    Delete Logic:
    • Soft delete: UPDATE deletedAt field
    • Audit trail: deletedAt, deletedById
    • Support hard delete với isHard flag
    end note
    PostgreSQL --> RoleRepo: Role marked deleted
    RoleRepo --> RoleService: Deleted data

    RoleService -> RoleService: deleteCachedRole(roleId)
    RoleService -> Redis: del(cacheKey)
    Redis --> RoleService: Cache cleared
    RoleService --> RoleController: Success response
    RoleController --> Admin: 200 OK + message

else Role là base role
    RoleService --> RoleController: ProhibitedActionOnBaseRoleException
    RoleController --> Admin: 403 Forbidden
end

== Xử Lý Lỗi & Validation ==
alt Lỗi unique constraint
    RoleService --> RoleController: RoleAlreadyExistsException
    RoleController --> Admin: 422 Unprocessable Entity
    note right
    Unique Constraint Error:
    • Role name đã tồn tại
    • Duplicate role name không được phép
    • Clear error message cho user
    end note

else Lỗi base role protection
    RoleService --> RoleController: ProhibitedActionOnBaseRoleException
    RoleController --> Admin: 403 Forbidden
    note right
    Base Role Protection:
    • Không cho phép update/delete Admin, Client, Seller
    • Bảo vệ system roles
    • Clear error message
    end note

else Lỗi không tìm thấy
    RoleService --> RoleController: NotFoundRecordException
    RoleController --> Admin: 404 Not Found

else Lỗi validation dữ liệu
    RoleService --> RoleController: ValidationException
    RoleController --> Admin: 422 Unprocessable Entity

else Lỗi database
    RoleService --> RoleController: DatabaseException
    RoleController --> Admin: 500 Internal Server Error
end

== Cache Management ==
alt Cache operations
    RoleService -> Redis: del(cacheKey)
    note right
    Cache Operations:
    • Delete role cache khi role thay đổi
    • Cache key format: `role:${roleId}`
    • Ensure data consistency
    • Support cache invalidation
    end note
    Redis --> RoleService: Cache operation result
end

== Trả Kết Quả ==
RoleService -> RoleService: Tạo thông báo đa ngôn ngữ (I18nService)
RoleService --> RoleController: Response + Message đã localize
RoleController --> Admin: JSON Response với metadata đầy đủ

note bottom
**Đặc điểm chính của module Role:**
• CRUD operations đầy đủ với audit trail
• Base role protection (Admin, Client, Seller)
• Permission management với validation
• Cache management cho role data
• Soft delete pattern với hard delete option
• Unique constraint validation cho name
• Pagination với metadata đầy đủ
• Multi-language support
• Comprehensive error handling
• Permission relationship management
end note

@enduml
