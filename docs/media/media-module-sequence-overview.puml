@startuml
!theme aws-orange
skinparam backgroundColor #FFFFFF
skinparam defaultTextAlignment center
skinparam participant {
    BackgroundColor #E8F4FD
    BorderColor #1976D2
    FontColor #000000
    FontStyle bold
}
skinparam actor {
    BackgroundColor #FFF8E1
    BorderColor #F57C00
    FontColor #000000
    FontStyle bold
}
skinparam database {
    BackgroundColor #F3E5F5
    BorderColor #7B1FA2
    FontColor #000000
    FontStyle bold
}
skinparam note {
    BackgroundColor #FFFDE7
    BorderColor #F9A825
    FontColor #000000
}

title Mô-đun Media - Tổng Quan Sequence
note top : Hệ thống quản lý media với file upload, S3 integration và presigned URL

actor "Client" as Client
participant MediaController
participant MediaService
participant S3Service
participant ParseFilePipeWithUnlink
database LocalStorage
database AWS_S3

== POST /media/images/upload - Upload Files ==
Client -> MediaController: POST /media/images/upload + files
note right
Upload Request:
• Multipart form data
• Max 100 files
• Max 5MB per file
• Supported types: jpg, jpeg, png, webp
end note

MediaController -> ParseFilePipeWithUnlink: Validate files
ParseFilePipeWithUnlink -> ParseFilePipeWithUnlink: File validation
note right
File Validation:
• MaxFileSizeValidator: 1MB per file
• FileTypeValidator: jpg, jpeg, png, webp
• Skip magic numbers validation
• Auto cleanup on validation failure
end note

alt File validation passed
    ParseFilePipeWithUnlink --> MediaController: Validated files
    MediaController -> MediaService: uploadFile(files)

    MediaService -> MediaService: Process files in parallel
    note right
    File Processing:
    • Map files to S3 upload promises
    • Generate random filenames
    • Upload to S3 with proper paths
    • Handle multiple files concurrently
    end note

    loop For each file
        MediaService -> S3Service: uploadedFile({filename, filepath, contentType})
        S3Service -> S3Service: Prepare S3 upload
        note right
        S3 Upload Preparation:
        • Generate S3 key: 'images/' + filename
        • Read file from local path
        • Set proper content type
        • Upload to S3 bucket
        end note

        S3Service -> AWS_S3: Upload file to S3
        AWS_S3 --> S3Service: Upload result với Location
        S3Service --> MediaService: S3 upload response

        MediaService -> MediaService: Extract S3 URL
        note right
        URL Extraction:
        • Get Location từ S3 response
        • Return public S3 URL
        • Handle upload success/failure
        end note
    end

    MediaService -> MediaService: Cleanup local files
    note right
    Local File Cleanup:
    • Delete temporary files sau khi upload
    • Use Promise.all cho parallel deletion
    • Ensure no local file leaks
    end note

    MediaService -> LocalStorage: unlink(file.path) cho mỗi file
    LocalStorage --> MediaService: Files deleted

    MediaService --> MediaController: Upload results
    MediaController --> Client: JSON với URLs

else File validation failed
    ParseFilePipeWithUnlink -> ParseFilePipeWithUnlink: Auto cleanup files
    ParseFilePipeWithUnlink -> LocalStorage: unlink(file.path)
    LocalStorage --> ParseFilePipeWithUnlink: Files deleted
    ParseFilePipeWithUnlink --> MediaController: ValidationException
    MediaController --> Client: 400 Bad Request
end

== GET /media/static/:filename - Serve Static Files ==
Client -> MediaController: GET /media/static/:filename
MediaController -> MediaController: serveFile(filename, res)
note right
Static File Serving:
• Serve files từ local UPLOAD_DIR
• Public access (no authentication)
• Handle file not found errors
• Direct file streaming
end note

MediaController -> LocalStorage: Check file exists
LocalStorage --> MediaController: File status

alt File exists
    MediaController -> Client: Send file stream
    Client -> Client: Display/download file
else File not found
    MediaController -> Client: 404 Not Found
end

== POST /media/images/upload/presigned-url - Generate Presigned URL ==
Client -> MediaController: POST /media/images/upload/presigned-url + {filename, filesize}
MediaController -> MediaService: getPresignUrl(body)

MediaService -> MediaService: Validate request body
note right
Presigned URL Validation:
• filename: required string
• filesize: max 1MB
• Zod schema validation
end note

alt Validation passed
    MediaService -> MediaService: generateRandomFilename(filename)
    note right
    Filename Generation:
    • Generate unique random filename
    • Prevent filename conflicts
    • Maintain file extension
    • Ensure security
    end note

    MediaService -> S3Service: createPresignedUrlWithClient(randomFilename)
    S3Service -> S3Service: Generate presigned URL
    note right
    Presigned URL Generation:
    • Create S3 presigned URL
    • Set proper expiration
    • Allow direct upload to S3
    • Secure access control
    end note

    S3Service -> AWS_S3: Generate presigned URL
    AWS_S3 --> S3Service: Presigned URL
    S3Service --> MediaService: Presigned URL

    MediaService -> MediaService: Extract base URL
    note right
    URL Processing:
    • Split presigned URL
    • Extract base URL without query params
    • Return both presigned và base URLs
    end note

    MediaService --> MediaController: Presigned URL response
    MediaController --> Client: JSON với presignedUrl và url

else Validation failed
    MediaService --> MediaController: ValidationException
    MediaController --> Client: 400 Bad Request
end

== File Storage Management ==
alt Local storage operations
    MediaController -> LocalStorage: Check UPLOAD_DIR exists
    note right
    Directory Management:
    • Auto-create UPLOAD_DIR if not exists
    • Ensure proper permissions
    • Handle directory creation errors
    end note
    LocalStorage --> MediaController: Directory status
end

alt S3 operations
    S3Service -> AWS_S3: Upload/Download operations
    note right
    S3 Integration:
    • Direct upload to S3 bucket
    • Presigned URL generation
    • File metadata management
    • Error handling
    end note
    AWS_S3 --> S3Service: S3 operation results
end

== Xử Lý Lỗi & Validation ==
alt Lỗi file validation
    ParseFilePipeWithUnlink --> MediaController: ValidationException
    MediaController --> Client: 400 Bad Request
    note right
    File Validation Errors:
    • File size too large
    • Invalid file type
    • File corruption
    • Auto cleanup on failure
    end note

else Lỗi S3 upload
    S3Service --> MediaService: S3UploadException
    MediaService --> MediaController: Error response
    MediaController --> Client: 500 Internal Server Error
    note right
    S3 Upload Errors:
    • Network connectivity issues
    • S3 bucket access denied
    • File upload timeout
    • Invalid credentials
    end note

else Lỗi file not found
    MediaController --> Client: 404 Not Found
    note right
    File Not Found:
    • Static file không tồn tại
    • Clear error message
    • Proper HTTP status
    end note

else Lỗi presigned URL generation
    S3Service --> MediaService: PresignedUrlException
    MediaService --> MediaController: Error response
    MediaController --> Client: 500 Internal Server Error
    note right
    Presigned URL Errors:
    • S3 service unavailable
    • Invalid bucket configuration
    • Permission issues
    • Network errors
    end note
end

== Trả Kết Quả ==
MediaService -> MediaService: Tạo thông báo đa ngôn ngữ (I18nService)
MediaService --> MediaController: Response + Message đã localize
MediaController --> Client: JSON Response với metadata đầy đủ

note bottom
**Đặc điểm chính của module Media:**
• File upload với validation và auto cleanup
• S3 integration cho cloud storage
• Presigned URL generation cho direct upload
• Static file serving từ local storage
• Parallel file processing
• Comprehensive error handling
• File type và size validation
• Auto directory creation
• Multi-language support
• Security với random filenames
end note

@enduml
