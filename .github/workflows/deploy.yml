name: CI/CD Pipeline

on:
  push:
    branches: [master, develop]
  workflow_dispatch:
    inputs:
      manual_rollback:
        description: 'Commit SHA ho·∫∑c tag ƒë·ªÉ rollback'
        required: false

jobs:
  build:
    name: Build & Test
    runs-on: ubuntu-latest
    if: github.ref_name == 'master'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: dist
          key: ${{ runner.os }}-build-${{ github.sha }}
          restore-keys: ${{ runner.os }}-build-

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

  deploy:
    name: Deploy to Production
    needs: build
    runs-on: ubuntu-latest
    if: ${{ github.ref_name == 'master' && (github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && !github.event.inputs.manual_rollback)) }}
    environment: staging
    env:
      NODE_ENV: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: dist
          key: ${{ runner.os }}-build-${{ github.sha }}
          restore-keys: ${{ runner.os }}-build-

      - name: Deploy via SSH & PM2
        id: ssh_deploy
        run: |
          sshpass -p "${{ secrets.STAGING_VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.STAGING_VPS_USERNAME }}@${{ secrets.STAGING_VPS_IP_HOST }} << 'EOF'
            set -euo pipefail
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
            cd ${{ secrets.STAGING_PATH_PROJECT }}
            git fetch origin master && git reset --hard origin/master
            npm ci
            [ -d dist ] || npm run build
            pm2 restart server-shopsifu || pm2 start dist/index.js --name server-shopsifu
            sleep 5
            STATUS=$(pm2 jlist | jq -r '.[] | select(.name == "server-shopsifu") | .pm2_env.status')
            echo "$STATUS" > /tmp/app_status.txt
            pm2 jlist > /tmp/pm2_status.json
            pm2 logs server-shopsifu --lines 300 --nostream > /tmp/pm2_logs.txt
            [ "$STATUS" = "online" ] || exit 2
          EOF
        continue-on-error: true

      - name: Get Commit Info
        id: commit_info
        run: |
          echo "commit_sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          COMMIT_MESSAGE=$(git log -1 --pretty=%B | grep -v '^-')
          echo "commit_message=$COMMIT_MESSAGE" >> $GITHUB_OUTPUT

      - name: Send Discord Notification
        if: always()
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          STATUS: ${{ job.status }}
          BRANCH: ${{ github.ref_name }}
          COMMIT: ${{ github.sha }}
          ACTOR: ${{ github.actor }}
          REPO: ${{ github.repository }}
          COMMIT_SHA: ${{ steps.commit_info.outputs.commit_sha }}
          COMMIT_MESSAGE: ${{ steps.commit_info.outputs.commit_message }}
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          COLOR=$([ "$STATUS" = "success" ] && echo 3066993 || echo 15158332)
          ICON=$([ "$STATUS" = "success" ] && echo "‚úÖ" || echo "‚ùå")
          RUN_STARTED_AT=$(date -d "${{ github.run_started_at }}" +%s)
          JSON_PAYLOAD=$(jq -n \
            --arg status "$STATUS" \
            --arg icon "$ICON" \
            --arg branch "$BRANCH" \
            --arg commit "$COMMIT" \
            --arg commit_sha "$COMMIT_SHA" \
            --arg commit_message "$COMMIT_MESSAGE" \
            --arg repo "$REPO" \
            --arg actor "$ACTOR" \
            --arg run_id "${{ github.run_id }}" \
            --arg color "$COLOR" \
            --arg started_at "$RUN_STARTED_AT" \
            '{
              content: "@everyone",
              embeds: [{
                title: "üöÄ SERVER - Th√¥ng b√°o tri·ªÉn khai ‚ú®",
                color: ($color | tonumber),
                fields: [
                  { name: "Tr·∫°ng th√°i", value: "\($icon) \($status)", inline: true },
                  { name: "Nh√°nh", value: "`\($branch)`", inline: true },
                  { name: "Commit", value: "[`\($commit)`](https://github.com/\($repo)/commit/\($commit))", inline: false },
                  { name: "Commit SHA", value: "`\($commit_sha)`", inline: false },
                  { name: "Commit Message", value: $commit_message, inline: false },
                  { name: "Ng∆∞·ªùi th·ª±c hi·ªán", value: "`\($actor)`", inline: true },
                  { name: "Th·ªùi gian b·∫Øt ƒë·∫ßu", value: "<t:\($started_at):R>", inline: true }
                ],
                url: "https://github.com/\($repo)/actions/runs/\($run_id)"
              }]
            }')
          curl -s -H "Content-Type: application/json" -X POST -d "$JSON_PAYLOAD" "$DISCORD_WEBHOOK"

  notify-develop:
  name: Notify Develop Push
  runs-on: ubuntu-latest
  if: github.ref_name == 'develop'
  steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Fetch to√†n b·ªô l·ªãch s·ª≠ commit ƒë·ªÉ ƒë·∫£m b·∫£o git log ho·∫°t ƒë·ªông

    - name: Check commit range
      id: check_commit
      run: |
        if [ -z "${{ github.event.before }}" ] || ! git rev-parse --verify ${{ github.event.before }} >/dev/null 2>&1; then
          echo "No valid previous commit found, using current commit only"
          echo "commit_range=${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "commit_log=No previous commits available for comparison" >> $GITHUB_OUTPUT
        else
          echo "commit_range=${{ github.event.before }}..${{ github.sha }}" >> $GITHUB_OUTPUT
          COMMIT_LOG=$(git log --pretty=format:'- [`%h`](https://github.com/${{ github.repository }}/commit/%H) %s ‚Äî _%an_' ${{ github.event.before }}..${{ github.sha }} || echo "No new commits found")
          echo "commit_log<<EOF" >> $GITHUB_ENV
          echo "$COMMIT_LOG" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        fi
      shell: /usr/bin/bash -e {0}

    - name: Send Discord Notification
      uses: Ilshidur/action-discord@master
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      with:
        webhook: ${{ secrets.DISCORD_WEBHOOK }}
        message: |
          @everyone
          üß™ **Commit m·ªõi tr√™n nh√°nh `develop`**
          **Ng∆∞·ªùi th·ª±c hi·ªán:** `${{ github.actor }}`
          **Danh s√°ch commit:**
          ${{ env.commit_log }}

permissions:
  contents: write
