name: CI/CD Pipeline Optimized

on:
  push:
    branches: [master]
  workflow_dispatch:
    inputs:
      manual_rollback:
        description: 'Commit SHA ho·∫∑c tag ƒë·ªÉ rollback'
        required: false

permissions:
  contents: write

jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && !github.event.inputs.manual_rollback) }}
    environment: staging
    env:
      NODE_ENV: staging
    steps:
      - name: Record Job Start Time
        id: start_time
        run: echo "timestamp_utc=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT

      - name: Deploy via SSH & Get Server Status
        id: ssh_deploy
        run: |
          sshpass -p "${{ secrets.STAGING_VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.STAGING_VPS_USERNAME }}@${{ secrets.STAGING_VPS_IP_HOST }} << 'EOF'
            set -euo pipefail
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"

            cd ${{ secrets.STAGING_PATH_PROJECT }}
            git fetch origin master && git reset --hard origin/master
            npm ci
            npm run build
            pm2 startOrReload ecosystem.config.js --env production
            sleep 5

            # Ch·ªâ l·∫•y d·ªØ li·ªáu JSON th√¥ t·ª´ server
            pm2 jlist > /tmp/pm2_status.json

            # C√†i jq tr√™n server ch·ªâ ƒë·ªÉ ki·ªÉm tra status (n·∫øu c·∫ßn)
            if ! command -v jq &> /dev/null; then sudo apt-get update && sudo apt-get install -y jq; fi
            STATUS=$(cat /tmp/pm2_status.json | jq -r '(.[] | select(.name == "server-shopsifu")).pm2_env.status' | head -n 1)
            [ "$STATUS" = "online" ] || exit 2
          EOF
        continue-on-error: true

      - name: Collect and Format PM2 Status
        if: always()
        id: pm2_status
        run: |
          # L·∫•y file JSON th√¥ t·ª´ server v·ªÅ runner
          PM2_JSON=$(sshpass -p "${{ secrets.STAGING_VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.STAGING_VPS_USERNAME }}@${{ secrets.STAGING_VPS_IP_HOST }} 'cat /tmp/pm2_status.json' || echo "[]")

          # D√πng jq tr√™n runner ƒë·ªÉ t·∫°o b·∫£ng tr·∫°ng th√°i t√πy ch·ªânh
          PM2_CONSOLE_OUTPUT=$(echo "$PM2_JSON" | jq -r '"ID  | Name                | Status", "----|---------------------|---------", (.[] | "\(.pm_id | tostring | rpad(3)) | \(.name | rpad(19)) | \(.pm2_env.status)")')

          echo "pm2_console_output<<EOF" >> $GITHUB_OUTPUT
          echo "$PM2_CONSOLE_OUTPUT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Get Commit Info
        id: commit_info
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          echo "commit_message<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMIT_MESSAGE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        id: get_commit_message

      - name: Send Discord Notification
        if: always()
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          STATUS: ${{ job.status }}
          BRANCH: ${{ github.ref_name }}
          COMMIT: ${{ github.sha }}
          ACTOR: ${{ github.actor }}
          REPO: ${{ github.repository }}
          RUN_ID: ${{ github.run_id }}
          PM2_STATUS_OUTPUT: ${{ steps.pm2_status.outputs.pm2_console_output }}
          COMMIT_MESSAGE: ${{ steps.get_commit_message.outputs.commit_message }}
          JOB_STARTED_AT: ${{ steps.start_time.outputs.timestamp_utc }}
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          COLOR=$([ "$STATUS" = "success" ] && echo 3066993 || echo 15158332)
          ICON=$([ "$STATUS" = "success" ] && echo "‚úÖ" || echo "‚ùå")
          STARTED_AT_EPOCH=$(date -d "$JOB_STARTED_AT" +%s)

          # D·ªãch c√°c m√£ emoji ph·ªï bi·∫øn th√†nh k√Ω t·ª± th·∫≠t
          MESSAGE_WITH_ICONS="$COMMIT_MESSAGE"
          MESSAGE_WITH_ICONS="${MESSAGE_WITH_ICONS//:sparkles:/‚ú®}"
          MESSAGE_WITH_ICONS="${MESSAGE_WITH_ICONS//:rocket:/üöÄ}"
          MESSAGE_WITH_ICONS="${MESSAGE_WITH_ICONS//:bug:/üêõ}"
          MESSAGE_WITH_ICONS="${MESSAGE_WITH_ICONS//:memo:/üìù}"
          MESSAGE_WITH_ICONS="${MESSAGE_WITH_ICONS//:zap:/‚ö°}"

          JSON_PAYLOAD=$(jq -n \
            --arg status "$STATUS" \
            --arg icon "$ICON" \
            --arg branch "$BRANCH" \
            --arg commit_short "$(echo $COMMIT | cut -c1-7)" \
            --arg commit_full "$COMMIT" \
            --arg commit_message "$MESSAGE_WITH_ICONS" \
            --arg repo "$REPO" \
            --arg actor "$ACTOR" \
            --arg pm2_status "${PM2_STATUS_OUTPUT:0:1800}" \
            --arg run_id "$RUN_ID" \
            --arg color "$COLOR" \
            --arg started_at "$STARTED_AT_EPOCH" \
            '{
              embeds: [{
                title: "üöÄ SERVER - Th√¥ng b√°o tri·ªÉn khai ‚ú®",
                color: ($color | tonumber),
                fields: [
                  { name: "Tr·∫°ng th√°i", value: "\($icon) \($status | ascii_upcase)", inline: true },
                  { name: "Nh√°nh", value: "`\($branch)`", inline: true },
                  { name: "Ng∆∞·ªùi th·ª±c hi·ªán", value: "`\($actor)`", inline: true },
                  { name: "Commit", value: "[`\($commit_short)`](https://github.com/\($repo)/commit/\($commit_full))", inline: false },
                  { name: "N·ªôi dung Commit", value: "```\n\($commit_message)\n```", inline: false },
                  { name: "Th·ªùi gian", value: "<t:\($started_at):R>", inline: true }
                ],
                description: "**Tr·∫°ng th√°i PM2 tr√™n server:**\n```\n\($pm2_status)\n```",
                url: "https://github.com/\($repo)/actions/runs/\($run_id)",
                footer: {
                  "text": "Tri·ªÉn khai t·ªõi m√¥i tr∆∞·ªùng Staging"
                },
                "timestamp": (now | strftime("%Y-%m-%dT%H:%M:%SZ"))
              }]
            }')
          curl -s -H "Content-Type: application/json" -X POST -d "$JSON_PAYLOAD" "$DISCORD_WEBHOOK" || echo "L·ªói g·ª≠i th√¥ng b√°o Discord"

  rollback-auto:
    name: Automatic Rollback
    needs: deploy
    runs-on: ubuntu-latest
    if: failure()
    steps:
      - name: Rollback to previous commit
        run: |
          sshpass -p "${{ secrets.STAGING_VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.STAGING_VPS_USERNAME }}@${{ secrets.STAGING_VPS_IP_HOST }} << 'EOF'
            set -euo pipefail
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
            cd ${{ secrets.STAGING_PATH_PROJECT }}
            git fetch origin master && git reset --hard HEAD~1
            npm ci
            npm run build
            pm2 startOrReload ecosystem.config.js --env production
          EOF

  manual-rollback:
    name: Manual Rollback
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.manual_rollback
    runs-on: ubuntu-latest
    steps:
      - name: Re-deploy to VPS
        run: |
          sshpass -p "${{ secrets.STAGING_VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.STAGING_VPS_USERNAME }}@${{ secrets.STAGING_VPS_IP_HOST }} << 'EOF'
            set -euo pipefail
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
            cd ${{ secrets.STAGING_PATH_PROJECT }}
            git fetch --all
            git reset --hard ${{ github.event.inputs.manual_rollback }}
            npm ci
            npm run build
            pm2 startOrReload ecosystem.config.js --env production
          EOF
