name: Build and Deploy

on:
  push:
    branches: [main, master]
  workflow_dispatch:
    inputs:
      manual_rollback:
        description: 'Commit SHA ho·∫∑c tag ƒë·ªÉ rollback'
        required: false

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: tedydev-web/server-shopsifu

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./ci/Dockerfile.prod
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  deploy-production:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Deploy to production VPS via SSH (docker-compose)
        env:
          VPS_USER: ${{ secrets.STAGING_VPS_USERNAME }}
          VPS_HOST: ${{ secrets.STAGING_VPS_IP_HOST }}
          VPS_PASS: ${{ secrets.STAGING_VPS_PASSWORD }}
          PROJECT_PATH: ${{ secrets.STAGING_PATH_PROJECT }}
        run: |
          sshpass -p "$VPS_PASS" ssh -o StrictHostKeyChecking=no $VPS_USER@$VPS_HOST "export PROJECT_PATH='$PROJECT_PATH' && set -euo pipefail && cd \$PROJECT_PATH && git fetch origin master && git reset --hard origin/master && docker-compose pull && docker-compose build --no-cache server && docker-compose down && docker-compose up -d --force-recreate --build server && sleep 10 && docker-compose logs server && docker-compose ps"

      - name: Get commit details
        id: commit
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          # Th·ª≠ l·∫•y t·ª´ GitHub event tr∆∞·ªõc (·ªïn ƒë·ªãnh cho workflow_dispatch)
          COMMIT_MESSAGE="${{ github.event.head_commit.message || '' }}"
          COMMIT_AUTHOR="${{ github.event.head_commit.author.name || '' }}"
          COMMIT_DATE="${{ github.event.head_commit.timestamp || '' }}"

          # N·∫øu thi·∫øu, fallback sang git (ƒë√£ checkout repo)
          if [ -z "$COMMIT_MESSAGE" ]; then
            COMMIT_MESSAGE=$(git log -1 --pretty=format:"%s" || true)
          fi
          if [ -z "$COMMIT_AUTHOR" ]; then
            COMMIT_AUTHOR=$(git log -1 --pretty=format:"%an" || true)
          fi
          if [ -z "$COMMIT_DATE" ]; then
            COMMIT_DATE=$(git log -1 --pretty=format:"%cd" --date=relative || true)
          fi

          echo "message=$COMMIT_MESSAGE" >> $GITHUB_OUTPUT
          echo "author=$COMMIT_AUTHOR" >> $GITHUB_OUTPUT
          echo "date=$COMMIT_DATE" >> $GITHUB_OUTPUT

      - name: Send Discord Notification
        if: always()
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          STATUS: ${{ job.status }}
          BRANCH: ${{ github.ref_name }}
          COMMIT: ${{ github.sha }}
          ACTOR: ${{ github.actor }}
          REPO: ${{ github.repository }}
          RUN_ID: ${{ github.run_id }}
          VPS_USER: ${{ secrets.STAGING_VPS_USERNAME }}
          VPS_HOST: ${{ secrets.STAGING_VPS_IP_HOST }}
          VPS_PASS: ${{ secrets.STAGING_VPS_PASSWORD }}
          PROJECT_PATH: ${{ secrets.STAGING_PATH_PROJECT }}
          COMMIT_MESSAGE: ${{ steps.commit.outputs.message }}
          COMMIT_AUTHOR: ${{ steps.commit.outputs.author }}
          COMMIT_DATE: ${{ steps.commit.outputs.date }}
        run: |
          sudo apt-get update && sudo apt-get install -y jq

          # L·∫•y th√¥ng tin PM2 t·ª´ server
          PM2_STATUS=""
          if [ "$STATUS" = "success" ]; then
            PM2_STATUS=$(sshpass -p "$VPS_PASS" ssh -o StrictHostKeyChecking=no $VPS_USER@$VPS_HOST "cd $PROJECT_PATH && pm2 list --no-daemon" 2>/dev/null || echo "Kh√¥ng th·ªÉ k·∫øt n·ªëi PM2")
          fi

          COLOR=$([ "$STATUS" = "success" ] && echo 3066993 || echo 15158332)
          ICON=$([ "$STATUS" = "success" ] && echo "‚úÖ" || echo "‚ùå")

          # T·∫°o description chi ti·∫øt
          DESCRIPTION=""
          if [ "$STATUS" = "success" ]; then
            DESCRIPTION="üöÄ **SERVER - Th√¥ng b√°o tri·ªÉn khai ‚ú®**\n\n**Tr·∫°ng th√°i PM2 tr√™n server:**\n$PM2_STATUS"
          else
            DESCRIPTION="‚ùå **Deployment th·∫•t b·∫°i**\n\nChi ti·∫øt l·ªói c√≥ th·ªÉ xem t·∫°i GitHub Actions."
          fi

          # X·ª≠ l√Ω commit message ƒë·ªÉ gi·ªØ nguy√™n emoji v√† k√Ω t·ª± ƒë·∫∑c bi·ªát
          COMMIT_MESSAGE_ESCAPED=$(echo "$COMMIT_MESSAGE" | sed 's/"/\\"/g')

          # Nh·∫≠n di·ªán Conventional Commits v√† th√™m emoji ph√π h·ª£p
          # Conventional Commits Emoji Reference:
          # ‚ú® feat: new feature
          # üêõ fix: bug fix
          # üìö docs: documentation
          # üíÑ style: formatting, missing semi colons, etc
          # ‚ôªÔ∏è refactor: refactoring production code
          # üß™ test: adding tests, refactoring tests
          # üîß chore: updating build tasks, package manager configs
          # ‚ö° perf: performance improvements
          # üë∑ ci: changes to CI configuration files and scripts
          # üì¶ build: changes that affect the build system or external dependencies
          # ‚è™ revert: reverts a previous commit
          # üîí security: security fixes
          # üìù default: other changes
          COMMIT_TYPE_ICON=""
          if [[ "$COMMIT_MESSAGE" =~ ^feat ]]; then
            COMMIT_TYPE_ICON="‚ú®"
          elif [[ "$COMMIT_MESSAGE" =~ ^fix ]]; then
            COMMIT_TYPE_ICON="üêõ"
          elif [[ "$COMMIT_MESSAGE" =~ ^docs ]]; then
            COMMIT_TYPE_ICON="üìö"
          elif [[ "$COMMIT_MESSAGE" =~ ^style ]]; then
            COMMIT_TYPE_ICON="üíÑ"
          elif [[ "$COMMIT_MESSAGE" =~ ^refactor ]]; then
            COMMIT_TYPE_ICON="‚ôªÔ∏è"
          elif [[ "$COMMIT_MESSAGE" =~ ^test ]]; then
            COMMIT_TYPE_ICON="üß™"
          elif [[ "$COMMIT_MESSAGE" =~ ^chore ]]; then
            COMMIT_TYPE_ICON="üîß"
          elif [[ "$COMMIT_MESSAGE" =~ ^perf ]]; then
            COMMIT_TYPE_ICON="‚ö°"
          elif [[ "$COMMIT_MESSAGE" =~ ^ci ]]; then
            COMMIT_TYPE_ICON="üë∑"
          elif [[ "$COMMIT_MESSAGE" =~ ^build ]]; then
            COMMIT_TYPE_ICON="üì¶"
          elif [[ "$COMMIT_MESSAGE" =~ ^revert ]]; then
            COMMIT_TYPE_ICON="‚è™"
          elif [[ "$COMMIT_MESSAGE" =~ ^security ]]; then
            COMMIT_TYPE_ICON="üîí"
          else
            COMMIT_TYPE_ICON="üìù"
          fi

          # T·∫°o commit message v·ªõi icon
          COMMIT_DISPLAY="$COMMIT_TYPE_ICON $COMMIT_MESSAGE_ESCAPED"

          JSON_PAYLOAD=$(jq -n \
            --arg status "$STATUS" \
            --arg icon "$ICON" \
            --arg branch "$BRANCH" \
            --arg commit_short "$(echo $COMMIT | cut -c1-7)" \
            --arg commit_full "$COMMIT" \
            --arg repo "$REPO" \
            --arg actor "$ACTOR" \
            --arg run_id "$RUN_ID" \
            --arg color "$COLOR" \
            --arg description "$DESCRIPTION" \
            --arg commit_message "$COMMIT_DISPLAY" \
            --arg commit_author "$COMMIT_AUTHOR" \
            --arg commit_date "$COMMIT_DATE" \
            ' {
              embeds: [{
                title: "üöÄ SERVER - Th√¥ng b√°o tri·ªÉn khai ‚ú®",
                description: $description,
                color: ($color | tonumber),
                fields: [
                  { name: "üìä Tr·∫°ng th√°i", value: "\($icon) \($status | ascii_upcase)", inline: true },
                  { name: "üåø Nh√°nh", value: "`\($branch)`", inline: true },
                  { name: "üë§ Ng∆∞·ªùi th·ª±c hi·ªán", value: "`\($actor)`", inline: true },
                  { name: "üîó Commit", value: "[`\($commit_short)`](https://github.com/\($repo)/commit/\($commit_full))", inline: false },
                  { name: "üìù N·ªôi dung Commit", value: "\($commit_message)", inline: false }
                ],
                url: "https://github.com/\($repo)/actions/runs/\($run_id)",
                footer: { "text": "üöÄ Tri·ªÉn khai t·ªõi m√¥i tr∆∞·ªùng Production ‚Ä¢ \($commit_date)" },
                "timestamp": (now | strftime("%Y-%m-%dT%H:%M:%SZ"))
              }]
            }')
          curl -s -H "Content-Type: application/json" -X POST -d "$JSON_PAYLOAD" "$DISCORD_WEBHOOK" || echo "L·ªói g·ª≠i th√¥ng b√°o Discord"

  rollback-auto:
    name: Automatic Rollback
    needs: deploy-production
    runs-on: ubuntu-latest
    if: failure()
    steps:
      - name: Rollback to previous commit (production)
        env:
          VPS_USER: ${{ secrets.STAGING_VPS_USERNAME }}
          VPS_HOST: ${{ secrets.STAGING_VPS_IP_HOST }}
          VPS_PASS: ${{ secrets.STAGING_VPS_PASSWORD }}
          PROJECT_PATH: ${{ secrets.STAGING_PATH_PROJECT }}
        run: |
          sshpass -p "$VPS_PASS" ssh -o StrictHostKeyChecking=no $VPS_USER@$VPS_HOST "export PROJECT_PATH='$PROJECT_PATH' && set -euo pipefail && cd \$PROJECT_PATH && git fetch origin master && git reset --hard HEAD~1 && docker-compose pull && docker-compose down && docker-compose up -d --force-recreate"

  manual-rollback:
    name: Manual Rollback
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.manual_rollback
    runs-on: ubuntu-latest
    steps:
      - name: Re-deploy to VPS (manual rollback)
        env:
          VPS_USER: ${{ secrets.STAGING_VPS_USERNAME }}
          VPS_HOST: ${{ secrets.STAGING_VPS_IP_HOST }}
          VPS_PASS: ${{ secrets.STAGING_VPS_PASSWORD }}
          PROJECT_PATH: ${{ secrets.STAGING_PATH_PROJECT }}
        run: |
          sshpass -p "$VPS_PASS" ssh -o StrictHostKeyChecking=no $VPS_USER@$VPS_HOST "export PROJECT_PATH='$PROJECT_PATH' && set -euo pipefail && cd \$PROJECT_PATH && git fetch --all && git reset --hard ${{ github.event.inputs.manual_rollback }} && docker-compose pull && docker-compose down && docker-compose up -d --force-recreate"
