name: Build and Deploy

on:
  push:
    branches: [main, master]
  workflow_dispatch:
    inputs:
      manual_rollback:
        description: 'Commit SHA hoặc tag để rollback'
        required: false

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: tedydev-web/server-shopsifu

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: read
      packages: write
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.source=${{ github.repository }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Prepare build metadata
        id: prep
        shell: bash
        run: |
          echo "date=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> "$GITHUB_OUTPUT"
          echo "version=${GITHUB_REF_NAME:-unknown}" >> "$GITHUB_OUTPUT"

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILD_VERSION=${{ steps.prep.outputs.version }}
            BUILD_DATE=${{ steps.prep.outputs.date }}
            GIT_SHA=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          provenance: false

  deploy-production:
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Deploy to production VPS via SSH (key-based)
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.STAGING_VPS_IP_HOST }}
          username: ${{ secrets.STAGING_VPS_USERNAME }}
          key: ${{ secrets.STAGING_VPS_SSH_KEY }}
          script: |
            export PROJECT_PATH='${{ secrets.STAGING_PATH_PROJECT }}'
            set -euo pipefail
            cd "$PROJECT_PATH"

            # Thiết lập & persist kernel sysctl trên host (cần sudo quyền)
            sudo tee /etc/sysctl.d/90-shopsifu-performance.conf >/dev/null <<'EOF'
            vm.max_map_count = 262144
            fs.file-max = 1048576
            net.core.somaxconn = 16384
            EOF
            sudo sysctl --system || true

            # Bảo đảm repo đồng bộ tuyệt đối
            git fetch --prune --tags origin master
            git reset --hard origin/master

            # Đăng nhập GHCR để pull image
            echo '${{ secrets.GITHUB_TOKEN }}' | docker login ghcr.io -u '${{ github.actor }}' --password-stdin

            # Pin image theo digest build từ job trước
            export SERVER_IMAGE="ghcr.io/${{ env.IMAGE_NAME }}@${{ needs.build.outputs.image-digest }}"

            # Dùng đúng file môi trường production
            docker compose --env-file .env.docker pull
            # Không fail sớm nếu có service chưa kịp healthy để còn có log chẩn đoán
            docker compose --env-file .env.docker up -d --force-recreate || true

            # Kiểm tra nhanh trạng thái sau deploy
            sleep 20
            docker compose ps
            # Nếu server KHÔNG Up, in log để chẩn đoán
            if ! docker compose ps server | grep -qi 'Up'; then
              echo '--- Server logs (last 200 lines) ---'
              docker compose logs --tail=200 server | cat || true
            fi
            # Nếu Elasticsearch KHÔNG healthy (unhealthy/exit/restarting), in log để chẩn đoán
            if ! docker compose ps elasticsearch | grep -qi 'healthy'; then
              echo '--- Elasticsearch logs (last 200 lines) ---'
              docker compose logs --tail=200 elasticsearch | cat || true
            fi

      - name: Health check (internal via SSH, retry)
        id: internal_health
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.STAGING_VPS_IP_HOST }}
          username: ${{ secrets.STAGING_VPS_USERNAME }}
          key: ${{ secrets.STAGING_VPS_SSH_KEY }}
          script: |
            set -euo pipefail
            ATTEMPTS=15
            SLEEP=5
            for i in $(seq 1 $ATTEMPTS); do
              echo "[Internal] Attempt $i/$ATTEMPTS..."
              CODE=$(curl -fsS -m 5 -o /dev/null -w "%{http_code}" http://localhost:3000/health || echo "000")
              if [ "$CODE" -ge 200 ] && [ "$CODE" -lt 300 ]; then
                echo "[Internal] ✅ Health check passed with code $CODE"
                exit 0
              fi
              sleep $SLEEP
            done
            echo "[Internal] ❌ Health check failed after $ATTEMPTS attempts"
            exit 1

      - name: Health check (external, best-effort)
        id: health
        continue-on-error: true
        env:
          HEALTHCHECK_URL: ${{ secrets.HEALTHCHECK_URL || 'https://api.shopsifu.live/health' }}
        run: |
          set -euo pipefail

          URL="${HEALTHCHECK_URL:-https://api.shopsifu.live/health}"
          echo "Healthcheck URL: $URL"

          # Retry up to 15 times, wait 5s between attempts (total ~75s)
          ATTEMPTS=15
          SLEEP=5
          PASS=0

          for i in $(seq 1 $ATTEMPTS); do
            echo "Attempt $i/$ATTEMPTS..."
            # Accept any 2xx as success
            CODE=$(curl -fsS -m 5 -o /dev/null -w "%{http_code}" "$URL" || echo "000")
            if [ "$CODE" -ge 200 ] && [ "$CODE" -lt 300 ]; then
              PASS=1
              break
            fi
            sleep $SLEEP
          done

          if [ "$PASS" -eq 1 ]; then
            echo "result=success" >> $GITHUB_OUTPUT
            echo "✅ (External) Health check passed with code $CODE"
          else
            echo "result=failure" >> $GITHUB_OUTPUT
            echo "⚠️ (External) Health check failed after $ATTEMPTS attempts (có thể do WAF)" >&2
          fi

      - name: Get commit details (range-aware)
        id: commit
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail

          # Bảo đảm đầy đủ lịch sử để truy vấn phạm vi commit
          git fetch --prune --unshallow || true
          git fetch --all --tags || true

          CURRENT_SHA="${{ github.sha }}"
          BEFORE_SHA="${{ github.event.before }}"

          # Fallback nếu BEFORE_SHA trống (ví dụ workflow_dispatch)
          if [ -z "$BEFORE_SHA" ] || ! git rev-parse --verify "$BEFORE_SHA^{commit}" >/dev/null 2>&1; then
            BEFORE_SHA=$(git rev-parse "$CURRENT_SHA^" 2>/dev/null || echo "")
          fi

          # Lấy thông tin commit HEAD
          COMMIT_MESSAGE=$(git log -1 --pretty=format:"%s" "$CURRENT_SHA" || true)
          COMMIT_AUTHOR=$(git log -1 --pretty=format:"%an" "$CURRENT_SHA" || true)
          COMMIT_DATE=$(git log -1 --pretty=format:"%cd" --date=iso-strict "$CURRENT_SHA" || date -u +%Y-%m-%dT%H:%M:%SZ)

          # Tạo danh sách commit giữa BEFORE..CURRENT (không bao gồm BEFORE)
          COMMIT_RANGE=""
          if [ -n "$BEFORE_SHA" ]; then
            COMMIT_RANGE=$(git rev-list --reverse "$BEFORE_SHA..$CURRENT_SHA" 2>/dev/null || echo "")
          fi

          COMMIT_LOG=""
          if [ -n "$COMMIT_RANGE" ]; then
            while read -r SHA; do
              [ -z "$SHA" ] && continue
              MSG=$(git log -1 --pretty=format:"%s" "$SHA")
              AUTHOR=$(git log -1 --pretty=format:"%an" "$SHA")
              COMMIT_LOG+="- [\`$(echo "$SHA" | cut -c1-7)\`](https://github.com/${{ github.repository }}/commit/$SHA) $MSG — _${AUTHOR}_\n"
            done <<< "$COMMIT_RANGE"
          else
            # Không có phạm vi (single commit)
            SHORT=$(echo "$CURRENT_SHA" | cut -c1-7)
            COMMIT_LOG="- [\`$SHORT\`](https://github.com/${{ github.repository }}/commit/$CURRENT_SHA) $COMMIT_MESSAGE — _${COMMIT_AUTHOR}_\n"
          fi

          # Xuất output cho step sau
          echo "message=$COMMIT_MESSAGE" >> $GITHUB_OUTPUT
          echo "author=$COMMIT_AUTHOR" >> $GITHUB_OUTPUT
          echo "date=$COMMIT_DATE" >> $GITHUB_OUTPUT
          echo "log<<EOF" >> $GITHUB_OUTPUT
          echo -e "$COMMIT_LOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Job Summary
        env:
          STATUS: ${{ steps.internal_health.outcome == 'success' && 'success' || 'failure' }}
          BRANCH: ${{ github.ref_name }}
          COMMIT: ${{ github.sha }}
          REPO: ${{ github.repository }}
          RUN_ID: ${{ github.run_id }}
          IMAGE_TAGS: ${{ needs.build.outputs.image-tag }}
          IMAGE_DIGEST: ${{ needs.build.outputs.image-digest }}
          COMMITS_BLOCK: ${{ steps.commit.outputs.log }}
        run: |
          {
            echo "# 🚀 Deploy Summary"
            echo
            echo "**Status:** ${STATUS^^}"
            echo
            echo "**Repository:** $REPO"
            echo "**Branch:** `$BRANCH`"
            echo "**Run:** https://github.com/$REPO/actions/runs/$RUN_ID"
            echo
            echo "## 🔗 Artifact"
            echo "- **Image Tags:** \`$IMAGE_TAGS\`"
            echo "- **Image Digest:** \`$IMAGE_DIGEST\`"
            echo
            echo "## 📚 Commits"
            echo "$COMMITS_BLOCK"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Send Discord Notification
        if: always()
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          STATUS: ${{ steps.internal_health.outcome == 'success' && 'success' || 'failure' }}
          BRANCH: ${{ github.ref_name }}
          COMMIT: ${{ github.sha }}
          ACTOR: ${{ github.actor }}
          REPO: ${{ github.repository }}
          RUN_ID: ${{ github.run_id }}
          COMMIT_MESSAGE: ${{ steps.commit.outputs.message }}
          COMMIT_AUTHOR: ${{ steps.commit.outputs.author }}
          COMMIT_DATE: ${{ steps.commit.outputs.date }}
          IMAGE_TAGS: ${{ needs.build.outputs.image-tag }}
          IMAGE_DIGEST: ${{ needs.build.outputs.image-digest }}
          COMMIT_LOG: ${{ steps.commit.outputs.log }}
        run: |
          sudo apt-get update && sudo apt-get install -y jq

          COLOR=$([ "$STATUS" = "success" ] && echo 3066993 || echo 15158332)
          ICON=$([ "$STATUS" = "success" ] && echo "✅" || echo "❌")

          DESCRIPTION=$([ "$STATUS" = "success" ] && echo "🚀 **Triển khai Production thành công**" || echo "❌ **Deployment thất bại**")

          # Nhận diện Conventional Commits icon cho commit HEAD
          COMMIT_TYPE_ICON="📝"
          case "$COMMIT_MESSAGE" in
            feat*) COMMIT_TYPE_ICON="✨";;
            fix*) COMMIT_TYPE_ICON="🐛";;
            docs*) COMMIT_TYPE_ICON="📚";;
            style*) COMMIT_TYPE_ICON="💄";;
            refactor*) COMMIT_TYPE_ICON="♻️";;
            test*) COMMIT_TYPE_ICON="🧪";;
            chore*) COMMIT_TYPE_ICON="🔧";;
            perf*) COMMIT_TYPE_ICON="⚡";;
            ci*) COMMIT_TYPE_ICON="👷";;
            build*) COMMIT_TYPE_ICON="📦";;
            revert*) COMMIT_TYPE_ICON="⏪";;
            security*) COMMIT_TYPE_ICON="🔒";;
          esac

          # Hiển thị danh sách commit của push hiện tại (1..n)
          COMMITS_BLOCK=${COMMIT_LOG:-"(không có dữ liệu commit)"}

          JSON_PAYLOAD=$(jq -n \
            --arg status "$STATUS" \
            --arg icon "$ICON" \
            --arg branch "$BRANCH" \
            --arg commit_short "$(echo $COMMIT | cut -c1-7)" \
            --arg commit_full "$COMMIT" \
            --arg repo "$REPO" \
            --arg actor "$ACTOR" \
            --arg run_id "$RUN_ID" \
            --arg color "$COLOR" \
            --arg description "$DESCRIPTION" \
            --arg commit_message "$COMMIT_TYPE_ICON $COMMIT_MESSAGE" \
            --arg commit_author "$COMMIT_AUTHOR" \
            --arg commit_date "$COMMIT_DATE" \
            --arg image_tags "$IMAGE_TAGS" \
            --arg image_digest "$IMAGE_DIGEST" \
            --arg commits_block "$COMMITS_BLOCK" \
            ' {
                embeds: [{
                  title: "🚀 SERVER - Triển khai Production",
                  description: $description,
                  color: ($color | tonumber),
                  fields: [
                    { name: "📊 Trạng thái", value: "\($icon) \($status | ascii_upcase)", inline: true },
                    { name: "🌿 Nhánh", value: "`\($branch)`", inline: true },
                    { name: "👤 Người thực hiện", value: "`\($actor)`", inline: true },
                    { name: "🔗 Commit HEAD", value: "[`\($commit_short)`](https://github.com/\($repo)/commit/\($commit_full))", inline: false },
                    { name: "📝 Nội dung HEAD", value: "\($commit_message)", inline: false },
                    { name: "📚 Danh sách commits", value: $commits_block, inline: false },
                    { name: "🖼️ Image", value: "Tags:\n`\($image_tags)`\nDigest:\n`\($image_digest)`", inline: false }
                  ],
                  url: "https://github.com/\($repo)/actions/runs/\($run_id)",
                  footer: { "text": "🚀 Triển khai Production • \($commit_date)" },
                  timestamp: (now | strftime("%Y-%m-%dT%H:%M:%SZ"))
                }]
              }')

          curl -s -H "Content-Type: application/json" -X POST -d "$JSON_PAYLOAD" "$DISCORD_WEBHOOK" || echo "Lỗi gửi thông báo Discord"

  rollback-auto:
    name: Automatic Rollback
    needs: deploy-production
    runs-on: ubuntu-latest
    if: failure()
    steps:
      - name: Rollback to previous commit (production via SSH key)
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.STAGING_VPS_IP_HOST }}
          username: ${{ secrets.STAGING_VPS_USERNAME }}
          key: ${{ secrets.STAGING_VPS_SSH_KEY }}
          script: |
            export PROJECT_PATH='${{ secrets.STAGING_PATH_PROJECT }}'
            set -euo pipefail
            cd "$PROJECT_PATH"
            git fetch origin master
            git reset --hard HEAD~1
            BRANCH=$(git rev-parse --abbrev-ref HEAD)
            DIGEST_TAG="$BRANCH-$(git rev-parse HEAD)"
            export SERVER_IMAGE="ghcr.io/${{ env.IMAGE_NAME }}:${DIGEST_TAG}"
            docker compose --env-file .env.docker pull
            docker compose --env-file .env.docker down
            docker compose --env-file .env.docker up -d --force-recreate
