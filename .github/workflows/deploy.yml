name: üöÄ Deploy to Production

on:
  workflow_run:
    workflows: ['üèóÔ∏è Build Docker Image']
    types: [completed]
    branches: [master] # Only master branch for production
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Image tag to deploy (optional)'
        required: false
        default: 'latest'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: tedydev-web/server-shopsifu
  VPS_HOST: ${{ secrets.VPS_HOST }}
  VPS_USERNAME: ${{ secrets.VPS_USERNAME }}
  VPS_PATH: ${{ secrets.VPS_PATH }}

jobs:
  deploy:
    name: üöÄ Deploy Application
    runs-on: ubuntu-latest
    timeout-minutes: 15 # Reduced timeout for faster feedback
    # Only run if build workflow succeeded OR manual dispatch
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: ‚è±Ô∏è Start deploy timer
        id: deploy-timer
        run: echo "start_time=$(date +%s)" >> "$GITHUB_OUTPUT"

      - name: üîç Validate deployment inputs
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "Manual deployment triggered"
            echo "Image tag: ${{ github.event.inputs.image_tag }}"
          else
            echo "Automatic deployment from build workflow"
          fi

      - name: üê≥ Deploy with Docker Compose
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ env.VPS_HOST }}
          username: ${{ env.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          timeout: 60s
          command_timeout: 300s
          script: |
            set -euo pipefail

            # Debug environment variables
            echo "üîç Debug: Current working directory: $(pwd)"
            echo "üîç Debug: VPS_PATH from env: ${{ env.VPS_PATH }}"
            echo "üîç Debug: VPS_PATH from secrets: ${{ secrets.VPS_PATH }}"

            # Set VPS_PATH explicitly
            VPS_PATH="${VPS_PATH:-shopsifu/server-shopsifu}"
            echo "üîç Debug: Final VPS_PATH: $VPS_PATH"

            # Change to correct directory
            cd "$VPS_PATH" || {
              echo "‚ùå Failed to change to directory: $VPS_PATH"
              echo "üìÅ Available directories:"
              ls -la
              exit 1
            }

            echo "‚úÖ Changed to directory: $(pwd)"
            echo "üìÅ Directory contents:"
            ls -la

            echo "üöÄ Starting deployment process..."

            # Login to GHCR
            echo '${{ secrets.GITHUB_TOKEN }}' | docker login ghcr.io -u '${{ github.actor }}' --password-stdin

            # Stop existing services
            echo "üõë Stopping existing services..."
            docker compose down

            # Pull latest images from GHCR
            echo "üì• Pulling latest images from GitHub Container Registry..."
            docker compose pull

            # Deploy with Docker Compose
            echo "üöÄ Deploying with Docker Compose..."
            docker compose up -d

            # Verify deployment with better health check
            echo "üîç Verifying deployment..."
            echo "‚è≥ Waiting for services to start..."

            # Wait for services to be ready
            for i in {1..10}; do
              if docker compose ps | grep -q "shopsifu_server.*Up"; then
                echo "‚úÖ Service is running (attempt $i/10)"
                break
              fi
              echo "‚è≥ Service not ready yet (attempt $i/10)..."
              sleep 3
            done

            # Final verification
            if ! docker compose ps | grep -q "shopsifu_server.*Up"; then
              echo "‚ùå Deployment verification failed after 10 attempts"
              echo "üìä Current service status:"
              docker compose ps
              exit 1
            fi
            echo "‚úÖ Deployment verification passed"

            # Show service status
            echo "üìä Service status:"
            docker compose ps

      - name: üìä Calculate deploy time
        id: deploy-time
        run: |
          DEPLOY_END=$(date +%s)
          DEPLOY_START=${{ steps.deploy-timer.outputs.start_time }}
          DEPLOY_DURATION=$((DEPLOY_END - DEPLOY_START))
          echo "deploy-time=$DEPLOY_DURATION" >> "$GITHUB_OUTPUT"
          echo "‚è±Ô∏è Deploy completed in ${DEPLOY_DURATION}s"

  notification:
    name: üì¢ Send Notification
    needs: [deploy]
    runs-on: ubuntu-latest
    timeout-minutes: 3
    if: always()
    steps:
      - name: üì¢ Send Discord notification
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ env.VPS_HOST }}
          username: ${{ env.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          timeout: 60s
          command_timeout: 120s
          script: |
            set -euo pipefail

            # Set environment variables
            export DISCORD_WEBHOOK="${{ secrets.DISCORD_WEBHOOK }}"
            export STATUS="${{ needs.deploy.outcome == 'success' && 'success' || 'failure' }}"
            export BRANCH="${{ github.ref_name }}"
            export ACTOR="${{ github.actor }}"
            export COMMIT_SHA="${{ github.sha }}"
            export COMMIT_MESSAGE="${{ github.event.head_commit.message }}"
            export COMMIT_DATE="${{ github.event.head_commit.timestamp }}"
            export REPO="${{ github.repository }}"
            export RUN_ID="${{ github.run_id }}"
            export DEPLOY_TIME="${{ needs.deploy.outputs.deploy-time }}"

            # Change to project directory
            cd "${{ env.VPS_PATH }}" || exit 1

            # Install jq if not present
            sudo apt-get update -qq
            sudo apt-get install -y -qq jq

            # Get commit information
            COMMIT_SHORT_SHA=$(echo "$COMMIT_SHA" | cut -c1-7)

            # Get commit list (all commits in this push)
            COMMIT_LIST=$(git log --oneline --no-merges --since="1 hour ago" | head -10 | sed 's/^/‚Ä¢ /')

            # Get changes summary (last 10 commits)
            CHANGES_SUMMARY=$(git log --stat --oneline -10 | grep -E "^ [0-9]+ files? changed" | tail -1 || echo "Changes detected")

            # Get Docker status with NAME, CREATED, STATUS, PORTS
            DOCKER_STATUS=$(docker ps --format "table {{.Names}}\t{{.CreatedAt}}\t{{.Status}}\t{{.Ports}}" | head -10)

            # Get image info
            IMAGE_INFO=$(docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}" | grep "shopsifu" | head -5)

            COLOR=$([ "$STATUS" = "success" ] && echo 3066993 || echo 15158332)
            ICON=$([ "$STATUS" = "success" ] && echo "‚úÖ" || echo "‚ùå")
            DESCRIPTION=$([ "$STATUS" = "success" ] && echo "üöÄ **Deploy th√†nh c√¥ng**" || echo "‚ùå **Deploy th·∫•t b·∫°i**")

            JSON_PAYLOAD=$(jq -n \
              --arg status "$STATUS" \
              --arg icon "$ICON" \
              --arg description "$DESCRIPTION" \
              --arg color "$COLOR" \
              --arg branch "$BRANCH" \
              --arg actor "$ACTOR" \
              --arg commit_sha "$COMMIT_SHORT_SHA" \
              --arg commit_message "$COMMIT_MESSAGE" \
              --arg commit_date "$COMMIT_DATE" \
              --arg changes_summary "$CHANGES_SUMMARY" \
              --arg commit_list "$COMMIT_LIST" \
              --arg docker_status "$DOCKER_STATUS" \
              --arg image_info "$IMAGE_INFO" \
              --arg deploy_time "$DEPLOY_TIME" \
              --arg repo "$REPO" \
              --arg run_id "$RUN_ID" \
              ' {
                  embeds: [{
                    title: "üöÄ SERVER - Deploy Production",
                    description: $description,
                    color: ($color | tonumber),
                    fields: [
                      { name: "üìä Tr·∫°ng th√°i", value: "\($icon) \($status | ascii_upcase)", inline: true },
                      { name: "üåø Nh√°nh", value: $branch, inline: true },
                      { name: "üë§ Ng∆∞·ªùi th·ª±c hi·ªán", value: $actor, inline: true },
                      { name: "üîó Commit SHA", value: "`\($commit_sha)`", inline: true },
                      { name: "üìÖ Commit Date", value: $commit_date, inline: true },
                      { name: "‚è±Ô∏è Deploy Time", value: "\($deploy_time)s", inline: true },
                      { name: "üìù Commit Message", value: $commit_message, inline: false },
                      { name: "üìä Changes Summary", value: $changes_summary, inline: false },
                      { name: "üìã Danh s√°ch Commits", value: $commit_list, inline: false },
                      { name: "üê≥ Docker Status", value: "```\($docker_status)```", inline: false },
                      { name: "üñºÔ∏è Image Info", value: "```\($image_info)```", inline: false }
                    ],
                    url: "https://github.com/\($repo)/actions/runs/\($run_id)",
                    footer: { "text": "üöÄ Deploy Production" },
                    timestamp: (now | strftime("%Y-%m-%dT%H:%M:%SZ"))
                  }]
                }')

            # Send to Discord with retry logic
            MAX_RETRIES=3
            for i in $(seq 1 $MAX_RETRIES); do
              if curl -s -H "Content-Type: application/json" -X POST -d "$JSON_PAYLOAD" "$DISCORD_WEBHOOK"; then
                echo "‚úÖ Discord notification sent successfully"
                break
              else
                echo "‚ö†Ô∏è Attempt $i/$MAX_RETRIES failed"
                if [ $i -lt $MAX_RETRIES ]; then
                  sleep 2
                else
                  echo "‚ùå Failed to send Discord notification after $MAX_RETRIES attempts"
                fi
              fi
            done
