name: Deploy to Production

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Run lint and tests
        run: |
          npm ci
          npm run lint
          npm test
        working-directory: ./server-shopsifu

      - name: Deploy to VPS
        id: deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_IP_HOST}}
          username: ${{ secrets.VPS_USERNAME}}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            bash -i << 'EOF'
            # Load nvm
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
            
            # Load shell environment
            source ~/.bashrc
            source ~/.profile
            
            # Ki·ªÉm tra m√¥i tr∆∞·ªùng
            echo "User: $(whoami)"
            echo "PATH: $PATH"
            node --version || { echo "Node.js not found"; exit 1; }
            npm --version || { echo "npm not found"; exit 1; }
            pm2 --version || { echo "pm2 not found"; exit 1; }
            
            # Di chuy·ªÉn v√†o th∆∞ m·ª•c d·ª± √°n
            cd server-shopsifu || { echo "Directory not found"; exit 1; }
            
            # T·∫°o file .env
            echo "${{ secrets.ENV }}" > .env
            ls -la .env
            echo "File .env created successfully"
            
            # K√©o code m·ªõi nh·∫•t v√† ghi ƒë√® thay ƒë·ªïi c·ª•c b·ªô
            git fetch origin master || { echo "Git fetch failed"; exit 1; }
            git reset --hard origin/master || { echo "Git reset failed"; exit 1; }
            
            # X√≥a cache v√† build c≈©
            rm -rf dist node_modules/.cache node_modules
            
            # C√†i ƒë·∫∑t dependencies
            npm ci || { echo "npm ci failed"; exit 1; }
            
            # Build ·ª©ng d·ª•ng
            npm run build || { echo "Build failed"; exit 1; }
            
            # Restart pm2
            pm2 restart server-shopsifu || { echo "PM2 restart failed"; exit 1; }
            
            # Ki·ªÉm tra s·ª©c kh·ªèe ·ª©ng d·ª•ng
            sleep 5
            HEALTH_CHECK=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/health)
            if [ "$HEALTH_CHECK" != "200" ]; then
              echo "Health check failed: HTTP $HEALTH_CHECK"
              pm2 logs server-shopsifu --lines 20 --nostream
              exit 1
            fi
            echo "Health check passed: HTTP $HEALTH_CHECK"
            
            # L∆∞u tr·∫°ng th√°i pm2
            PM2_STATUS=$(pm2 status)
            echo "PM2_STATUS<<EOF" >> $GITHUB_ENV
            echo "$PM2_STATUS" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
            
            # L∆∞u log pm2 (10 d√≤ng cu·ªëi)
            PM2_LOGS=$(pm2 logs server-shopsifu --lines 10 --nostream)
            echo "PM2_LOGS<<EOF" >> $GITHUB_ENV
            echo "$PM2_LOGS" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
            
            # L∆∞u th√¥ng tin h·ªá th·ªëng
            SYSTEM_INFO=$(free -m | grep Mem | awk '{print "Memory: " $3 "/" $2 " MB"}')
            SYSTEM_INFO="$SYSTEM_INFO\n$(top -bn1 | head -n 3 | grep "Cpu(s)" | awk '{print "CPU: " $2 "%"}')"
            echo "SYSTEM_INFO<<EOF" >> $GITHUB_ENV
            echo "$SYSTEM_INFO" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
            
            EOF

      - name: Get deployment details
        id: deployment
        run: |
          echo "commit_sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          echo "commit_message=$(git log -1 --pretty=%B)" >> $GITHUB_OUTPUT
          echo "commit_author=$(git log -1 --pretty=%an)" >> $GITHUB_OUTPUT
          echo "commit_date=$(git log -1 --pretty=%cd)" >> $GITHUB_OUTPUT
          echo "branch=$(git rev-parse --abbrev-ref HEAD)" >> $GITHUB_OUTPUT

      - name: Send Discord Notification
        if: always()
        uses: Ilshidur/action-discord@0.3.2
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          args: |
            {
              "embeds": [
                {
                  "title": "üöÄ Deployment Notification",
                  "color": ${{ job.status == 'success' && 65280 || 16711680 }},
                  "description": "**Environment**: Production\n**Status**: ${{ job.status == 'success' && '‚úÖ Success' || '‚ùå Failed' }}",
                  "fields": [
                    {
                      "name": "üì¶ Repository",
                      "value": "[${{ github.repository }}](https://github.com/${{ github.repository }})",
                      "inline": true
                    },
                    {
                      "name": "üåø Branch",
                      "value": "`${{ steps.deployment.outputs.branch }}`",
                      "inline": true
                    },
                    {
                      "name": "üë§ Author",
                      "value": "${{ steps.deployment.outputs.commit_author }}",
                      "inline": true
                    },
                    {
                      "name": "üîó Commit",
                      "value": "[`${{ steps.deployment.outputs.commit_sha }}`](https://github.com/${{ github.repository }}/commit/${{ steps.deployment.outputs.commit_sha }})",
                      "inline": true
                    },
                    {
                      "name": "üìú Message",
                      "value": "${{ steps.deployment.outputs.commit_message }}",
                      "inline": false
                    },
                    {
                      "name": "‚è∞ Deployed At",
                      "value": "<t:${{ toJSON(github.event.head_commit.timestamp) }}:F>",
                      "inline": true
                    },
                    {
                      "name": "üîÑ PM2 Status",
                      "value": "```\n${{ env.PM2_STATUS }}\n```",
                      "inline": false
                    },
                    {
                      "name": "üìã Recent Logs",
                      "value": "```\n${{ env.PM2_LOGS }}\n```",
                      "inline": false
                    },
                    {
                      "name": "üíª System Info",
                      "value": "```\n${{ env.SYSTEM_INFO }}\n```",
                      "inline": false
                    },
                    {
                      "name": "üîó Details",
                      "value": "[GitHub Actions](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})",
                      "inline": false
                    }
                  ],
                  "footer": {
                    "text": "Shopsifu Backend Deployment"
                  },
                  "timestamp": "${{ toJSON(github.event.head_commit.timestamp) }}"
                }
              ]
            }