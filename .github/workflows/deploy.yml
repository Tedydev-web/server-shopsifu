name: CI/CD Pipeline

on:
  push:
    branches: [master]
  workflow_dispatch:
    inputs:
      manual_rollback:
        description: 'Commit SHA ho·∫∑c tag ƒë·ªÉ rollback'
        required: false

jobs:
  build:
    name: Build & Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: dist
          key: ${{ runner.os }}-build-${{ github.sha }}
          restore-keys: ${{ runner.os }}-build-

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

  deploy:
    name: Deploy to Production
    needs: build
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && !github.event.inputs.manual_rollback) }}
    environment: staging
    env:
      NODE_ENV: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: dist
          key: ${{ runner.os }}-build-${{ github.sha }}
          restore-keys: ${{ runner.os }}-build-

      - name: Deploy via SSH & PM2
        id: ssh_deploy
        run: |
          sshpass -p "${{ secrets.STAGING_VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.STAGING_VPS_USERNAME }}@${{ secrets.STAGING_VPS_IP_HOST }} << 'EOF'
            set -euo pipefail
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
            cd ${{ secrets.STAGING_PATH_PROJECT }}
            git fetch origin master && git reset --hard origin/master
            npm ci
            [ -d dist ] || npm run build
            pm2 restart server-shopsifu || pm2 start dist/index.js --name server-shopsifu
            sleep 5
            STATUS=$(pm2 jlist | jq -r '.[] | select(.name == "server-shopsifu") | .pm2_env.status')
            echo "$STATUS" > /tmp/app_status.txt
            pm2 jlist > /tmp/pm2_status.json
            pm2 logs server-shopsifu --lines 300 --nostream > /tmp/pm2_logs.txt
            [ "$STATUS" = "online" ] || exit 2
          EOF
        continue-on-error: true

      - name: Collect PM2 Output
        if: always()
        id: pm2_logs
        run: |
          # L·∫•y d·ªØ li·ªáu t·ª´ server v√† l∆∞u v√†o file t·∫°m tr√™n runner
          sshpass -p "${{ secrets.STAGING_VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.STAGING_VPS_USERNAME }}@${{ secrets.STAGING_VPS_IP_HOST }} << 'EOF'
            cat /tmp/pm2_status.json > /tmp/pm2_status.json
            cat /tmp/pm2_logs.txt > /tmp/pm2_logs.txt
          EOF
          # X·ª≠ l√Ω d·ªØ li·ªáu tr√™n runner
          PM2_LOGS=$(grep -v '\[TAILING\]' /tmp/pm2_logs.txt | tail -n 50 || echo "Kh√¥ng c√≥ log ·ª©ng d·ª•ng")
          echo "pm2_logs=$PM2_LOGS" >> $GITHUB_OUTPUT

      - name: Tag Release
        if: success() && contains(github.event.head_commit.message, '[release]')
        run: |
          git tag v$(date +'%Y.%m.%d.%H%M%S')
          git push origin --tags

      - name: Get Commit Info
        id: commit_info
        run: |
          echo "commit_sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          echo "commit_message=$(git log -1 --pretty=%B)" >> $GITHUB_OUTPUT

      - name: Send Discord Notification
        if: always()
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          STATUS: ${{ job.status }}
          BRANCH: ${{ github.ref_name }}
          COMMIT: ${{ github.sha }}
          ACTOR: ${{ github.actor }}
          REPO: ${{ github.repository }}
          RUN_ID: ${{ github.run_id }}
          PM2_LOGS: ${{ steps.pm2_logs.outputs.pm2_logs }}
          COMMIT_SHA: ${{ steps.commit_info.outputs.commit_sha }}
          COMMIT_MESSAGE: ${{ steps.commit_info.outputs.commit_message }}
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          COLOR=$([ "$STATUS" = "success" ] && echo 3066993 || echo 15158332)
          ICON=$([ "$STATUS" = "success" ] && echo "‚úÖ" || echo "‚ùå")
          JSON_PAYLOAD=$(jq -n \
            --arg status "$STATUS" \
            --arg icon "$ICON" \
            --arg branch "$BRANCH" \
            --arg commit "$COMMIT" \
            --arg commit_sha "$COMMIT_SHA" \
            --arg commit_message "$COMMIT_MESSAGE" \
            --arg repo "$REPO" \
            --arg actor "$ACTOR" \
            --arg logs "${PM2_LOGS:0:1000}" \
            --arg run_id "$RUN_ID" \
            --arg color "$COLOR" \
            '{
              embeds: [{
                title: "üöÄ SERVER - Th√¥ng b√°o tri·ªÉn khai ‚ú®",
                color: ($color | tonumber),
                fields: [
                  { name: "Tr·∫°ng th√°i", value: "\($icon) \($status)", inline: true },
                  { name: "Nh√°nh", value: "`\($branch)`", inline: true },
                  { name: "Commit", value: "[`\($commit)`](https://github.com/\($repo)/commit/\($commit))", inline: false },
                  { name: "Commit SHA", value: "`\($commit_sha)`", inline: false },
                  { name: "Commit Message", value: $commit_message, inline: false },
                  { name: "Ng∆∞·ªùi th·ª±c hi·ªán", value: "`\($actor)`", inline: true },
                  { name: "Th·ªùi gian", value: "<t:\((github.run_started_at | fromdateiso8601) / 1000 | floor):R>", inline: true }],
                description: "**50 d√≤ng log cu·ªëi:**\n```\n\($logs)\n```",
                url: "https://github.com/\($repo)/actions/runs/\($run_id)"
              }]
            }')
          curl -s -H "Content-Type: application/json" -X POST -d "$JSON_PAYLOAD" "$DISCORD_WEBHOOK" || echo "L·ªói g·ª≠i th√¥ng b√°o Discord"

  rollback-auto:
    name: Automatic Rollback
    needs: deploy
    runs-on: ubuntu-latest
    if: needs.deploy.result == 'failure'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: dist
          key: ${{ runner.os }}-build-${{ github.sha }}
          restore-keys: ${{ runner.os }}-build-

      - name: Rollback to previous commit
        run: |
          sshpass -p "${{ secrets.STAGING_VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.STAGING_VPS_USERNAME }}@${{ secrets.STAGING_VPS_IP_HOST }} << 'EOF'
            set -euo pipefail
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
            cd ${{ secrets.STAGING_PATH_PROJECT }}
            git fetch origin master && git reset --hard HEAD~1
            npm ci
            [ -d dist ] || npm run build
            pm2 restart server-shopsifu || pm2 start dist/index.js --name server-shopsifu
          EOF

  manual-rollback:
    name: Manual Rollback
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.manual_rollback
    runs-on: ubuntu-latest
    steps:
      - name: Checkout specific commit
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.manual_rollback }}

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: dist
          key: ${{ runner.os }}-build-${{ github.event.inputs.manual_rollback }}
          restore-keys: ${{ runner.os }}-build-

      - name: Re-deploy to VPS
        run: |
          sshpass -p "${{ secrets.STAGING_VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.STAGING_VPS_USERNAME }}@${{ secrets.STAGING_VPS_IP_HOST }} << 'EOF'
            set -euo pipefail
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
            cd ${{ secrets.STAGING_PATH_PROJECT }}
            git reset --hard ${{ github.event.inputs.manual_rollback }}
            npm ci
            [ -d dist ] || npm run build
            pm2 restart server-shopsifu || pm2 start dist/index.js --name server-shopsifu
          EOF

permissions:
  contents: write
