name: üöÄ Deploy to Production

on:
  workflow_run:
    workflows: ['üèóÔ∏è Build Docker Image']
    types: [completed]
    branches: [master] # Only master branch for production
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Image tag to deploy (optional)'
        required: false
        default: 'latest'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: tedydev-web/server-shopsifu
  VPS_HOST: ${{ secrets.VPS_HOST }}
  VPS_USERNAME: ${{ secrets.VPS_USERNAME }}
  VPS_PATH: ${{ secrets.VPS_PATH }}

jobs:
  deploy:
    name: üöÄ Deploy Application
    runs-on: ubuntu-latest
    timeout-minutes: 15 # Reduced timeout for faster feedback
    # Only run if build workflow succeeded OR manual dispatch
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    outputs:
      deploy-time: ${{ steps.deploy-time.outputs.deploy-time }}
      deploy-status: ${{ job.status }}
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: ‚è±Ô∏è Start deploy timer
        id: deploy-timer
        run: echo "start_time=$(date +%s)" >> "$GITHUB_OUTPUT"

      - name: üîç Validate deployment inputs
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "Manual deployment triggered"
            echo "Image tag: ${{ github.event.inputs.image_tag }}"
          else
            echo "Automatic deployment from build workflow"
          fi

      - name: üê≥ Deploy with Docker Compose
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ env.VPS_HOST }}
          username: ${{ env.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          timeout: 60s
          command_timeout: 300s
          script: |
            set -euo pipefail

            # Debug environment variables
            echo "üîç Debug: Current working directory: $(pwd)"
            echo "üîç Debug: VPS_PATH from env: ${{ env.VPS_PATH }}"
            echo "üîç Debug: VPS_PATH from secrets: ${{ secrets.VPS_PATH }}"

            # Set VPS_PATH explicitly
            VPS_PATH="${VPS_PATH:-workspace/shopsifu/server-shopsifu}"
            echo "üîç Debug: Final VPS_PATH: $VPS_PATH"

            # Change to correct directory
            cd "$VPS_PATH" || {
              echo "‚ùå Failed to change to directory: $VPS_PATH"
              echo "üìÅ Available directories:"
              ls -la
              exit 1
            }

            echo "‚úÖ Changed to directory: $(pwd)"
            echo "üìÅ Directory contents:"
            ls -la

            echo "üöÄ Starting deployment process..."

            # Login to GHCR
            echo '${{ secrets.GITHUB_TOKEN }}' | docker login ghcr.io -u '${{ github.actor }}' --password-stdin

            # Stop existing services
            echo "üõë Stopping existing services..."
            docker compose down

            # Pull latest images from GHCR
            echo "üì• Pulling latest images from GitHub Container Registry..."
            docker compose pull

            # Deploy with Docker Compose
            echo "üöÄ Deploying with Docker Compose..."
            docker compose up -d

            # Verify deployment with PM2 cluster health check
            echo "üîç Verifying PM2 cluster deployment..."
            echo "‚è≥ Waiting for services to start..."

            # Wait for PM2 cluster to be ready
            for i in {1..15}; do
              echo "‚è≥ Health check attempt $i/15..."
              
              # Check if container is running
              if ! docker compose ps | grep -q "shopsifu_server.*Up"; then
                echo "‚è≥ Container not ready yet..."
                sleep 4
                continue
              fi
              
              # Check PM2 cluster health
              if docker exec shopsifu_server npx pm2 list | grep -q "online"; then
                echo "‚úÖ PM2 cluster is running (attempt $i/15)"
                
                # Verify port 3000 is healthy
                if curl -f -s -m 10 http://localhost:3000/health > /dev/null; then
                  echo "‚úÖ Port 3000: Healthy"
                  echo "üéâ PM2 cluster deployment successful!"
                  break
                else
                  echo "‚ùå Port 3000: Unhealthy"
                fi
              fi
              
              echo "‚è≥ PM2 cluster not ready yet..."
              sleep 4
            done

            # Final verification
            if ! curl -f -s -m 10 http://localhost:3000/health > /dev/null; then
              echo "‚ùå PM2 cluster deployment verification failed after 15 attempts"
              echo "üìä Current service status:"
              docker compose ps
              echo "üìä Container logs:"
              docker logs shopsifu_server --tail 20
              exit 1
            fi
            echo "‚úÖ PM2 cluster deployment verification passed"

            # Show service status
            echo "üìä Service status:"
            docker compose ps

      - name: üìä Calculate deploy time
        id: deploy-time
        run: |
          DEPLOY_END=$(date +%s)
          DEPLOY_START=${{ steps.deploy-timer.outputs.start_time }}
          DEPLOY_DURATION=$((DEPLOY_END - DEPLOY_START))
          echo "deploy-time=$DEPLOY_DURATION" >> "$GITHUB_OUTPUT"
          echo "‚è±Ô∏è Deploy completed in ${DEPLOY_DURATION}s"
