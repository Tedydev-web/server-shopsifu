name: CI/CD Pipeline

on:
  push:
    branches: [master]
  workflow_dispatch:
    inputs:
      manual_rollback:
        description: 'Commit SHA ho·∫∑c tag ƒë·ªÉ rollback (ƒë·ªÉ tr·ªëng ƒë·ªÉ deploy b√¨nh th∆∞·ªùng)'
        required: false

jobs:
  # 1. Build & Test
  build:
    name: Build & Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      # - name: Run tests
      #   run: npm test

  # 2. Deploy to Production
  deploy:
    name: Deploy to Production
    needs: build
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && !github.event.inputs.manual_rollback) }}
    env:
      NODE_ENV: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Generate .env
        run: |
          cat <<EOF > .env
          PORT=3000
          DATABASE_URL="${{ secrets.DATABASE_URL }}"
          ACCESS_TOKEN_EXPIRES_IN=${{ secrets.ACCESS_TOKEN_EXPIRES_IN }}
          REFRESH_TOKEN_EXPIRES_IN=${{ secrets.REFRESH_TOKEN_EXPIRES_IN }}
          ACCESS_TOKEN_SECRET=${{ secrets.ACCESS_TOKEN_SECRET }}
          REFRESH_TOKEN_SECRET=${{ secrets.REFRESH_TOKEN_SECRET }}
          SECRET_API_KEY=${{ secrets.SECRET_API_KEY }}
          ADMIN_NAME="${{ secrets.ADMIN_NAME }}"
          ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}
          ADMIN_EMAIL=${{ secrets.ADMIN_EMAIL }}
          ADMIN_PHONE_NUMBER=${{ secrets.ADMIN_PHONE_NUMBER }}
          OTP_EXPIRES_IN=${{ secrets.OTP_EXPIRES_IN }}
          RESEND_API_KEY=${{ secrets.RESEND_API_KEY }}
          GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
          GOOGLE_REDIRECT_URI=${{ secrets.GOOGLE_REDIRECT_URI }}
          GOOGLE_CLIENT_REDIRECT_URI=${{ secrets.GOOGLE_CLIENT_REDIRECT_URI }}
          EOF

      - name: Deploy via SSH & PM2
        id: ssh_deploy
        run: |
          sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP_HOST }} << 'EOF'
            set -euo pipefail
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
            source ~/.bashrc; source ~/.profile
            cd ${{ secrets.PATH_PROJECT }}
            git fetch origin master && git reset --hard origin/master
            rm -rf dist node_modules
            npm ci && npm run build
            pm2 describe server-shopsifu &>/dev/null && pm2 restart server-shopsifu || pm2 start dist/main.js --name server-shopsifu
            pm2 status server-shopsifu > /tmp/pm2_status.txt
            pm2 logs server-shopsifu --lines 100 --nostream > /tmp/pm2_logs.txt
            STATUS=$(pm2 info server-shopsifu | grep status | awk '{print $4}')
            echo "$STATUS" > /tmp/app_status.txt
            if [[ "$STATUS" != "online" ]]; then
              exit 2
            fi
          EOF
        continue-on-error: true

      - name: Collect PM2 Output
        if: always()
        id: pm2_logs
        run: |
          sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP_HOST }} << 'EOF'
            echo "::set-output name=status::$(cat /tmp/pm2_status.txt)"
            echo "::set-output name=logs::$(cat /tmp/pm2_logs.txt)"
          EOF

      - name: Tag Release
        if: success()
        run: |
          TAG=v$(date +'%Y.%m.%d.%H%M%S')
          git tag $TAG
          git push origin $TAG

      - name: Send Discord Embed Notification
        if: always()
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          STATUS: ${{ job.status }}
          BRANCH: ${{ github.ref_name }}
          COMMIT: ${{ github.sha }}
          ACTOR: ${{ github.actor }}
          REPO: ${{ github.repository }}
          RUN_ID: ${{ github.run_id }}
          PM2_STATUS: ${{ steps.pm2_logs.outputs.status }}
          PM2_LOGS: ${{ steps.pm2_logs.outputs.logs }}
        run: |
          # Ki·ªÉm tra webhook
          if [ -z "$DISCORD_WEBHOOK" ]; then
            echo "L·ªói: DISCORD_WEBHOOK kh√¥ng ƒë∆∞·ª£c ƒë·∫∑t"
            exit 1
          fi

          COLOR=3066993
          ICON="‚úÖ"
          if [ "$STATUS" != "success" ]; then
            COLOR=15158332
            ICON="‚ùå"
          fi

          # Tho√°t PM2_LOGS
          ESCAPED_LOGS=$(echo "${PM2_LOGS:0:1500}" | sed 's/"/\\"/g; s/\n/\\n/g')

          JSON_PAYLOAD="{
            \"embeds\": [{
              \"title\": \"üöÄ Th√¥ng b√°o tri·ªÉn khai\",
              \"color\": $COLOR,
              \"fields\": [
                { \"name\": \"Tr·∫°ng th√°i\", \"value\": \"$ICON $STATUS\", \"inline\": true },
                { \"name\": \"Nh√°nh\", \"value\": \"\`$BRANCH\`\", \"inline\": true },
                { \"name\": \"Commit\", \"value\": \"[\`$COMMIT\`](https://github.com/$REPO/commit/$COMMIT)\", \"inline\": false },
                { \"name\": \"Ng∆∞·ªùi th·ª±c hi·ªán\", \"value\": \"\`$ACTOR\`\", \"inline\": true },
                { \"name\": \"Tr·∫°ng th√°i PM2\", \"value\": \"\`\`\`\n$PM2_STATUS\n\`\`\`\", \"inline\": false }
              ],
              \"description\": \"**100 d√≤ng log cu·ªëi:**\\n\\\`\\\`\\\`\\n$ESCAPED_LOGS\\n\\\`\\\`\\\`\", 
              \"url\": \"https://github.com/$REPO/actions/runs/$RUN_ID\"
            }]
          }"

          # Ghi log payload
          echo "JSON Payload: $JSON_PAYLOAD"

          # G·ª≠i y√™u c·∫ßu v√† ghi l·∫°i ph·∫£n h·ªìi
          RESPONSE=$(curl -s -w "%{http_code}" -H "Content-Type: application/json" -X POST -d "$JSON_PAYLOAD" "$DISCORD_WEBHOOK")
          HTTP_CODE=${RESPONSE: -3}
          RESPONSE_BODY=${RESPONSE%???}

          echo "M√£ tr·∫°ng th√°i HTTP: $HTTP_CODE"
          echo "N·ªôi dung ph·∫£n h·ªìi: $RESPONSE_BODY"

          if [ "$HTTP_CODE" != "204" ]; then
            echo "L·ªói: Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o Discord"
            exit 1
          fi

  # 3. Automatic Rollback on Failure
  rollback-auto:
    name: Automatic Rollback
    needs: deploy
    runs-on: ubuntu-latest
    if: needs.deploy.result == 'failure'
    steps:
      - name: Rollback to previous commit on server
        run: |
          sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP_HOST }} << 'EOF'
            set -euo pipefail
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
            source ~/.bashrc; source ~/.profile
            cd ${{ secrets.PATH_PROJECT }}
            git fetch origin master
            git reset --hard HEAD~1
            rm -rf dist node_modules
            npm ci && npm run build
            pm2 restart server-shopsifu
          EOF

  # 4. Manual Rollback
  manual-rollback:
    name: Manual Rollback
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.manual_rollback
    runs-on: ubuntu-latest
    steps:
      - name: Checkout specific commit/tag
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.manual_rollback }}

      - name: Re-deploy to VPS
        run: |
          # Copy l·∫°i c√°c b∆∞·ªõc deploy SSH nh∆∞ tr√™n, nh∆∞ng v·ªõi ref c·ª• th·ªÉ ƒë√£ checkout
          sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP_HOST }} << 'EOF'
            set -euo pipefail
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
            source ~/.bashrc; source ~/.profile
            cd ${{ secrets.PATH_PROJECT }}
            git reset --hard HEAD
            rm -rf dist node_modules
            npm ci && npm run build
            pm2 restart server-shopsifu
          EOF

permissions:
  contents: write
