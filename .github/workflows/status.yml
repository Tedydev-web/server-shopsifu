name: 📊 System Status Check

on:
  schedule:
    - cron: '0 */6 * * *' # Chạy mỗi 6 giờ
  workflow_dispatch:
    inputs:
      check_type:
        description: 'Loại kiểm tra'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - services
          - database
          - monitoring

env:
  VPS_HOST: ${{ secrets.VPS_HOST }}
  VPS_USERNAME: ${{ secrets.VPS_USERNAME }}
  VPS_PATH: ${{ secrets.VPS_PATH }}

jobs:
  status-check:
    name: 📊 Check System Status
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔍 Check Docker Compose Status
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ env.VPS_HOST }}
          username: ${{ env.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -euo pipefail
            cd "${{ env.VPS_PATH }}"

            echo "🔍 Checking Docker Compose status..."

            # Check if docker-compose.yml exists
            if [ -f "docker-compose.yml" ]; then
              echo "✅ docker-compose.yml found"
            else
              echo "❌ docker-compose.yml not found"
              exit 1
            fi

            # Check service status
            echo "🏥 Checking service status..."
            docker compose ps --format "table {{.Name}}\t{{.Status}}\t{{.Ports}}"

            # Check if all services are running
            RUNNING_SERVICES=$(docker compose ps --filter "status=running" --format "{{.Name}}" | wc -l)
            TOTAL_SERVICES=$(docker compose ps --format "{{.Name}}" | wc -l)
            echo "📊 Services: $RUNNING_SERVICES/$TOTAL_SERVICES running"

      - name: 🗄️ Check Database Status
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ env.VPS_HOST }}
          username: ${{ env.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -euo pipefail

            echo "🗄️ Checking database status..."

            # Check PostgreSQL
            if pg_isready -h localhost -p 5432 -U shopsifu; then
              echo "✅ PostgreSQL is ready"
            else
              echo "❌ PostgreSQL is not ready"
            fi

            # Check Redis
            if redis-cli -a "Shopsifu2025" ping | grep -q "PONG"; then
              echo "✅ Redis is ready"
            else
              echo "❌ Redis is not ready"
            fi

            # Check Elasticsearch
            if curl -fsS http://localhost:9200 > /dev/null; then
              echo "✅ Elasticsearch is ready"
            else
              echo "❌ Elasticsearch is not ready"
            fi

      - name: 📊 Check Monitoring Status
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ env.VPS_HOST }}
          username: ${{ env.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -euo pipefail

            echo "📊 Checking monitoring status..."

            # Check Prometheus
            if curl -fsS http://localhost:9090/-/healthy > /dev/null; then
              echo "✅ Prometheus is healthy"
            else
              echo "❌ Prometheus is not healthy"
            fi

            # Check Grafana
            if curl -fsS http://localhost:3001/api/health > /dev/null; then
              echo "✅ Grafana is healthy"
            else
              echo "❌ Grafana is not healthy"
            fi

            # Check Kibana
            if curl -fsS http://localhost:5601/api/status > /dev/null; then
              echo "✅ Kibana is healthy"
            else
              echo "❌ Kibana is not healthy"
            fi

      - name: 🚀 Check Application Status
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ env.VPS_HOST }}
          username: ${{ env.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -euo pipefail

            echo "🚀 Checking application status..."

            # Check server health
            if curl -fsS http://localhost:3000/health > /dev/null; then
              echo "✅ Application server is healthy"
            else
              echo "❌ Application server is not healthy"
            fi

            # Check server metrics
            echo "📈 Server metrics:"
            docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}"

      - name: 📊 Check System Resources
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ env.VPS_HOST }}
          username: ${{ env.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -euo pipefail

            echo "📊 Checking system resources..."

            # Check disk usage
            echo "💾 Disk usage:"
            df -h /

            # Check memory usage
            echo "🧠 Memory usage:"
            free -h

            # Check CPU load
            echo "⚡ CPU load:"
            uptime

            # Check Docker disk usage
            echo "🐳 Docker disk usage:"
            docker system df

  notification:
    name: 📢 Status Notification
    needs: status-check
    runs-on: ubuntu-latest
    timeout-minutes: 3
    if: always()
    steps:
      - name: 📢 Send Discord notification
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          STATUS: ${{ needs.status-check.outcome == 'success' && 'success' || 'failure' }}
        run: |
          sudo apt-get update && sudo apt-get install -y jq

          COLOR=$([ "$STATUS" = "success" ] && echo 3066993 || echo 15158332)
          ICON=$([ "$STATUS" = "success" ] && echo "✅" || echo "❌")
          DESCRIPTION=$([ "$STATUS" = "success" ] && echo "📊 **System Status: Healthy**" || echo "❌ **System Status: Issues Detected**")

          JSON_PAYLOAD=$(jq -n \
            --arg status "$STATUS" \
            --arg icon "$ICON" \
            --arg description "$DESCRIPTION" \
            --arg color "$COLOR" \
            ' {
                embeds: [{
                  title: "📊 SYSTEM STATUS CHECK",
                  description: $description,
                  color: ($color | tonumber),
                  fields: [
                    { name: "📊 Trạng thái", value: "\($icon) \($status | ascii_upcase)", inline: true },
                    { name: "⏰ Thời gian", value: "\(now | strftime("%Y-%m-%d %H:%M:%S UTC"))", inline: true }
                  ],
                  footer: { "text": "📊 System Status Check" },
                  timestamp: (now | strftime("%Y-%m-%dT%H:%M:%SZ"))
                }]
              }')

          curl -s -H "Content-Type: application/json" -X POST -d "$JSON_PAYLOAD" "$DISCORD_WEBHOOK" || echo "Lỗi gửi thông báo Discord"
