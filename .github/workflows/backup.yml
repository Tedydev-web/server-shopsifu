name: üóÑÔ∏è System Backup

on:
  schedule:
    - cron: '0 2 * * *' # Ch·∫°y m·ªói ng√†y l√∫c 2:00 AM
  workflow_dispatch:
    inputs:
      backup_type:
        description: 'Lo·∫°i backup'
        required: false
        default: 'full'
        type: choice
        options:
          - full
          - database
          - files
          - config
      retention_days:
        description: 'S·ªë ng√†y gi·ªØ backup (m·∫∑c ƒë·ªãnh: 7)'
        required: false
        default: '7'
        type: string

env:
  VPS_HOST: ${{ secrets.VPS_HOST }}
  VPS_USERNAME: ${{ secrets.VPS_USERNAME }}
  VPS_PATH: ${{ secrets.VPS_PATH }}
  BACKUP_PATH: /backup/shopsifu

jobs:
  backup:
    name: üóÑÔ∏è Create System Backup
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: ‚è±Ô∏è Start backup timer
        id: backup-timer
        run: echo "start_time=$(date +%s)" >> "$GITHUB_OUTPUT"

      - name: üóÑÔ∏è Create backup directories
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ env.VPS_HOST }}
          username: ${{ env.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -euo pipefail

            echo "üóÑÔ∏è Setting up backup directories..."

            # Create backup directories
            sudo mkdir -p "${{ env.BACKUP_PATH }}"/{database,files,config,logs}
            sudo chown -R $USER:$USER "${{ env.BACKUP_PATH }}"

            # Create timestamp for backup
            BACKUP_TIMESTAMP=$(date +%Y%m%d_%H%M%S)
            echo "backup_timestamp=$BACKUP_TIMESTAMP" >> "$GITHUB_ENV"

            echo "‚úÖ Backup directories created with timestamp: $BACKUP_TIMESTAMP"

      - name: üóÑÔ∏è Backup PostgreSQL Database
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ env.VPS_HOST }}
          username: ${{ env.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -euo pipefail
            cd "${{ env.VPS_PATH }}"

            echo "üóÑÔ∏è Backing up PostgreSQL database..."

            # Get backup timestamp
            BACKUP_TIMESTAMP="${{ env.backup_timestamp }}"

            # Create database backup
            docker exec shopsifu_postgres.1 pg_dump -U shopsifu -d shopsifu --format=custom --file=/tmp/shopsifu_$BACKUP_TIMESTAMP.backup

            # Copy backup from container
            docker cp shopsifu_postgres.1:/tmp/shopsifu_$BACKUP_TIMESTAMP.backup "${{ env.BACKUP_PATH }}/database/"

            # Verify backup file
            if [ -f "${{ env.BACKUP_PATH }}/database/shopsifu_$BACKUP_TIMESTAMP.backup" ]; then
              BACKUP_SIZE=$(du -h "${{ env.BACKUP_PATH }}/database/shopsifu_$BACKUP_TIMESTAMP.backup" | cut -f1)
              echo "‚úÖ Database backup completed: shopsifu_$BACKUP_TIMESTAMP.backup ($BACKUP_SIZE)"
            else
              echo "‚ùå Database backup failed"
              exit 1
            fi

      - name: üóÑÔ∏è Backup Application Files
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ env.VPS_HOST }}
          username: ${{ env.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -euo pipefail
            cd "${{ env.VPS_PATH }}"

            echo "üóÑÔ∏è Backing up application files..."

            # Get backup timestamp
            BACKUP_TIMESTAMP="${{ env.backup_timestamp }}"

            # Create files backup
            tar -czf "${{ env.BACKUP_PATH }}/files/shopsifu_files_$BACKUP_TIMESTAMP.tar.gz" \
              --exclude=node_modules \
              --exclude=.git \
              --exclude=dist \
              --exclude=logs \
              --exclude=backup \
              .

            # Verify backup file
            if [ -f "${{ env.BACKUP_PATH }}/files/shopsifu_files_$BACKUP_TIMESTAMP.tar.gz" ]; then
              BACKUP_SIZE=$(du -h "${{ env.BACKUP_PATH }}/files/shopsifu_files_$BACKUP_TIMESTAMP.tar.gz" | cut -f1)
              echo "‚úÖ Files backup completed: shopsifu_files_$BACKUP_TIMESTAMP.tar.gz ($BACKUP_SIZE)"
            else
              echo "‚ùå Files backup failed"
              exit 1
            fi

      - name: üóÑÔ∏è Backup Configuration Files
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ env.VPS_HOST }}
          username: ${{ env.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -euo pipefail
            cd "${{ env.VPS_PATH }}"

            echo "üóÑÔ∏è Backing up configuration files..."

            # Get backup timestamp
            BACKUP_TIMESTAMP="${{ env.backup_timestamp }}"

            # Create config backup
            tar -czf "${{ env.BACKUP_PATH }}/config/shopsifu_config_$BACKUP_TIMESTAMP.tar.gz" \
              config/ \
              monitoring/ \
              .env.docker \
              docker-compose.swarm.yml \
              Dockerfile

            # Verify backup file
            if [ -f "${{ env.BACKUP_PATH }}/config/shopsifu_config_$BACKUP_TIMESTAMP.tar.gz" ]; then
              BACKUP_SIZE=$(du -h "${{ env.BACKUP_PATH }}/config/shopsifu_config_$BACKUP_TIMESTAMP.tar.gz" | cut -f1)
              echo "‚úÖ Config backup completed: shopsifu_config_$BACKUP_TIMESTAMP.tar.gz ($BACKUP_SIZE)"
            else
              echo "‚ùå Config backup failed"
              exit 1
            fi

      - name: üóÑÔ∏è Backup Docker Volumes
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ env.VPS_HOST }}
          username: ${{ env.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -euo pipefail
            cd "${{ env.VPS_PATH }}"

            echo "üóÑÔ∏è Backing up Docker volumes..."

            # Get backup timestamp
            BACKUP_TIMESTAMP="${{ env.backup_timestamp }}"

            # Stop services temporarily for consistent backup
            echo "‚è∏Ô∏è Stopping services for consistent backup..."
            docker stack rm shopsifu || true
            sleep 30

            # Backup PostgreSQL data volume
            docker run --rm -v postgres_data:/data -v "${{ env.BACKUP_PATH }}/database:/backup" \
              alpine tar -czf /backup/postgres_data_$BACKUP_TIMESTAMP.tar.gz -C /data .

            # Backup Redis data volume
            docker run --rm -v redis_data:/data -v "${{ env.BACKUP_PATH }}/database:/backup" \
              alpine tar -czf /backup/redis_data_$BACKUP_TIMESTAMP.tar.gz -C /data .

            # Backup Elasticsearch data volume
            docker run --rm -v esdata:/data -v "${{ env.BACKUP_PATH }}/database:/backup" \
              alpine tar -czf /backup/elasticsearch_data_$BACKUP_TIMESTAMP.tar.gz -C /data .

            # Restart services
            echo "üîÑ Restarting services..."
            ./scripts/deploy-swarm.sh

            echo "‚úÖ Docker volumes backup completed"

      - name: üóÑÔ∏è Create backup manifest
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ env.VPS_HOST }}
          username: ${{ env.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -euo pipefail

            echo "üóÑÔ∏è Creating backup manifest..."

            # Get backup timestamp
            BACKUP_TIMESTAMP="${{ env.backup_timestamp }}"

            # Create manifest file
            cat > "${{ env.BACKUP_PATH }}/shopsifu_backup_$BACKUP_TIMESTAMP.manifest" << EOF
            ShopSifu System Backup Manifest
            =================================

            Backup Timestamp: $BACKUP_TIMESTAMP
            Backup Date: $(date)
            System: $(uname -a)
            Docker Version: $(docker --version)

            Backup Contents:
            - Database: shopsifu_$BACKUP_TIMESTAMP.backup
            - Files: shopsifu_files_$BACKUP_TIMESTAMP.tar.gz
            - Config: shopsifu_config_$BACKUP_TIMESTAMP.tar.gz
            - PostgreSQL Data: postgres_data_$BACKUP_TIMESTAMP.tar.gz
            - Redis Data: redis_data_$BACKUP_TIMESTAMP.tar.gz
            - Elasticsearch Data: elasticsearch_data_$BACKUP_TIMESTAMP.tar.gz

            Total Size: $(du -sh "${{ env.BACKUP_PATH }}" | cut -f1)

            Backup Location: ${{ env.BACKUP_PATH }}
            Created by: GitHub Actions
            EOF

            echo "‚úÖ Backup manifest created: shopsifu_backup_$BACKUP_TIMESTAMP.manifest"

      - name: üßπ Cleanup old backups
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ env.VPS_HOST }}
          username: ${{ env.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -euo pipefail

            echo "üßπ Cleaning up old backups..."

            # Get retention days from input or default to 7
            RETENTION_DAYS="${{ github.event.inputs.retention_days || '7' }}"

            # Remove old backups
            find "${{ env.BACKUP_PATH }}" -name "*.backup" -mtime +$RETENTION_DAYS -delete
            find "${{ env.BACKUP_PATH }}" -name "*.tar.gz" -mtime +$RETENTION_DAYS -delete
            find "${{ env.BACKUP_PATH }}" -name "*.manifest" -mtime +$RETENTION_DAYS -delete

            echo "‚úÖ Cleaned up backups older than $RETENTION_DAYS days"

            # Show current backup status
            echo "üìä Current backup status:"
            du -sh "${{ env.BACKUP_PATH }}"/*
            echo "Total backup size: $(du -sh "${{ env.BACKUP_PATH }}" | cut -f1)"

      - name: üìä Calculate backup time
        id: backup-time
        run: |
          BACKUP_END=$(date +%s)
          BACKUP_START=${{ steps.backup-timer.outputs.start_time }}
          BACKUP_DURATION=$((BACKUP_END - BACKUP_START))
          echo "backup-time=$BACKUP_DURATION" >> "$GITHUB_OUTPUT"
          echo "‚è±Ô∏è Backup completed in ${BACKUP_DURATION}s"

  notification:
    name: üì¢ Backup Notification
    needs: backup
    runs-on: ubuntu-latest
    timeout-minutes: 3
    if: always()
    steps:
      - name: üì¢ Send Discord notification
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          STATUS: ${{ needs.backup.outcome == 'success' && 'success' || 'failure' }}
          BACKUP_TIME: ${{ needs.backup.outputs.backup-time }}
          BACKUP_TYPE: ${{ github.event.inputs.backup_type || 'full' }}
          RETENTION_DAYS: ${{ github.event.inputs.retention_days || '7' }}
        run: |
          sudo apt-get update && sudo apt-get install -y jq

          COLOR=$([ "$STATUS" = "success" ] && echo 3066993 || echo 15158332)
          ICON=$([ "$STATUS" = "success" ] && echo "‚úÖ" || echo "‚ùå")
          DESCRIPTION=$([ "$STATUS" = "success" ] && echo "üóÑÔ∏è **Backup th√†nh c√¥ng**" || echo "‚ùå **Backup th·∫•t b·∫°i**")

          JSON_PAYLOAD=$(jq -n \
            --arg status "$STATUS" \
            --arg icon "$ICON" \
            --arg description "$DESCRIPTION" \
            --arg color "$COLOR" \
            --arg backup_time "$BACKUP_TIME" \
            --arg backup_type "$BACKUP_TYPE" \
            --arg retention_days "$RETENTION_DAYS" \
            ' {
                embeds: [{
                  title: "üóÑÔ∏è SYSTEM BACKUP",
                  description: $description,
                  color: ($color | tonumber),
                  fields: [
                    { name: "üìä Tr·∫°ng th√°i", value: "\($icon) \($status | ascii_upcase)", inline: true },
                    { name: "üóÑÔ∏è Lo·∫°i backup", value: $backup_type, inline: true },
                    { name: "‚è±Ô∏è Th·ªùi gian", value: "\($backup_time)s", inline: true },
                    { name: "üìÖ Gi·ªØ l·∫°i", value: "\($retention_days) ng√†y", inline: true }
                  ],
                  footer: { "text": "üóÑÔ∏è System Backup" },
                  timestamp: (now | strftime("%Y-%m-%dT%H:%M:%SZ"))
                }]
              }')

          curl -s -H "Content-Type: application/json" -X POST -d "$JSON_PAYLOAD" "$DISCORD_WEBHOOK" || echo "L·ªói g·ª≠i th√¥ng b√°o Discord"
