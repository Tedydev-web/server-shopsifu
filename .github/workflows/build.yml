name: üèóÔ∏è Build Docker Image

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: tedydev-web/server-shopsifu

jobs:
  security-scan:
    name: üîí Security Scan (Warning Only)
    runs-on: ubuntu-latest
    timeout-minutes: 5
    permissions:
      contents: read
      security-events: write
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üîç Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: üìä Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: ‚ö†Ô∏è Check for high severity vulnerabilities (Warning Only)
        if: always()
        run: |
          if [ -f "trivy-results.sarif" ]; then
            HIGH_VULNS=$(grep -c '"level": "error"' trivy-results.sarif || echo "0")
            if [ "$HIGH_VULNS" -gt 0 ]; then
              echo "‚ö†Ô∏è WARNING: Found $HIGH_VULNS high severity vulnerabilities"
              echo "‚ö†Ô∏è This is a security warning but will NOT block the build"
              echo "‚ö†Ô∏è Please review and fix these vulnerabilities as soon as possible"
              echo "‚ö†Ô∏è Vulnerabilities found in:"
              grep -A 5 -B 5 '"level": "error"' trivy-results.sarif || echo "No detailed info available"
            else
              echo "‚úÖ No high severity vulnerabilities found"
            fi
          else
            echo "‚ö†Ô∏è WARNING: Trivy scan results not found"
          fi

  build:
    name: üê≥ Build & Push Image
    needs: security-scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
      packages: write
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üîê Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: üè∑Ô∏è Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.source=${{ github.repository }}

      - name: üê≥ Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:v0.12.0
            network=host

      - name: üöÄ Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          pull: true
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64
          provenance: false
          sbom: false
          outputs: type=image,compression=gzip
          # Temporarily disabled cache due to GitHub Actions Cache service issues
          # cache-from: type=gha,scope=${{ github.workflow }}-${{ github.ref }}
          # cache-to: type=gha,mode=max,scope=${{ github.workflow }}-${{ github.ref }}

      - name: ‚úÖ Verify build
        run: |
          if [ -n "${{ steps.meta.outputs.tags }}" ]; then
            echo "‚úÖ Build successful: ${{ steps.meta.outputs.tags }}"
          else
            echo "‚ùå Build failed"
            exit 1
          fi

      - name: üßπ Cleanup build cache
        if: always()
        run: |
          docker builder prune -f
          docker system prune -f

  notification:
    name: üì¢ Security & Build Notification
    needs: [security-scan, build]
    runs-on: ubuntu-latest
    timeout-minutes: 3
    if: always()
    steps:
      - name: üì¢ Send Discord notification
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          BUILD_STATUS: ${{ needs.build.outcome == 'success' && 'success' || 'failure' }}
          SECURITY_STATUS: ${{ needs.security-scan.outcome == 'success' && 'success' || 'failure' }}
        run: |
          sudo apt-get update && sudo apt-get install -y jq

          # Determine overall status
          if [ "$BUILD_STATUS" = "success" ]; then
            COLOR=3066993
            ICON="‚úÖ"
            DESCRIPTION="üöÄ **Build th√†nh c√¥ng**"
          else
            COLOR=15158332
            ICON="‚ùå"
            DESCRIPTION="‚ùå **Build th·∫•t b·∫°i**"
          fi

          # Security warning if needed
          if [ "$SECURITY_STATUS" != "success" ]; then
            DESCRIPTION="$DESCRIPTION\n‚ö†Ô∏è **C√≥ c·∫£nh b√°o b·∫£o m·∫≠t**"
          fi

          JSON_PAYLOAD=$(jq -n \
            --arg status "$BUILD_STATUS" \
            --arg icon "$ICON" \
            --arg description "$DESCRIPTION" \
            --arg color "$COLOR" \
            --arg security_status "$SECURITY_STATUS" \
            ' {
                embeds: [{
                  title: "üèóÔ∏è BUILD & SECURITY SCAN",
                  description: $description,
                  color: ($color | tonumber),
                  fields: [
                    { name: "üìä Build Status", value: "\($icon) \($status | ascii_upcase)", inline: true },
                    { name: "üîí Security Status", value: ($security_status == "success" ? "‚úÖ PASS" : "‚ö†Ô∏è WARNING"), inline: true }
                  ],
                  footer: { "text": "üèóÔ∏è Build & Security Scan" },
                  timestamp: (now | strftime("%Y-%m-%dT%H:%M:%SZ"))
                }]
              }')

          curl -s -H "Content-Type: application/json" -X POST -d "$JSON_PAYLOAD" "$DISCORD_WEBHOOK" || echo "L·ªói g·ª≠i th√¥ng b√°o Discord"
