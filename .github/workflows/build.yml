name: üèóÔ∏è Build Docker Image

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: tedydev-web/server-shopsifu

jobs:
  build:
    name: üê≥ Build & Push Image
    # Run independently from security scan to avoid delays
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
      packages: write
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üîê Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: üè∑Ô∏è Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.source=${{ github.repository }}

      - name: üê≥ Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:v0.12.0
            network=host

      - name: üöÄ Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          pull: true
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64
          provenance: false
          sbom: false
          outputs: type=image,compression=gzip
          # Temporarily disabled cache due to GitHub Actions Cache service issues
          # cache-from: type=gha,scope=${{ github.workflow }}-${{ github.ref }}
          # cache-to: type=gha,mode=max,scope=${{ github.workflow }}-${{ github.ref }}

      - name: ‚úÖ Verify build
        run: |
          if [ -n "${{ steps.meta.outputs.tags }}" ]; then
            echo "‚úÖ Build successful: ${{ steps.meta.outputs.tags }}"
          else
            echo "‚ùå Build failed"
            exit 1
          fi

      - name: üßπ Cleanup build cache
        if: always()
        run: |
          docker builder prune -f
          docker system prune -f

  notification:
    name: üì¢ Build Notification
    needs: [build]
    runs-on: ubuntu-latest
    timeout-minutes: 3
    if: always()
    steps:
      - name: üì¢ Send Discord notification
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          BUILD_OUTCOME: ${{ needs.build.outcome }}
          BUILD_RESULT: ${{ needs.build.result }}
        run: |
          sudo apt-get update && sudo apt-get install -y jq

          # Debug build status
          echo "üîç Build Outcome: $BUILD_OUTCOME"
          echo "üîç Build Result: $BUILD_RESULT"

          # Determine build status with better logic
          if [ "$BUILD_OUTCOME" = "success" ] || [ "$BUILD_RESULT" = "success" ]; then
            COLOR=3066993
            ICON="‚úÖ"
            DESCRIPTION="üöÄ **Build th√†nh c√¥ng**"
            BUILD_STATUS="SUCCESS"
          else
            COLOR=15158332
            ICON="‚ùå"
            DESCRIPTION="‚ùå **Build th·∫•t b·∫°i**"
            BUILD_STATUS="FAILURE"
          fi

          # Create simple JSON payload to avoid parsing issues
          JSON_PAYLOAD="{
            \"embeds\": [{
              \"title\": \"BUILD STATUS\",
              \"description\": \"$DESCRIPTION\",
              \"color\": $COLOR,
              \"fields\": [
                {
                  \"name\": \"Build Status\",
                  \"value\": \"$ICON $BUILD_STATUS\",
                  \"inline\": true
                },
                {
                  \"name\": \"Build Outcome\",
                  \"value\": \"$BUILD_OUTCOME\",
                  \"inline\": true
                },
                {
                  \"name\": \"Repository\",
                  \"value\": \"${{ github.repository }}\",
                  \"inline\": true
                }
              ],
              \"footer\": {
                \"text\": \"Build Status\"
              },
              \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"
            }]
          }"

          # Send notification with retry logic
          MAX_RETRIES=3
          for i in $(seq 1 $MAX_RETRIES); do
            if curl -s -H "Content-Type: application/json" -X POST -d "$JSON_PAYLOAD" "$DISCORD_WEBHOOK"; then
              echo "‚úÖ Discord notification sent successfully"
              break
            else
              echo "‚ö†Ô∏è Attempt $i/$MAX_RETRIES failed"
              if [ $i -lt $MAX_RETRIES ]; then
                sleep 2
              else
                echo "‚ùå Failed to send Discord notification after $MAX_RETRIES attempts"
              fi
            fi
          done
