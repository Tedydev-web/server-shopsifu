name: üì¢ Send Notification

on:
  workflow_run:
    workflows: ['üöÄ Deploy to Production']
    types: [completed]
    branches: [main, master]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: tedydev-web/server-shopsifu
  VPS_HOST: ${{ secrets.VPS_HOST }}
  VPS_USERNAME: ${{ secrets.VPS_USERNAME }}
  VPS_PATH: ${{ secrets.VPS_PATH }}

jobs:
  notification:
    name: üì¢ Send Discord Notification
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: always()
    steps:
      - name: üì• Checkout repository for commit info
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üì¢ Send Discord notification
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.VPS_HOST }}
          username: ${{ env.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          timeout: 120s
          command_timeout: 180s
          script: |
            set -euo pipefail

            # Set environment variables (with error handling)
            export DISCORD_WEBHOOK="${{ secrets.DISCORD_WEBHOOK }}"
            export STATUS="${{ github.event.workflow_run.conclusion == 'success' && 'success' || 'failure' }}"
            export BRANCH="${{ github.event.workflow_run.head_branch || github.ref_name }}"
            export ACTOR="${{ github.event.workflow_run.actor.login || github.actor }}"
            export COMMIT_SHA="${{ github.event.workflow_run.head_sha || github.sha }}"
            export REPO="${{ github.repository }}"
            export RUN_ID="${{ github.run_id }}"
            export DEPLOY_TIME="${{ github.event.workflow_run.run_duration || 'N/A' }}"

            # Get detailed error information if deployment failed
            if [ "${{ github.event.workflow_run.conclusion }}" != "success" ]; then
              export ERROR_DETAILS="${{ github.event.workflow_run.conclusion }}"
              export FAILURE_REASON="${{ github.event.workflow_run.conclusion == 'failure' && 'Deployment failed' || github.event.workflow_run.conclusion == 'cancelled' && 'Deployment cancelled' || github.event.workflow_run.conclusion == 'timed_out' && 'Deployment timed out' || 'Deployment failed with unknown reason' }}"
            else
              export ERROR_DETAILS=""
              export FAILURE_REASON=""
            fi

            # Get commit message and date from workflow_run event
            export COMMIT_MESSAGE="${{ github.event.workflow_run.head_commit.message || 'Deployment from build workflow' }}"
            export COMMIT_DATE="${{ github.event.workflow_run.head_commit.timestamp || github.event.workflow_run.created_at || '' }}"

            # Change to project directory with better error handling
            if [ -n "${{ env.VPS_PATH }}" ] && [ -d "${{ env.VPS_PATH }}" ]; then
              cd "${{ env.VPS_PATH }}" || {
                echo "‚ö†Ô∏è Cannot change to project directory, using current directory"
                pwd
              }
            else
              echo "‚ö†Ô∏è VPS_PATH not set or directory doesn't exist, using current directory"
              pwd
            fi

            # Install jq if not present (with better error handling)
            if ! command -v jq >/dev/null 2>&1; then
              echo "üì¶ Installing jq..."
              if sudo apt-get update -qq >/dev/null 2>&1 && sudo apt-get install -y -qq jq >/dev/null 2>&1; then
                echo "‚úÖ jq installed successfully"
              else
                echo "‚ö†Ô∏è Failed to install jq, using fallback method"
                export JQ_UNAVAILABLE=true
              fi
            else
              echo "‚úÖ jq is already available"
            fi

            # Get commit information
            COMMIT_SHORT_SHA=$(echo "$COMMIT_SHA" | cut -c1-7)

            # Get commit info with improved error handling
            echo "üìä Gathering commit information..."

            if [ "${{ github.event_name }}" = "workflow_run" ]; then
              HEAD_SHA="${{ github.event.workflow_run.head_sha || '' }}"
              if [ -n "$HEAD_SHA" ] && git rev-parse --verify "$HEAD_SHA" >/dev/null 2>&1; then
                COMMIT_LIST=$(git log --oneline --no-merges -3 "$HEAD_SHA" 2>/dev/null | sed 's/^/‚Ä¢ /' | head -3 || echo "‚Ä¢ Recent commits from head SHA")
                CHANGES_SUMMARY=$(git log --stat --oneline -1 "$HEAD_SHA" 2>/dev/null | grep -E "^ [0-9]+ files? changed" | tail -1 || echo "Changes from head SHA")
              else
                echo "‚ö†Ô∏è HEAD_SHA not available or invalid, using current branch"
                COMMIT_LIST=$(git log --oneline --no-merges -3 2>/dev/null | sed 's/^/‚Ä¢ /' | head -3 || echo "‚Ä¢ Recent commits")
                CHANGES_SUMMARY=$(git log --stat --oneline -1 2>/dev/null | grep -E "^ [0-9]+ files? changed" | tail -1 || echo "Recent changes")
              fi
            else
              COMMIT_LIST=$(git log --oneline --no-merges -3 2>/dev/null | sed 's/^/‚Ä¢ /' | head -3 || echo "‚Ä¢ Recent commits")
              CHANGES_SUMMARY=$(git log --stat --oneline -1 2>/dev/null | grep -E "^ [0-9]+ files? changed" | tail -1 || echo "Recent changes")
            fi

            # Sanitize and limit output length
            COMMIT_LIST=$(echo "$COMMIT_LIST" | head -3 | tr -d '\n\r' | sed 's/"/\\"/g' | sed 's/\\/\\\\/g' | head -c 300)
            CHANGES_SUMMARY=$(echo "$CHANGES_SUMMARY" | head -c 100 | tr -d '\n\r' | sed 's/"/\\"/g' | sed 's/\\/\\\\/g')
            COMMIT_MESSAGE=$(echo "$COMMIT_MESSAGE" | tr -d '\n\r' | sed 's/"/\\"/g' | sed 's/\\/\\\\/g' | head -c 200)

            # Get Docker status with error handling
            echo "üê≥ Getting Docker status..."
            if command -v docker >/dev/null 2>&1; then
              DOCKER_STATUS=$(docker ps --format "table {{.Names}}\t{{.Status}}" 2>/dev/null | head -6 | sed 's/  */ | /g' | tr '\n' ' ' | head -c 500 || echo "Docker containers not accessible")
            else
              DOCKER_STATUS="Docker not available"
            fi

            # Get basic system info with error handling
            echo "üíª Getting system information..."
            CPU_CORES=$(nproc 2>/dev/null || echo "N/A")
            MEMORY=$(free -h 2>/dev/null | grep Mem | awk '{print $2}' || echo "N/A")
            DISK_SPACE=$(df -h / 2>/dev/null | tail -1 | awk '{print $4}' || echo "N/A")
            SYSTEM_INFO="CPU: $CPU_CORES cores | Memory: $MEMORY | Disk: $DISK_SPACE available"

            # Sanitize system info
            SYSTEM_INFO=$(echo "$SYSTEM_INFO" | tr -d '\n\r' | sed 's/"/\\"/g' | sed 's/\\/\\\\/g' | head -c 200)

            # Create JSON payload with improved error handling
            echo "üìù Creating Discord notification payload..."

            if [ "${JQ_UNAVAILABLE:-false}" = "true" ]; then
              echo "‚ö†Ô∏è jq unavailable, using fallback JSON creation"
              # Create fallback payload without jq
              JSON_PAYLOAD='{"embeds":[{"title":"üöÄ SERVER - Deploy Production","description":"'
              if [ "$STATUS" = "success" ]; then
                JSON_PAYLOAD="${JSON_PAYLOAD}üöÄ Deploy th√†nh c√¥ng"
              else
                JSON_PAYLOAD="${JSON_PAYLOAD}‚ùå Deploy th·∫•t b·∫°i"
              fi
              JSON_PAYLOAD="${JSON_PAYLOAD}'","color":'
              if [ "$STATUS" = "success" ]; then
                JSON_PAYLOAD="${JSON_PAYLOAD}3066993"
              else
                JSON_PAYLOAD="${JSON_PAYLOAD}15158332"
              fi
              JSON_PAYLOAD="${JSON_PAYLOAD}',"fields":[{"name":"üìä Tr·∫°ng th√°i","value":"'
              if [ "$STATUS" = "success" ]; then
                JSON_PAYLOAD="${JSON_PAYLOAD}‚úÖ SUCCESS"
              else
                JSON_PAYLOAD="${JSON_PAYLOAD}‚ùå FAILURE"
              fi
              JSON_PAYLOAD="${JSON_PAYLOAD}'","inline":true},{"name":"üåø Nh√°nh","value":"'"$BRANCH"'","inline":true},{"name":"üë§ Ng∆∞·ªùi th·ª±c hi·ªán","value":"'"$ACTOR"'","inline":true},{"name":"üîó Commit SHA","value":"`'"$COMMIT_SHORT_SHA"'`","inline":true}],"footer":{"text":"üöÄ Deploy Production (Fallback)"},"timestamp":"'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"}]}'
            else
              # Use jq for proper JSON creation
              JSON_PAYLOAD=$(jq -n \
                --arg status "$STATUS" \
                --arg icon "$([ "$STATUS" = "success" ] && echo "‚úÖ" || echo "‚ùå")" \
                --arg description "$([ "$STATUS" = "success" ] && echo "üöÄ Deploy th√†nh c√¥ng" || echo "‚ùå Deploy th·∫•t b·∫°i")" \
                --arg color "$([ "$STATUS" = "success" ] && echo "3066993" || echo "15158332")" \
                --arg branch "$BRANCH" \
                --arg actor "$ACTOR" \
                --arg commit_sha "$COMMIT_SHORT_SHA" \
                --arg commit_message "$COMMIT_MESSAGE" \
                --arg changes_summary "$CHANGES_SUMMARY" \
                --arg commit_list "$COMMIT_LIST" \
                --arg docker_status "$DOCKER_STATUS" \
                --arg system_info "$SYSTEM_INFO" \
                --arg repo "$REPO" \
                --arg run_id "$RUN_ID" \
                --arg error_details "$ERROR_DETAILS" \
                --arg failure_reason "$FAILURE_REASON" \
                '{
                  embeds: [{
                    title: "üöÄ SERVER - Deploy Production",
                    description: $description,
                    color: ($color | tonumber),
                    fields: [
                      { name: "üìä Tr·∫°ng th√°i", value: "\($icon) \($status | ascii_upcase)", inline: true },
                      { name: "üåø Nh√°nh", value: $branch, inline: true },
                      { name: "üë§ Ng∆∞·ªùi th·ª±c hi·ªán", value: $actor, inline: true },
                      { name: "üîó Commit SHA", value: "`\($commit_sha)`", inline: true },
                      { name: "üìù Commit Message", value: $commit_message, inline: false },
                      { name: "üìä Changes Summary", value: $changes_summary, inline: false },
                      { name: "üìã Danh s√°ch Commits", value: "```\($commit_list)```", inline: false },
                      { name: "üê≥ Docker Status", value: "```\($docker_status)```", inline: false },
                      { name: "üíª System Info", value: "```\($system_info)```", inline: false }
                    ] + (if $error_details != "" then [
                      { name: "üö® Error Details", value: $error_details, inline: false },
                      { name: "‚ùå Failure Reason", value: $failure_reason, inline: false }
                    ] else [] end),
                    url: "https://github.com/\($repo)/actions/runs/\($run_id)",
                    footer: { "text": "üöÄ Deploy Production (Enhanced)" },
                    timestamp: (now | strftime("%Y-%m-%dT%H:%M:%SZ"))
                  }]
                }' 2>/dev/null || {
                  echo "‚ö†Ô∏è jq JSON creation failed, using fallback"
                  JSON_PAYLOAD='{"embeds":[{"title":"üöÄ SERVER - Deploy Production","description":"üöÄ Deploy th√†nh c√¥ng","color":3066993,"fields":[{"name":"üìä Tr·∫°ng th√°i","value":"‚úÖ SUCCESS","inline":true},{"name":"üåø Nh√°nh","value":"'"$BRANCH"'","inline":true},{"name":"üë§ Ng∆∞·ªùi th·ª±c hi·ªán","value":"'"$ACTOR"'","inline":true},{"name":"üîó Commit SHA","value":"`'"$COMMIT_SHORT_SHA"'`","inline":true}],"footer":{"text":"üöÄ Deploy Production (Fallback)"},"timestamp":"'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"}]}'
                }
              )
            fi

            # Validate JSON payload
            if [ "${JQ_UNAVAILABLE:-false}" != "true" ] && ! echo "$JSON_PAYLOAD" | jq . >/dev/null 2>&1; then
              echo "‚ö†Ô∏è Invalid JSON payload generated, using simple fallback"
              JSON_PAYLOAD='{"embeds":[{"title":"üöÄ SERVER - Deploy Production","description":"'"$([ "$STATUS" = "success" ] && echo "üöÄ Deploy th√†nh c√¥ng" || echo "‚ùå Deploy th·∫•t b·∫°i")"'","color":'"$([ "$STATUS" = "success" ] && echo "3066993" || echo "15158332")"',"fields":[{"name":"üìä Tr·∫°ng th√°i","value":"'"$([ "$STATUS" = "success" ] && echo "‚úÖ SUCCESS" || echo "‚ùå FAILURE")"'","inline":true},{"name":"üåø Nh√°nh","value":"'"$BRANCH"'","inline":true},{"name":"üë§ Ng∆∞·ªùi th·ª±c hi·ªán","value":"'"$ACTOR"'","inline":true},{"name":"üîó Commit SHA","value":"`'"$COMMIT_SHORT_SHA"'`","inline":true}],"footer":{"text":"üöÄ Deploy Production (Simple)"},"timestamp":"'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"}]}'
            fi

            # Send to Discord with enhanced retry logic
            echo "üì° Sending Discord notification..."
            MAX_RETRIES=3
            SUCCESS=false

            # Check if Discord webhook is available
            if [ -z "$DISCORD_WEBHOOK" ]; then
              echo "‚ùå Discord webhook not configured"
              echo "‚ö†Ô∏è Skipping notification, but not failing the workflow"
              exit 0
            fi

            for i in $(seq 1 $MAX_RETRIES); do
              echo "üîÑ Attempting to send Discord notification (attempt $i/$MAX_RETRIES)..."

              # Send notification with timeout and better error handling
              if RESPONSE=$(timeout 30 curl -s -w "\nHTTP_STATUS:%{http_code}" -H "Content-Type: application/json" -X POST -d "$JSON_PAYLOAD" "$DISCORD_WEBHOOK" 2>/dev/null); then
                HTTP_STATUS=$(echo "$RESPONSE" | grep "HTTP_STATUS:" | cut -d: -f2)

                if [ "$HTTP_STATUS" = "204" ] || [ "$HTTP_STATUS" = "200" ]; then
                  echo "‚úÖ Discord notification sent successfully (HTTP $HTTP_STATUS)"
                  SUCCESS=true
                  break
                else
                  echo "‚ö†Ô∏è Attempt $i/$MAX_RETRIES failed (HTTP $HTTP_STATUS)"
                  if [ "$i" = "$MAX_RETRIES" ]; then
                    echo "üìù Response details: $(echo "$RESPONSE" | head -5)"
                  fi
                fi
              else
                echo "‚ö†Ô∏è Attempt $i/$MAX_RETRIES failed (network/timeout error)"
              fi

              if [ $i -lt $MAX_RETRIES ]; then
                echo "‚è≥ Waiting 3 seconds before retry..."
                sleep 3
              fi
            done

            # Final status report
            if [ "$SUCCESS" = "true" ]; then
              echo "üéâ Discord notification process completed successfully"
              echo "üìä Final status: $STATUS"
              echo "‚úÖ All operations completed without errors"
              exit 0
            else
              echo "‚ùå Failed to send Discord notification after $MAX_RETRIES attempts"
              echo "‚ö†Ô∏è Notification failed, but workflow continues without error"
              echo "üîç Check Discord webhook URL and network connectivity"
              # Exit successfully to avoid failing the workflow
              exit 0
            fi
