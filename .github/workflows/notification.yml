name: üì¢ Send Notification

on:
  workflow_run:
    workflows: ['üöÄ Deploy to Production']
    types: [completed]
    branches: [main, master]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: tedydev-web/server-shopsifu
  VPS_HOST: ${{ secrets.VPS_HOST }}
  VPS_USERNAME: ${{ secrets.VPS_USERNAME }}
  VPS_PATH: ${{ secrets.VPS_PATH }}

jobs:
  notification:
    name: üì¢ Send Discord Notification
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: always()
    steps:
      - name: üì• Checkout repository for commit info
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: üì¢ Send Discord notification
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ env.VPS_HOST }}
          username: ${{ env.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          timeout: 120s
          command_timeout: 180s
          script: |
            set -euo pipefail

            # T·ªëi ∆∞u h√≥a: Gi·∫£m output v√† tƒÉng hi·ªáu su·∫•t
            exec 2>/dev/null || true

            # Set environment variables
            export DISCORD_WEBHOOK="${{ secrets.DISCORD_WEBHOOK }}"
            export STATUS="${{ github.event.workflow_run.conclusion == 'success' && 'success' || 'failure' }}"
            export BRANCH="${{ github.event.workflow_run.head_branch || github.ref_name }}"
            export ACTOR="${{ github.event.workflow_run.actor.login || github.actor }}"
            export COMMIT_SHA="${{ github.event.workflow_run.head_sha || github.sha }}"
            export REPO="${{ github.repository }}"
            export RUN_ID="${{ github.run_id }}"
            export DEPLOY_TIME="${{ github.event.workflow_run.run_duration || 'N/A' }}"

            # Get detailed error information if deployment failed
            if [ "${{ github.event.workflow_run.conclusion }}" != "success" ]; then
              export ERROR_DETAILS="${{ github.event.workflow_run.conclusion }}"
              export FAILURE_REASON="${{ github.event.workflow_run.conclusion == 'failure' && 'Deployment failed' || github.event.workflow_run.conclusion == 'cancelled' && 'Deployment cancelled' || github.event.workflow_run.conclusion == 'timed_out' && 'Deployment timed out' || 'Deployment failed with unknown reason' }}"
            else
              export ERROR_DETAILS=""
              export FAILURE_REASON=""
            fi

            # Get commit message and date from workflow_run event
            export COMMIT_MESSAGE="${{ github.event.workflow_run.head_commit.message || 'Deployment from build workflow' }}"
            export COMMIT_DATE="${{ github.event.workflow_run.head_commit.timestamp || github.event.workflow_run.created_at || '' }}"

            # Change to project directory
            cd "${{ env.VPS_PATH }}" || exit 1

            # Install jq if not present (silent install)
            sudo apt-get update -qq >/dev/null 2>&1
            sudo apt-get install -y -qq jq >/dev/null 2>&1

            # Get commit information
            COMMIT_SHORT_SHA=$(echo "$COMMIT_SHA" | cut -c1-7)

            # T·ªëi ∆∞u h√≥a: L·∫•y commit info m·ªôt c√°ch hi·ªáu qu·∫£
            if [ "${{ github.event_name }}" = "workflow_run" ]; then
              HEAD_SHA="${{ github.event.workflow_run.head_sha || '' }}"
              if [ -n "$HEAD_SHA" ]; then
                COMMIT_LIST=$(git log --oneline --no-merges -3 "$HEAD_SHA" 2>/dev/null | sed 's/^/‚Ä¢ /' | head -3 || echo "‚Ä¢ Recent commits from head SHA")
                CHANGES_SUMMARY=$(git log --stat --oneline -1 "$HEAD_SHA" 2>/dev/null | grep -E "^ [0-9]+ files? changed" | tail -1 || echo "Changes from head SHA")
              else
                COMMIT_LIST=$(git log --oneline --no-merges -3 2>/dev/null | sed 's/^/‚Ä¢ /' | head -3 || echo "‚Ä¢ Recent commits")
                CHANGES_SUMMARY=$(git log --stat --oneline -1 2>/dev/null | grep -E "^ [0-9]+ files? changed" | tail -1 || echo "Recent changes")
              fi
            else
              COMMIT_LIST=$(git log --oneline --no-merges -3 2>/dev/null | sed 's/^/‚Ä¢ /' | head -3 || echo "‚Ä¢ Recent commits")
              CHANGES_SUMMARY=$(git log --stat --oneline -1 2>/dev/null | grep -E "^ [0-9]+ files? changed" | tail -1 || echo "Recent changes")
            fi

            # T·ªëi ∆∞u h√≥a: Gi·ªõi h·∫°n ƒë·ªô d√†i output v√† sanitize
            COMMIT_LIST=$(echo "$COMMIT_LIST" | head -3 | tr -d '\n\r' | sed 's/"/\\"/g' | sed 's/\\/\\\\/g' | head -c 300)
            CHANGES_SUMMARY=$(echo "$CHANGES_SUMMARY" | head -c 100 | tr -d '\n\r' | sed 's/"/\\"/g' | sed 's/\\/\\\\/g')
            COMMIT_MESSAGE=$(echo "$COMMIT_MESSAGE" | tr -d '\n\r' | sed 's/"/\\"/g' | sed 's/\\/\\\\/g' | head -c 200)

            # Get Docker status (simplified)
            DOCKER_STATUS=$(docker ps --format "table {{.Names}}\t{{.Status}}" | head -6 2>/dev/null | sed 's/  */ | /g' | tr '\n' ' ' | head -c 500 || echo "Docker status unavailable")

            # Get basic system info
            SYSTEM_INFO="CPU: $(nproc) cores | Memory: $(free -h | grep Mem | awk '{print $2}' 2>/dev/null || echo 'N/A') | Disk: $(df -h / | tail -1 | awk '{print $4}' 2>/dev/null || echo 'N/A') available"

            # Sanitize system info
            SYSTEM_INFO=$(echo "$SYSTEM_INFO" | tr -d '\n\r' | sed 's/"/\\"/g' | sed 's/\\/\\\\/g' | head -c 200)

            # Create simplified JSON payload with better error handling
            JSON_PAYLOAD=$(jq -n \
              --arg status "$STATUS" \
              --arg icon "$([ "$STATUS" = "success" ] && echo "‚úÖ" || echo "‚ùå")" \
              --arg description "$([ "$STATUS" = "success" ] && echo "üöÄ Deploy th√†nh c√¥ng" || echo "‚ùå Deploy th·∫•t b·∫°i")" \
              --arg color "$([ "$STATUS" = "success" ] && echo "3066993" || echo "15158332")" \
              --arg branch "$BRANCH" \
              --arg actor "$ACTOR" \
              --arg commit_sha "$COMMIT_SHORT_SHA" \
              --arg commit_message "$COMMIT_MESSAGE" \
              --arg changes_summary "$CHANGES_SUMMARY" \
              --arg commit_list "$COMMIT_LIST" \
              --arg docker_status "$DOCKER_STATUS" \
              --arg system_info "$SYSTEM_INFO" \
              --arg repo "$REPO" \
              --arg run_id "$RUN_ID" \
              --arg error_details "$ERROR_DETAILS" \
              --arg failure_reason "$FAILURE_REASON" \
              '{
                embeds: [{
                  title: "üöÄ SERVER - Deploy Production",
                  description: $description,
                  color: ($color | tonumber),
                  fields: [
                    { name: "üìä Tr·∫°ng th√°i", value: "\($icon) \($status | ascii_upcase)", inline: true },
                    { name: "üåø Nh√°nh", value: $branch, inline: true },
                    { name: "üë§ Ng∆∞·ªùi th·ª±c hi·ªán", value: $actor, inline: true },
                    { name: "üîó Commit SHA", value: "`\($commit_sha)`", inline: true },
                    { name: "üìù Commit Message", value: $commit_message, inline: false },
                    { name: "üìä Changes Summary", value: $changes_summary, inline: false },
                    { name: "üìã Danh s√°ch Commits", value: "```\($commit_list)```", inline: false },
                    { name: "üê≥ Docker Status", value: "```\($docker_status)```", inline: false },
                    { name: "üíª System Info", value: "```\($system_info)```", inline: false }
                    $([ -n "$ERROR_DETAILS" ] && echo '{ name: "üö® Error Details", value: $error_details, inline: false },' || echo '') \
                    $([ -n "$ERROR_DETAILS" ] && echo '{ name: "‚ùå Failure Reason", value: $failure_reason, inline: false },' || echo '') \
                  ],
                  url: "https://github.com/\($repo)/actions/runs/\($run_id)",
                  footer: { "text": "üöÄ Deploy Production (Optimized)" },
                  timestamp: (now | strftime("%Y-%m-%dT%H:%M:%SZ"))
                }]
              }' 2>/dev/null || echo '{"error": "JSON generation failed"}')

            # Validate JSON payload with better error handling
            if ! echo "$JSON_PAYLOAD" | jq . >/dev/null 2>&1; then
              echo "‚ùå Invalid JSON payload generated"
              echo "‚ùå JSON content: $JSON_PAYLOAD"
              # Create a simple fallback payload
              JSON_PAYLOAD='{"embeds":[{"title":"üöÄ SERVER - Deploy Production","description":"üöÄ Deploy th√†nh c√¥ng","color":3066993,"fields":[{"name":"üìä Tr·∫°ng th√°i","value":"‚úÖ SUCCESS","inline":true},{"name":"üåø Nh√°nh","value":"'$BRANCH'","inline":true},{"name":"üë§ Ng∆∞·ªùi th·ª±c hi·ªán","value":"'$ACTOR'","inline":true},{"name":"üîó Commit SHA","value":"`'$COMMIT_SHORT_SHA'`","inline":true}],"footer":{"text":"üöÄ Deploy Production (Fallback"},"timestamp":"'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"}]}'
            fi

            # Send to Discord with improved retry logic
            MAX_RETRIES=3
            SUCCESS=false

            for i in $(seq 1 $MAX_RETRIES); do
              echo "üîÑ Attempting to send Discord notification (attempt $i/$MAX_RETRIES)..."
              
              RESPONSE=$(curl -s -w "\nHTTP_STATUS:%{http_code}" -H "Content-Type: application/json" -X POST -d "$JSON_PAYLOAD" "$DISCORD_WEBHOOK" 2>/dev/null || echo "HTTP_STATUS:000")
              HTTP_STATUS=$(echo "$RESPONSE" | grep "HTTP_STATUS:" | cut -d: -f2)
              
              if [ "$HTTP_STATUS" = "204" ] || [ "$HTTP_STATUS" = "200" ]; then
                echo "‚úÖ Discord notification sent successfully (HTTP $HTTP_STATUS)"
                SUCCESS=true
                break
              else
                echo "‚ö†Ô∏è Attempt $i/$MAX_RETRIES failed (HTTP $HTTP_STATUS)"
                if [ $i -lt $MAX_RETRIES ]; then
                  echo "‚è≥ Waiting 2 seconds before retry..."
                  sleep 2
                fi
              fi
            done

            if [ "$SUCCESS" = "true" ]; then
              echo "üéâ Discord notification process completed successfully"
              echo "üìä Final status: $STATUS"
              echo "‚úÖ All operations completed without errors"
            else
              echo "‚ùå Failed to send Discord notification after $MAX_RETRIES attempts"
              echo "‚ùå Final HTTP Status: $HTTP_STATUS"
              echo "‚ö†Ô∏è Continuing without failing the workflow..."
              # Don't exit with error code to avoid failing the workflow
              exit 0
            fi
