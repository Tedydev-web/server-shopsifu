name: üîÑ Rollback Production

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Image tag ƒë·ªÉ rollback (ƒë·ªÉ tr·ªëng ƒë·ªÉ rollback v·ªÅ latest)'
        required: false
        default: ''
      reason:
        description: 'L√Ω do rollback'
        required: false
        default: 'Manual rollback'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: tedydev-web/server-shopsifu
  VPS_HOST: ${{ secrets.VPS_HOST }}
  VPS_USERNAME: ${{ secrets.VPS_USERNAME }}
  VPS_PATH: ${{ secrets.VPS_PATH }}

jobs:
  rollback:
    name: üîÑ Rollback Application
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üîÑ Perform rollback
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ env.VPS_HOST }}
          username: ${{ env.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -euo pipefail
            cd "${{ env.VPS_PATH }}"

            echo "üîÑ Starting rollback process..."

            # Login to GHCR
            echo '${{ secrets.GITHUB_TOKEN }}' | docker login ghcr.io -u '${{ github.actor }}' --password-stdin

            # Create emergency backup before rollback
            echo "üóÑÔ∏è Creating emergency backup before rollback..."
            BACKUP_TIMESTAMP=$(date +%Y%m%d_%H%M%S)

            # Backup current database state
            docker exec shopsifu_postgres pg_dump -U shopsifu -d shopsifu --format=custom --file=/tmp/emergency_backup_$BACKUP_TIMESTAMP.backup
            docker cp shopsifu_postgres:/tmp/emergency_backup_$BACKUP_TIMESTAMP.backup /backup/shopsifu/database/

            # Backup current config
            tar -czf /backup/shopsifu/config/emergency_config_$BACKUP_TIMESTAMP.tar.gz config/ monitoring/ .env.docker docker-compose.yml

            echo "‚úÖ Emergency backup created: emergency_backup_$BACKUP_TIMESTAMP.backup"

            # Stop services
            echo "üõë Stopping services..."
            docker compose -f ${{ env.VPS_PATH }}/docker-compose.yml down

            # Determine target image tag
            TARGET_TAG="${{ github.event.inputs.image_tag }}"
            if [ -z "$TARGET_TAG" ]; then
              TARGET_TAG="latest"
              echo "Rolling back to latest image tag: $TARGET_TAG"
            else
              echo "Rolling back to specified image tag: $TARGET_TAG"
            fi

            # Update docker-compose.yml with target image tag
            echo "üìù Updating docker-compose.yml with image tag: $TARGET_TAG"
            sed -i "s|image: ghcr.io/tedydev-web/server-shopsifu:.*|image: ghcr.io/tedydev-web/server-shopsifu:$TARGET_TAG|" docker-compose.yml

            # Pull target image
            echo "üì• Pulling target image: ghcr.io/tedydev-web/server-shopsifu:$TARGET_TAG"
            docker pull "ghcr.io/tedydev-web/server-shopsifu:$TARGET_TAG"

            # Deploy with target image
            echo "üöÄ Redeploying with target image..."
            docker compose -f ${{ env.VPS_PATH }}/docker-compose.yml up -d

            echo "‚úÖ Rollback completed successfully"

  health-check:
    name: üè• Verify Rollback
    needs: rollback
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: üè• Health check after rollback
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ env.VPS_HOST }}
          username: ${{ env.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -euo pipefail

            echo "üè• Verifying rollback health..."
            ATTEMPTS=15
            SLEEP=4

            for i in $(seq 1 $ATTEMPTS); do
              echo "Attempt $i/$ATTEMPTS..."
              if curl -fsS -m 5 http://localhost:3000/health > /dev/null; then
                echo "‚úÖ Health check passed after rollback!"
                exit 0
              fi
              sleep $SLEEP
            done

            echo "‚ùå Health check failed after rollback"
            exit 1

  notification:
    name: üì¢ Rollback Notification
    needs: [rollback, health-check]
    runs-on: ubuntu-latest
    timeout-minutes: 3
    if: always()
    steps:
      - name: üì¢ Send Discord notification
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          STATUS: ${{ needs.health-check.outcome == 'success' && 'success' || 'failure' }}
          REASON: ${{ github.event.inputs.reason }}
          IMAGE_TAG: ${{ github.event.inputs.image_tag || 'latest' }}
        run: |
          sudo apt-get update && sudo apt-get install -y jq

          COLOR=$([ "$STATUS" = "success" ] && echo 15105570 || echo 15158332)
          ICON=$([ "$STATUS" = "success" ] && echo "‚úÖ" || echo "‚ùå")
          DESCRIPTION=$([ "$STATUS" = "success" ] && echo "üîÑ **Rollback th√†nh c√¥ng**" || echo "‚ùå **Rollback th·∫•t b·∫°i**")

          JSON_PAYLOAD=$(jq -n \
            --arg status "$STATUS" \
            --arg icon "$ICON" \
            --arg description "$DESCRIPTION" \
            --arg reason "$REASON" \
            --arg image_tag "$IMAGE_TAG" \
            --arg color "$COLOR" \
            ' {
                embeds: [{
                  title: "üîÑ SERVER - Rollback Production",
                  description: $description,
                  color: ($color | tonumber),
                  fields: [
                    { name: "üìä Tr·∫°ng th√°i", value: "\($icon) \($status | ascii_upcase)", inline: true },
                    { name: "üìù L√Ω do", value: $reason, inline: false },
                    { name: "üê≥ Image Tag", value: $image_tag, inline: true }
                  ],
                  footer: { "text": "üîÑ Rollback Production" },
                  timestamp: (now | strftime("%Y-%m-%dT%H:%M:%SZ"))
                }]
              }')

          curl -s -H "Content-Type: application/json" -X POST -d "$JSON_PAYLOAD" "$DISCORD_WEBHOOK" || echo "L·ªói g·ª≠i th√¥ng b√°o Discord"
