/**
 * @fileoverview This file defines the Redis key management strategy for the application.
 * It ensures that all Redis keys are consistent, namespaced, and easy to manage.
 *
 * @description
 * The key structure follows the pattern: `domain:entity:[id]:[attribute]`
 * - `domain`: The application area (e.g., 'auth').
 * - `entity`: The type of object being stored (e.g., 'session', 'user').
 * - `id`: The unique identifier for the entity.
 * - `attribute`: A specific property or collection related to the entity (e.g., 'blacklist', 'sessions').
 *
 * This structure helps in:
 * - Avoiding key collisions across different parts of the application.
 * - Logically grouping related data.
 * - Simplifying debugging and key management in Redis.
 * - Using Redis-native data structures effectively (e.g., Hashes for objects, Sets for collections).
 */

import { TypeOfVerificationCodeType } from 'src/routes/auth/shared/constants/auth.constants'

/**
 * A branded type for Redis keys to prevent accidental use of plain strings.
 * This enhances type safety by ensuring that only keys generated by RedisKeyManager are used.
 */
export type RedisKey = string

/**
 * Defines the standardized prefixes for all Redis keys used in the application.
 * Using an enum ensures consistency and avoids magic strings.
 */
export enum RedisPrefix {
  // --- Authentication Domain ---
  AUTH = 'auth',

  // Session-related keys
  SESSION = 'auth:session', // HASH: Stores individual session data. Key: auth:session:<session_id>
  SESSIONS_BY_USER = 'auth:user:sessions', // SET: Stores all session IDs for a user. Key: auth:user:sessions:<user_id>
  SESSIONS_BY_DEVICE = 'auth:device:sessions', // SET: Stores all session IDs for a device. Key: auth:device:sessions:<device_id>
  SESSION_INVALIDATED = 'auth:session:invalidated', // SET: A set of invalidated (blacklisted) session IDs.

  // Device-related keys
  DEVICE_REVERIFY = 'auth:device:reverify', // FLAG (String): Marks a device for reverification. Key: auth:device:reverify:<user_id>:<device_id>

  // Token-related keys
  TOKEN_ACCESS_BLACKLIST = 'auth:token:access:blacklist', // FLAG (String): Blacklisted Access Token JTI. Key: auth:token:access:blacklist:<jti>
  TOKEN_REFRESH_BLACKLIST = 'auth:token:refresh:blacklist', // FLAG (String): Blacklisted Refresh Token JTI. Key: auth:token:refresh:blacklist:<jti>
  TOKEN_REFRESH_USED = 'auth:token:refresh:used', // FLAG (String): Marks a refresh token JTI as used. Key: auth:token:refresh:used:<jti>

  // OTP-related keys
  OTP_DATA = 'auth:otp:data', // HASH: Stores OTP data (code, attempts, etc.). Key: auth:otp:data:<purpose>:<identifier>
  OTP_COOLDOWN = 'auth:otp:cooldown', // FLAG (String): Cooldown timer for sending OTP. Key: auth:otp:cooldown:<purpose>:<identifier>

  // SLT (Short-Lived Token) related keys
  SLT_CONTEXT = 'auth:slt:context', // HASH: Stores the context for an SLT. Key: auth:slt:context:<jti>
  SLT_BLACKLIST = 'auth:slt:blacklist', // FLAG (String): Blacklisted SLT JTI. Key: auth:slt:blacklist:<jti>

  // User activity and security keys
  USER_LOGIN_HISTORY = 'auth:user:login_history', // ZSET: Login history for a user, scored by timestamp. Key: auth:user:login_history:<user_id>
  USER_LOGIN_FAILURES = 'auth:user:login_failures', // COUNTER (String): Tracks login failures for a user. Key: auth:user:login_failures:<user_id>
  USER_ACCOUNT_LOCK = 'auth:user:account_lock', // FLAG (String): Marks a user account as locked. Key: auth:user:account_lock:<user_id>
  USER_ACTIVITY = 'auth:user:activity', // LIST/STREAM: A log of user activities. Key: auth:user:activity:<user_id>
  USER_SUSPICIOUS_NOTIFICATION = 'auth:user:suspicious_notification', // FLAG (String): Prevents spamming suspicious activity notifications. Key: auth:user:suspicious_notification:<user_id>:<rule_type>

  // --- Generic Cache ---
  CACHE = 'cache' // For generic caching via CacheManager. Key: cache:<key>
}

/**
 * A static class that provides methods to generate standardized Redis keys.
 * This ensures that all parts of the application access Redis keys in a consistent manner.
 */
export class RedisKeyManager {
  private static a(...parts: (string | number)[]): string {
    return parts.join(':')
  }

  // --- Session Keys ---
  /**
   * Key for a single session hash.
   * @type HASH
   * @example "auth:session:uuid-of-session"
   */
  public static getSessionKey(sessionId: string): string {
    return `${RedisPrefix.AUTH}:session:${sessionId}`
  }

  /**
   * Key for the set of a user's session IDs.
   * @type SET
   * @example "auth:user:sessions:123"
   */
  public static getUserSessionsKey(userId: number): string {
    return `${RedisPrefix.AUTH}:user:${userId}:sessions`
  }

  /**
   * Key for the set of a device's session IDs.
   * @type SET
   * @example "auth:device:sessions:456"
   */
  public static getDeviceSessionsKey(deviceId: number): string {
    return `${RedisPrefix.AUTH}:device:${deviceId}:sessions`
  }

  /**
   * Key for the set of invalidated session IDs.
   * @type SET
   * @example "auth:session:invalidated"
   */
  public static getInvalidatedSessionsKey(): string {
    return RedisPrefix.SESSION_INVALIDATED
  }

  // --- Device Keys ---
  /**
   * Key for the device reverification flag.
   * @type STRING
   * @example "auth:device:reverify:123:456"
   */
  public static getDeviceReverifyKey(userId: number, deviceId: number): string {
    return this.a(RedisPrefix.DEVICE_REVERIFY, userId, deviceId)
  }

  /**
   * Key to flag that a device requires reverification after a sensitive action.
   * @param deviceId - The ID of the device.
   * @returns `auth:device:<deviceId>:reverify`
   */
  public static getDeviceReverificationKey(deviceId: number): string {
    return `${RedisPrefix.AUTH}:device:${deviceId}:reverify`
  }

  // --- Token Blacklist Keys ---
  /**
   * Key for a blacklisted access token JTI.
   * @type STRING
   * @example "auth:token:access:blacklist:jti-abc"
   */
  public static getAccessTokenBlacklistKey(jti: string): string {
    return `${RedisPrefix.AUTH}:token:access-blacklist:${jti}`
  }

  /**
   * Key for a blacklisted refresh token JTI.
   * @type STRING
   * @example "auth:token:refresh:blacklist:jti-def"
   */
  public static getRefreshTokenBlacklistKey(jti: string): string {
    return `${RedisPrefix.AUTH}:token:refresh-blacklist:${jti}`
  }

  /**
   * Key for a used refresh token JTI.
   * @type STRING
   * @example "auth:token:refresh:used:jti-ghi"
   */
  public static getRefreshTokenUsedKey(jti: string): string {
    return `${RedisPrefix.AUTH}:token:refresh-used:${jti}`
  }

  // --- OTP Keys ---
  /**
   * Key for OTP data hash.
   * @type HASH
   * @example "auth:otp:data:REGISTER:user@example.com"
   */
  public static getOtpDataKey(type: string, identifier: string): string {
    return this.a(RedisPrefix.OTP_DATA, type, identifier)
  }

  /**
   * Key for OTP cooldown timer.
   * @type STRING
   * @example "auth:otp:cooldown:REGISTER:user@example.com"
   */
  public static getOtpCooldownKey(identifier: string, purpose: string): string {
    return this.a(RedisPrefix.OTP_COOLDOWN, purpose, identifier)
  }

  // --- SLT Keys ---
  /**
   * Key for SLT context hash.
   * @type HASH
   * @example "auth:slt:context:jti-jkl"
   */
  public static getSltContextKey(jti: string): string {
    return `${RedisPrefix.AUTH}:slt-context:${jti}`
  }

  /**
   * Key for a blacklisted SLT JTI.
   * @type STRING
   * @example "auth:slt:blacklist:jti-mno"
   */
  public static getSltBlacklistKey(jti: string): string {
    return this.a(RedisPrefix.SLT_BLACKLIST, jti)
  }

  // --- User Activity & Security Keys ---

  /**
   * Key for the user login failures counter.
   * @type STRING (Counter)
   * @example "auth:user:login_failures:123"
   */
  public static getLoginFailuresKey(userId: number): string {
    return `${RedisPrefix.AUTH}:user:${userId}:login-failures`
  }

  /**
   * Key for the user account lock flag.
   * @type STRING
   * @example "auth:user:account_lock:123"
   */
  public static getAccountLockKey(userId: number): string {
    return `${RedisPrefix.AUTH}:user:${userId}:account-lock`
  }

  /**
   * Key for the suspicious activity notification cooldown.
   * @type STRING
   * @example "auth:user:suspicious_notification:123:failed_logins"
   */
  public static getSuspiciousActivityNotificationKey(userId: number, ruleType: string): string {
    return `${RedisPrefix.AUTH}:user:${userId}:suspicious-notification:${ruleType}`
  }

  /**
   * Key for the user activity log.
   * @type LIST or STREAM
   * @example "auth:user:activity:123"
   */
  public static getUserActivityKey(userId: number): string {
    return `${RedisPrefix.AUTH}:user:${userId}:activity`
  }

  static getPasswordChangesKey(userId: number): string {
    return `${RedisPrefix.AUTH}:user:${userId}:password-changes`
  }

  /**
   * Key for tracking recent email changes for a user (list).
   * @param userId - The ID of the user.
   * @returns `auth:user:<userId>:email-changes`
   */
  static getEmailChangesKey(userId: number): string {
    return `${RedisPrefix.AUTH}:user:${userId}:email-changes`
  }

  /**
   * Key for tracking recent 2FA status changes for a user (list).
   * @param userId - The ID of the user.
   * @returns `auth:user:<userId>:2fa-changes`
   */
  static getTwoFactorChangesKey(userId: number): string {
    return `${RedisPrefix.AUTH}:user:${userId}:2fa-changes`
  }

  /**
   * Key for storing the last login timestamp for a user.
   * @param userId - The ID of the user.
   */
  static getLastLoginTimestampKey(userId: number): string {
    return `${RedisPrefix.AUTH}:user:${userId}:last-login-timestamp`
  }
}
